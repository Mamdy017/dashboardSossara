import { __awaiter } from "tslib";
import { Injectable, EventEmitter, LOCALE_ID, Inject, Optional } from '@angular/core';
import * as i0 from "@angular/core";
export class GoogleChartsLoaderService {
    constructor(localeId, googleChartsSettings) {
        this.googleChartsSettings = googleChartsSettings;
        this.loadedPackages = [];
        this.loaded = false;
        const defaultSettings = {
            googleChartsVersion: '50',
            language: localeId,
        };
        this.googleChartsSettings = Object.assign(Object.assign({}, defaultSettings), this.googleChartsSettings);
        this.googleScriptLoadingNotifier = new EventEmitter();
        this.googleChartLoadingNotifier = new EventEmitter();
        this.googleScriptIsLoading = false;
        this.googleChartIsLoading = false;
        this.loadGoogleChartsScriptPromise = new Promise((resolve, reject) => {
            if (typeof google !== 'undefined' && google.charts) {
                resolve();
            }
            else if (!this.googleScriptIsLoading) {
                this.googleScriptIsLoading = true;
                const script = document.createElement('script');
                script.type = 'text/javascript';
                script.src = 'https://www.gstatic.com/charts/loader.js';
                script.async = true;
                script.defer = true;
                script.onload = () => {
                    this.googleScriptIsLoading = false;
                    this.googleScriptLoadingNotifier.emit(true);
                    resolve();
                };
                script.onerror = () => {
                    this.googleScriptIsLoading = false;
                    this.googleScriptLoadingNotifier.emit(false);
                    reject();
                };
                document.getElementsByTagName('head')[0].appendChild(script);
            }
            else {
                this.googleScriptLoadingNotifier.subscribe((loaded) => {
                    if (loaded) {
                        resolve();
                    }
                    else {
                        reject();
                    }
                });
            }
        });
    }
    load(settings) {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.loadGoogleChartsScriptPromise;
            yield new Promise((resolve) => {
                if (this.googleChartIsLoading) {
                    this.googleChartLoadingNotifier.subscribe(() => {
                        this.doLoad(resolve, settings);
                    });
                    return;
                }
                this.doLoad(resolve, settings);
            });
        });
    }
    doLoad(resolve, settings) {
        settings = Object.assign(Object.assign({}, this.googleChartsSettings), settings);
        if (!settings.packages && this.loaded) {
            resolve();
            return;
        }
        if (settings.packages) {
            let pkgs = settings.packages.filter(p => this.loadedPackages.indexOf(p) < 0);
            if (pkgs.length == 0 && this.loaded) {
                resolve();
                return;
            }
            settings.packages = pkgs;
        }
        const _settings = settings;
        _settings.callback = () => {
            this.googleChartIsLoading = false;
            if (_settings.packages !== undefined) {
                this.loadedPackages = this.loadedPackages.concat(_settings.packages);
            }
            this.loaded = true;
            this.googleChartLoadingNotifier.emit();
            resolve();
        };
        this.googleChartIsLoading = true;
        google.charts.load(settings.googleChartsVersion, _settings);
    }
}
GoogleChartsLoaderService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.14", ngImport: i0, type: GoogleChartsLoaderService, deps: [{ token: LOCALE_ID }, { token: 'googleChartsSettings', optional: true }], target: i0.ɵɵFactoryTarget.Injectable });
GoogleChartsLoaderService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.2.14", ngImport: i0, type: GoogleChartsLoaderService, providedIn: 'root' });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.14", ngImport: i0, type: GoogleChartsLoaderService, decorators: [{
            type: Injectable,
            args: [{
                    providedIn: 'root'
                }]
        }], ctorParameters: function () { return [{ type: undefined, decorators: [{
                    type: Inject,
                    args: [LOCALE_ID]
                }] }, { type: undefined, decorators: [{
                    type: Inject,
                    args: ['googleChartsSettings']
                }, {
                    type: Optional
                }] }]; } });
//# sourceMappingURL=data:application/json;base64,