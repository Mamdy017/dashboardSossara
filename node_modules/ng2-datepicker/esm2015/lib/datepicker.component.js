import { Component, Input, HostListener, ElementRef, EventEmitter, Inject, ChangeDetectorRef } from '@angular/core';
import { DOCUMENT } from '@angular/common';
import { NG_VALUE_ACCESSOR } from '@angular/forms';
import { SlimScrollOptions, SlimScrollEvent } from 'ngx-slimscroll';
import { mergeDatepickerOptions, defaultOptions } from './datepicker-options.interface';
import { eachDayOfInterval, startOfMonth, endOfMonth, getDate, getMonth, getYear, isToday, isSameDay, isSameMonth, isSameYear, isBefore, isAfter, getDay, subDays, setDay, format, addMonths, subMonths, setYear, addYears, subYears } from 'date-fns';
import { fromEvent, Subscription } from 'rxjs';
import { filter } from 'rxjs/operators';
export class DatepickerComponent {
    constructor(elementRef, ref, document) {
        this.elementRef = elementRef;
        this.ref = ref;
        this.options = Object.assign({}, defaultOptions);
        this.scrollOptions = new SlimScrollOptions(this.scrollBarOptions);
        this.isOpened = false;
        this.innerValue = new Date();
        this.displayValue = '';
        this.view = 'days';
        this.date = new Date();
        this.years = [];
        this.days = [];
        this.dayNames = [];
        this.scrollEvents = new EventEmitter();
        this.sub = new Subscription();
        this.onTouchedCallback = () => { };
        this.onChangeCallback = () => { };
        this.doc = document;
    }
    get value() {
        return this.innerValue;
    }
    set value(val) {
        this.innerValue = val;
        this.displayValue = format(this.innerValue, this.options.format, { locale: this.options.locale });
        this.onChangeCallback(this.innerValue);
    }
    get title() {
        return format(this.date, this.options.formatTitle);
    }
    get scrollBarOptions() {
        return {
            barBackground: (this.options && this.options.scrollBarColor) || '#dfe3e9',
            gridBackground: 'transparent',
            barBorderRadius: '3',
            gridBorderRadius: '3',
            barWidth: '6',
            gridWidth: '6',
            barMargin: '0',
            gridMargin: '0'
        };
    }
    ngOnInit() {
        this.view = 'days';
        this.date = new Date();
        this.init();
    }
    ngOnChanges(changes) {
        if ('options' in changes) {
            this.options = mergeDatepickerOptions(this.options);
            this.scrollOptions = new SlimScrollOptions(this.scrollBarOptions);
            if (this.sub) {
                this.sub.unsubscribe();
            }
            if (this.options.enableKeyboard) {
                this.sub = fromEvent(this.doc || document, 'keyup')
                    .pipe(filter(() => this.isOpened))
                    .subscribe(e => {
                    e.preventDefault();
                    e.stopPropagation();
                    switch (e.key) {
                        case 'Down':
                        case 'ArrowDown':
                            this.prevYear();
                            break;
                        case 'Up':
                        case 'ArrowUp':
                            this.nextYear();
                            break;
                        case 'Left':
                        case 'ArrowLeft':
                            this.prevMonth();
                            break;
                        case 'Right':
                        case 'ArrowRight':
                            this.nextMonth();
                            break;
                        case 'Esc':
                        case 'Escape':
                        case 'Enter':
                            this.isOpened = false;
                            break;
                        default:
                            return;
                    }
                });
            }
        }
    }
    ngOnDestroy() {
        this.sub.unsubscribe();
    }
    toggle() {
        this.isOpened = !this.isOpened;
        if (this.isOpened) {
            this.view = 'days';
            this.date = this.value;
            this.initDays();
        }
    }
    toggleView() {
        this.view = this.view === 'days' ? 'years' : 'days';
        if (this.view === 'years') {
            this.ref.detectChanges();
            this.scrollToYear();
        }
    }
    nextMonth() {
        this.date = addMonths(this.date, 1);
        this.initDays();
    }
    prevMonth() {
        this.date = subMonths(this.date, 1);
        this.initDays();
    }
    nextYear() {
        this.date = addYears(this.date, 1);
        this.initDays();
    }
    prevYear() {
        this.date = subYears(this.date, 1);
        this.initDays();
    }
    setDate(i) {
        this.date = this.days[i].date;
        this.value = this.date;
        this.initDays();
        this.isOpened = false;
    }
    setYear(i) {
        this.date = setYear(this.date, this.years[i].year);
        this.initDays();
        this.initYears();
        this.view = 'days';
    }
    scrollToYear() {
        const parent = this.elementRef.nativeElement.querySelector('.main-calendar-years');
        const el = this.elementRef.nativeElement.querySelector('.year-unit.is-selected');
        const y = el.offsetTop - parent.clientHeight / 2 + el.clientHeight / 2;
        const event = new SlimScrollEvent({ type: 'scrollTo', y, duration: 100 });
        this.scrollEvents.emit(event);
    }
    init() {
        this.initDayNames();
        this.initDays();
        this.initYears();
    }
    initDays() {
        const date = this.date || new Date();
        const [start, end] = [startOfMonth(date), endOfMonth(date)];
        this.days = eachDayOfInterval({ start, end }).map((d) => this.generateDay(d));
        const tmp = getDay(start) - this.options.firstCalendarDay;
        const prevDays = tmp < 0 ? 7 - this.options.firstCalendarDay : tmp;
        for (let i = 1; i <= prevDays; i++) {
            const d = subDays(start, i);
            this.days.unshift(this.generateDay(d, false));
        }
    }
    initYears() {
        const range = this.options.maxYear - this.options.minYear + 1;
        this.years = Array.from(new Array(range), (_, i) => i + this.options.minYear).map(year => {
            return { year, isThisYear: year === getYear(this.date) };
        });
    }
    initDayNames() {
        this.dayNames = [];
        const start = this.options.firstCalendarDay;
        for (let i = start; i <= 6 + start; i++) {
            const date = setDay(new Date(), i);
            this.dayNames.push(format(date, this.options.formatDays, { locale: this.options.locale }));
        }
    }
    generateDay(date, inThisMonth = true) {
        return {
            date,
            day: getDate(date),
            month: getMonth(date),
            year: getYear(date),
            inThisMonth,
            isToday: isToday(date),
            isSelected: isSameDay(date, this.innerValue) && isSameMonth(date, this.innerValue) && isSameYear(date, this.innerValue),
            isSelectable: this.isDateSelectable(date)
        };
    }
    isDateSelectable(date) {
        if (this.options.minDate && isBefore(date, this.options.minDate)) {
            return false;
        }
        if (this.options.maxDate && isAfter(date, this.options.maxDate)) {
            return false;
        }
        return true;
    }
    writeValue(val) {
        if (!val) {
            return;
        }
        this.innerValue = val;
        this.displayValue = format(this.innerValue, this.options.format, { locale: this.options.locale });
        this.init();
    }
    registerOnChange(fn) {
        this.onChangeCallback = fn;
    }
    registerOnTouched(fn) {
        this.onTouchedCallback = fn;
    }
    onBlur(e) {
        if (!this.isOpened) {
            return;
        }
        const input = this.elementRef.nativeElement.querySelector('.datepicker-container > input');
        if (!input || e.target === input || input.contains(e.target)) {
            return;
        }
        const container = this.elementRef.nativeElement.querySelector('.datepicker-container > .calendar-container');
        if (container &&
            container !== e.target &&
            !container.contains(e.target) &&
            !e.target.classList.contains('year-unit')) {
            this.isOpened = false;
        }
    }
}
DatepickerComponent.decorators = [
    { type: Component, args: [{
                selector: 'ngx-datepicker',
                template: "<div class=\"datepicker-container\" [class]=\"options.calendarClass\">\n  <input\n    type=\"text\"\n    [(ngModel)]=\"displayValue\"\n    [class]=\"options.inputClass\"\n    [placeholder]=\"options.placeholder\"\n    readonly\n    (click)=\"toggle()\"\n  />\n\n  <div class=\"calendar-container\" *ngIf=\"isOpened\">\n    <div class=\"top-container\">\n      <div class=\"month-year-container\">\n        <span class=\"month-year-text\">\n          <span (click)=\"toggleView()\">{{ title }}</span>\n        </span>\n      </div>\n      <div class=\"controls\">\n        <svg\n          xmlns=\"http://www.w3.org/2000/svg\"\n          class=\"control prev-month\"\n          width=\"8\"\n          height=\"13\"\n          (click)=\"prevMonth()\"\n          *ngIf=\"view === 'days'\"\n        >\n          <path\n            d=\"M7.575 1.131a1.063 1.063 0 00-1.502 0l-4.93 4.93c-.42.42-.42 1.099 0 1.518l4.93 4.93a1.063 1.063 0 001.503-1.503L3.388 6.82l4.186-4.186a1.063 1.063 0 000-1.503z\"\n          />\n        </svg>\n        <svg\n          xmlns=\"http://www.w3.org/2000/svg\"\n          class=\"control next-month\"\n          width=\"8\"\n          height=\"13\"\n          (click)=\"nextMonth()\"\n          *ngIf=\"view === 'days'\"\n        >\n          <path\n            d=\"M1.14 1.131a1.063 1.063 0 011.502 0l4.93 4.93c.42.42.42 1.099 0 1.518l-4.93 4.93a1.063 1.063 0 01-1.503-1.503L5.327 6.82 1.14 2.634a1.063 1.063 0 010-1.503z\"\n          />\n        </svg>\n      </div>\n    </div>\n    <div class=\"main-calendar-container is-days\" *ngIf=\"view === 'days'\">\n      <div class=\"main-calendar-day-names\">\n        <span class=\"day-name-unit\" *ngFor=\"let day of dayNames\">{{ day }}</span>\n      </div>\n      <div class=\"main-calendar-days\">\n        <span\n          class=\"day-unit\"\n          *ngFor=\"let day of days; let i = index\"\n          [ngClass]=\"{\n            'is-prev-month': !day.inThisMonth,\n            'is-today': day.isToday,\n            'is-selected': day.isSelected,\n            'is-disabled': !day.isSelectable\n          }\"\n          (click)=\"day.isSelectable && setDate(i)\"\n          >{{ day.day }}</span\n        >\n      </div>\n    </div>\n    <div class=\"main-calendar-container is-years\" *ngIf=\"view === 'years'\">\n      <div class=\"main-calendar-years\" slimScroll [options]=\"scrollOptions\" [scrollEvents]=\"scrollEvents\">\n        <span\n          class=\"year-unit\"\n          *ngFor=\"let year of years; let i = index\"\n          [ngClass]=\"{ 'is-selected': year.isThisYear }\"\n          (click)=\"setYear(i)\"\n          >{{ year.year }}</span\n        >\n      </div>\n    </div>\n  </div>\n</div>\n",
                providers: [{ provide: NG_VALUE_ACCESSOR, useExisting: DatepickerComponent, multi: true }],
                styles: [".datepicker-container{position:relative;display:inline-block;box-sizing:border-box}.datepicker-container *{box-sizing:inherit}.datepicker-container input{-webkit-touch-callout:none;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;cursor:pointer}.datepicker-container .is-hidden{display:none!important}.datepicker-container .calendar-container{position:absolute;width:320px;border-radius:4px;top:35px;left:0;z-index:10}.datepicker-container .calendar-container .top-container{-webkit-touch-callout:none;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;width:100%;padding:20px;display:flex;justify-content:space-between;align-items:center}.datepicker-container .calendar-container .top-container .month-year-container{height:100%;display:flex;align-items:center;cursor:pointer;position:relative}.datepicker-container .calendar-container .top-container .month-year-container .month-year-text{font-size:16px;width:100%}.datepicker-container .calendar-container .top-container .controls{height:100%;display:flex;justify-content:flex-end;align-items:center}.datepicker-container .calendar-container .top-container .controls .control{cursor:pointer;margin-left:20px}.datepicker-container .calendar-container .main-calendar-container{width:100%;height:100%;font-size:12px;display:block}.datepicker-container .calendar-container .main-calendar-container .main-calendar-day-names{-webkit-touch-callout:none;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;display:flex;align-items:center;height:35px;padding:0 10px}.datepicker-container .calendar-container .main-calendar-container .main-calendar-day-names .day-name-unit{width:calc(100% / 7);text-transform:uppercase;text-align:center}.datepicker-container .calendar-container .main-calendar-container .main-calendar-days,.datepicker-container .calendar-container .main-calendar-container .main-calendar-years{-webkit-touch-callout:none;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;padding:10px;width:100%;overflow:hidden;text-align:left;display:inline-block}.datepicker-container .calendar-container .main-calendar-container .main-calendar-days.is-hidden,.datepicker-container .calendar-container .main-calendar-container .main-calendar-years.is-hidden{display:none}.datepicker-container .calendar-container .main-calendar-container .main-calendar-days .day-unit,.datepicker-container .calendar-container .main-calendar-container .main-calendar-days .year-unit,.datepicker-container .calendar-container .main-calendar-container .main-calendar-years .day-unit,.datepicker-container .calendar-container .main-calendar-container .main-calendar-years .year-unit{width:calc(100% / 7);display:inline-flex;align-items:center;justify-content:center;cursor:pointer;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;font-size:13px;border-radius:50%}.datepicker-container .calendar-container .main-calendar-container .main-calendar-days .day-unit:before,.datepicker-container .calendar-container .main-calendar-container .main-calendar-days .year-unit:before,.datepicker-container .calendar-container .main-calendar-container .main-calendar-years .day-unit:before,.datepicker-container .calendar-container .main-calendar-container .main-calendar-years .year-unit:before{content:\"\";float:left;padding-top:calc(100% - 5px)}.datepicker-container .calendar-container .main-calendar-container .main-calendar-days .day-unit.is-disabled,.datepicker-container .calendar-container .main-calendar-container .main-calendar-days .year-unit.is-disabled,.datepicker-container .calendar-container .main-calendar-container .main-calendar-years .day-unit.is-disabled,.datepicker-container .calendar-container .main-calendar-container .main-calendar-years .year-unit.is-disabled{cursor:not-allowed}.datepicker-container .calendar-container .main-calendar-container .main-calendar-days .day-unit.is-disabled:hover,.datepicker-container .calendar-container .main-calendar-container .main-calendar-days .year-unit.is-disabled:hover,.datepicker-container .calendar-container .main-calendar-container .main-calendar-years .day-unit.is-disabled:hover,.datepicker-container .calendar-container .main-calendar-container .main-calendar-years .year-unit.is-disabled:hover{background:transparent}.datepicker-container .calendar-container .main-calendar-container .main-calendar-years{display:block;padding:10px;height:275px}.datepicker-container .calendar-container .main-calendar-container .main-calendar-years .year-unit{width:calc(100% / 4);height:35px;border-radius:20px;margin:8px 0}.datepicker-container .calendar-container .main-calendar-container .main-calendar-years .year-unit:before{padding-top:0}.datepicker-default .calendar-container{background:#fff;border:1px solid #eaedf3;box-shadow:0 4px 12px rgba(0,0,0,.05);top:35px;left:0;font-weight:600}.datepicker-default .month-year-text{color:#010001}.datepicker-default .control path{fill:#aaa8ab}.datepicker-default .control:hover path{fill:#010001}.datepicker-default .main-calendar-day-names{border-bottom:1px solid #eaedf3}.datepicker-default .day-name-unit{color:#aaa8ab}.datepicker-default .day-unit,.datepicker-default .year-unit{color:#010001}.datepicker-default .day-unit.is-prev-month,.datepicker-default .year-unit.is-prev-month{color:#bbbabe}.datepicker-default .day-unit.is-today,.datepicker-default .year-unit.is-today{background:#edeef2}.datepicker-default .day-unit.is-selected,.datepicker-default .day-unit:hover,.datepicker-default .year-unit.is-selected,.datepicker-default .year-unit:hover{background:#010001;color:#fff}.datepicker-default .day-unit.is-disabled,.datepicker-default .year-unit.is-disabled{color:#aaa8ab}.datepicker-default .day-unit.is-disabled:hover,.datepicker-default .year-unit.is-disabled:hover{background:transparent}"]
            },] }
];
DatepickerComponent.ctorParameters = () => [
    { type: ElementRef },
    { type: ChangeDetectorRef },
    { type: undefined, decorators: [{ type: Inject, args: [DOCUMENT,] }] }
];
DatepickerComponent.propDecorators = {
    options: [{ type: Input }],
    scrollOptions: [{ type: Input }],
    isOpened: [{ type: Input }],
    onBlur: [{ type: HostListener, args: ['document:click', ['$event'],] }]
};
//# sourceMappingURL=data:application/json;base64,