import { Injectable } from '@angular/core';
import { StepActionType } from './joyride-steps-container.service';
import { NO_POSITION } from '../directives/joyride.directive';
import { ReplaySubject } from 'rxjs';
import { JoyrideStepDoesNotExist, JoyrideStepOutOfRange } from '../models/joyride-error.class';
import * as i0 from "@angular/core";
import * as i1 from "./joyride-backdrop.service";
import * as i2 from "./event-listener.service";
import * as i3 from "./joyride-steps-container.service";
import * as i4 from "./document.service";
import * as i5 from "./dom.service";
import * as i6 from "./step-drawer.service";
import * as i7 from "./joyride-options.service";
import * as i8 from "@angular/router";
import * as i9 from "./logger.service";
const SCROLLBAR_SIZE = 20;
export const DISTANCE_FROM_TARGET = 15;
export const ARROW_SIZE = 10;
export class JoyrideStepService {
    constructor(backDropService, eventListener, stepsContainerService, documentService, DOMService, stepDrawerService, optionsService, router, logger) {
        this.backDropService = backDropService;
        this.eventListener = eventListener;
        this.stepsContainerService = stepsContainerService;
        this.documentService = documentService;
        this.DOMService = DOMService;
        this.stepDrawerService = stepDrawerService;
        this.optionsService = optionsService;
        this.router = router;
        this.logger = logger;
        this.winTopPosition = 0;
        this.winBottomPosition = 0;
        this.stepsObserver = new ReplaySubject();
        this.initViewportPositions();
        this.subscribeToScrollEvents();
        this.subscribeToResizeEvents();
    }
    initViewportPositions() {
        this.winTopPosition = 0;
        this.winBottomPosition = this.DOMService.getNativeWindow().innerHeight - SCROLLBAR_SIZE;
    }
    subscribeToScrollEvents() {
        this.eventListener.startListeningScrollEvents();
        this.eventListener.scrollEvent.subscribe(scroll => {
            this.winTopPosition = scroll.scrollY;
            this.winBottomPosition = this.winTopPosition + this.DOMService.getNativeWindow().innerHeight - SCROLLBAR_SIZE;
            if (this.currentStep)
                this.backDropService.redraw(this.currentStep, scroll);
        });
    }
    subscribeToResizeEvents() {
        this.eventListener.resizeEvent.subscribe(() => {
            if (this.currentStep)
                this.backDropService.redrawTarget(this.currentStep);
        });
    }
    drawStep(step) {
        step.position = step.position === NO_POSITION ? this.optionsService.getStepDefaultPosition() : step.position;
        this.stepDrawerService.draw(step);
    }
    startTour() {
        this.stepsObserver = new ReplaySubject();
        this.stepsContainerService.init();
        this.documentService.setDocumentHeight();
        this.tryShowStep(StepActionType.NEXT);
        this.eventListener.startListeningResizeEvents();
        this.subscribeToStepsUpdates();
        return this.stepsObserver.asObservable();
    }
    close() {
        this.removeCurrentStep();
        this.notifyTourIsFinished();
        this.DOMService.getNativeWindow().scrollTo(0, 0);
        this.eventListener.stopListeningResizeEvents();
        this.backDropService.remove();
    }
    prev() {
        this.removeCurrentStep();
        this.currentStep.prevCliked.emit();
        this.tryShowStep(StepActionType.PREV);
    }
    next() {
        this.removeCurrentStep();
        this.currentStep.nextClicked.emit();
        this.tryShowStep(StepActionType.NEXT);
    }
    async navigateToStepPage(action) {
        let stepRoute = this.stepsContainerService.getStepRoute(action);
        if (stepRoute) {
            return await this.router.navigate([stepRoute]);
        }
    }
    subscribeToStepsUpdates() {
        this.stepsContainerService.stepHasBeenModified.subscribe(updatedStep => {
            if (this.currentStep && this.currentStep.name === updatedStep.name) {
                this.currentStep = updatedStep;
            }
        });
    }
    async tryShowStep(actionType) {
        await this.navigateToStepPage(actionType);
        const timeout = this.optionsService.getWaitingTime();
        if (timeout > 100)
            this.backDropService.remove();
        setTimeout(() => {
            try {
                this.showStep(actionType);
            }
            catch (error) {
                if (error instanceof JoyrideStepDoesNotExist) {
                    this.tryShowStep(actionType);
                }
                else if (error instanceof JoyrideStepOutOfRange) {
                    this.logger.error('Forcing the tour closure: First or Last step not found in the DOM.');
                    this.close();
                }
                else {
                    throw new Error(error);
                }
            }
        }, timeout);
    }
    showStep(actionType) {
        this.currentStep = this.stepsContainerService.get(actionType);
        if (this.currentStep == null)
            throw new JoyrideStepDoesNotExist('');
        this.notifyStepClicked(actionType);
        // Scroll the element to get it visible if it's in a scrollable element
        this.scrollIfElementBeyondOtherElements();
        this.backDropService.draw(this.currentStep);
        this.drawStep(this.currentStep);
        this.scrollIfStepAndTargetAreNotVisible();
    }
    notifyStepClicked(actionType) {
        let stepInfo = {
            number: this.stepsContainerService.getStepNumber(this.currentStep.name),
            name: this.currentStep.name,
            route: this.currentStep.route,
            actionType
        };
        this.stepsObserver.next(stepInfo);
    }
    notifyTourIsFinished() {
        if (this.currentStep)
            this.currentStep.tourDone.emit();
        this.stepsObserver.complete();
    }
    removeCurrentStep() {
        if (this.currentStep)
            this.stepDrawerService.remove(this.currentStep);
    }
    scrollIfStepAndTargetAreNotVisible() {
        this.scrollWhenTargetOrStepAreHiddenBottom();
        this.scrollWhenTargetOrStepAreHiddenTop();
    }
    scrollWhenTargetOrStepAreHiddenBottom() {
        let totalTargetBottom = this.getMaxTargetAndStepBottomPosition();
        if (totalTargetBottom > this.winBottomPosition) {
            this.DOMService.getNativeWindow().scrollBy(0, totalTargetBottom - this.winBottomPosition);
        }
    }
    scrollWhenTargetOrStepAreHiddenTop() {
        let totalTargetTop = this.getMaxTargetAndStepTopPosition();
        if (totalTargetTop < this.winTopPosition) {
            this.DOMService.getNativeWindow().scrollBy(0, totalTargetTop - this.winTopPosition);
        }
    }
    getMaxTargetAndStepBottomPosition() {
        let targetAbsoluteTop = this.documentService.getElementAbsoluteTop(this.currentStep.targetViewContainer.element);
        if (this.currentStep.position === 'top') {
            return targetAbsoluteTop + this.currentStep.stepInstance.targetHeight;
        }
        else if (this.currentStep.position === 'bottom') {
            return (targetAbsoluteTop +
                this.currentStep.stepInstance.targetHeight +
                this.currentStep.stepInstance.stepHeight +
                ARROW_SIZE +
                DISTANCE_FROM_TARGET);
        }
        else if (this.currentStep.position === 'right' || this.currentStep.position === 'left') {
            return Math.max(targetAbsoluteTop + this.currentStep.stepInstance.targetHeight, targetAbsoluteTop + this.currentStep.stepInstance.targetHeight / 2 + this.currentStep.stepInstance.stepHeight / 2);
        }
    }
    getMaxTargetAndStepTopPosition() {
        let targetAbsoluteTop = this.documentService.getElementAbsoluteTop(this.currentStep.targetViewContainer.element);
        if (this.currentStep.position === 'top') {
            return targetAbsoluteTop - (this.currentStep.stepInstance.stepHeight + ARROW_SIZE + DISTANCE_FROM_TARGET);
        }
        else if (this.currentStep.position === 'bottom') {
            return targetAbsoluteTop;
        }
        else if (this.currentStep.position === 'right' || this.currentStep.position === 'left') {
            return Math.min(targetAbsoluteTop, targetAbsoluteTop + this.currentStep.stepInstance.targetHeight / 2 - this.currentStep.stepInstance.stepHeight / 2);
        }
    }
    scrollIfElementBeyondOtherElements() {
        if (this.isElementBeyondOthers() === 2) {
            this.documentService.scrollToTheTop(this.currentStep.targetViewContainer.element);
        }
        if (this.isElementBeyondOthers() === 2) {
            this.documentService.scrollToTheBottom(this.currentStep.targetViewContainer.element);
        }
        if (this.isElementBeyondOthers() === 1 && this.documentService.isParentScrollable(this.currentStep.targetViewContainer.element)) {
            this.documentService.scrollIntoView(this.currentStep.targetViewContainer.element, this.currentStep.isElementOrAncestorFixed);
        }
        if (this.isElementBeyondOthers() === 1 && this.documentService.isParentScrollable(this.currentStep.targetViewContainer.element)) {
            this.currentStep.targetViewContainer.element.nativeElement.scrollIntoView();
        }
    }
    isElementBeyondOthers() {
        return this.documentService.isElementBeyondOthers(this.currentStep.targetViewContainer.element, this.currentStep.isElementOrAncestorFixed, 'backdrop');
    }
}
JoyrideStepService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.1.1", ngImport: i0, type: JoyrideStepService, deps: [{ token: i1.JoyrideBackdropService }, { token: i2.EventListenerService }, { token: i3.JoyrideStepsContainerService }, { token: i4.DocumentService }, { token: i5.DomRefService }, { token: i6.StepDrawerService }, { token: i7.JoyrideOptionsService }, { token: i8.Router }, { token: i9.LoggerService }], target: i0.ɵɵFactoryTarget.Injectable });
JoyrideStepService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "13.1.1", ngImport: i0, type: JoyrideStepService });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.1.1", ngImport: i0, type: JoyrideStepService, decorators: [{
            type: Injectable
        }], ctorParameters: function () { return [{ type: i1.JoyrideBackdropService }, { type: i2.EventListenerService }, { type: i3.JoyrideStepsContainerService }, { type: i4.DocumentService }, { type: i5.DomRefService }, { type: i6.StepDrawerService }, { type: i7.JoyrideOptionsService }, { type: i8.Router }, { type: i9.LoggerService }]; } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiam95cmlkZS1zdGVwLnNlcnZpY2UuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi9wcm9qZWN0cy9uZ3gtam95cmlkZS9zcmMvbGliL3NlcnZpY2VzL2pveXJpZGUtc3RlcC5zZXJ2aWNlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFJM0MsT0FBTyxFQUFnQyxjQUFjLEVBQUUsTUFBTSxtQ0FBbUMsQ0FBQztBQUlqRyxPQUFPLEVBQUUsV0FBVyxFQUFFLE1BQU0saUNBQWlDLENBQUM7QUFHOUQsT0FBTyxFQUFFLGFBQWEsRUFBYyxNQUFNLE1BQU0sQ0FBQztBQUVqRCxPQUFPLEVBQUUsdUJBQXVCLEVBQUUscUJBQXFCLEVBQUUsTUFBTSwrQkFBK0IsQ0FBQzs7Ozs7Ozs7Ozs7QUFHL0YsTUFBTSxjQUFjLEdBQUcsRUFBRSxDQUFDO0FBRTFCLE1BQU0sQ0FBQyxNQUFNLG9CQUFvQixHQUFHLEVBQUUsQ0FBQztBQUN2QyxNQUFNLENBQUMsTUFBTSxVQUFVLEdBQUcsRUFBRSxDQUFDO0FBVTdCLE1BQU0sT0FBTyxrQkFBa0I7SUFNM0IsWUFDcUIsZUFBdUMsRUFDdkMsYUFBbUMsRUFDbkMscUJBQW1ELEVBQ25ELGVBQWdDLEVBQ2hDLFVBQXlCLEVBQ3pCLGlCQUFvQyxFQUNwQyxjQUFxQyxFQUNyQyxNQUFjLEVBQ2QsTUFBcUI7UUFSckIsb0JBQWUsR0FBZixlQUFlLENBQXdCO1FBQ3ZDLGtCQUFhLEdBQWIsYUFBYSxDQUFzQjtRQUNuQywwQkFBcUIsR0FBckIscUJBQXFCLENBQThCO1FBQ25ELG9CQUFlLEdBQWYsZUFBZSxDQUFpQjtRQUNoQyxlQUFVLEdBQVYsVUFBVSxDQUFlO1FBQ3pCLHNCQUFpQixHQUFqQixpQkFBaUIsQ0FBbUI7UUFDcEMsbUJBQWMsR0FBZCxjQUFjLENBQXVCO1FBQ3JDLFdBQU0sR0FBTixNQUFNLENBQVE7UUFDZCxXQUFN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QUFXLENBQUMsbUJBQW1CLENBQUMsT0FBTyxDQUFDLEVBQUU7WUFDN0gsSUFBSSxDQUFDLGVBQWUsQ0FBQyxjQUFjLENBQUMsSUFBSSxDQUFDLFdBQVcsQ0FBQyxtQkFBbUIsQ0FBQyxPQUFPLEVBQUUsSUFBSSxDQUFDLFdBQVcsQ0FBQyx3QkFBd0IsQ0FBQyxDQUFDO1NBQ2hJO1FBQ0QsSUFBSSxJQUFJLENBQUMscUJBQXFCLEVBQUUsS0FBSyxDQUFDLElBQUksSUFBSSxDQUFDLGVBQWUsQ0FBQyxrQkFBa0IsQ0FBQyxJQUFJLENBQUMsV0FBVyxDQUFDLG1CQUFtQixDQUFDLE9BQU8sQ0FBQyxFQUFFO1lBQzdILElBQUksQ0FBQyxXQUFXLENBQUMsbUJBQW1CLENBQUMsT0FBTyxDQUFDLGFBQWEsQ0FBQyxjQUFjLEVBQUUsQ0FBQztTQUMvRTtJQUNMLENBQUM7SUFFTyxxQkFBcUI7UUFDekIsT0FBTyxJQUFJLENBQUMsZUFBZSxDQUFDLHFCQUFxQixDQUM3QyxJQUFJLENBQUMsV0FBVyxDQUFDLG1CQUFtQixDQUFDLE9BQU8sRUFDNUMsSUFBSSxDQUFDLFdBQVcsQ0FBQyx3QkFBd0IsRUFDekMsVUFBVSxDQUNiLENBQUM7SUFDTixDQUFDOzsrR0F6TlEsa0JBQWtCO21IQUFsQixrQkFBa0I7MkZBQWxCLGtCQUFrQjtrQkFEOUIsVUFBVSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEluamVjdGFibGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IEpveXJpZGVTdGVwIH0gZnJvbSAnLi4vbW9kZWxzL2pveXJpZGUtc3RlcC5jbGFzcyc7XG5pbXBvcnQgeyBKb3lyaWRlQmFja2Ryb3BTZXJ2aWNlIH0gZnJvbSAnLi9qb3lyaWRlLWJhY2tkcm9wLnNlcnZpY2UnO1xuaW1wb3J0IHsgRXZlbnRMaXN0ZW5lclNlcnZpY2UgfSBmcm9tICcuL2V2ZW50LWxpc3RlbmVyLnNlcnZpY2UnO1xuaW1wb3J0IHsgSm95cmlkZVN0ZXBzQ29udGFpbmVyU2VydmljZSwgU3RlcEFjdGlvblR5cGUgfSBmcm9tICcuL2pveXJpZGUtc3RlcHMtY29udGFpbmVyLnNlcnZpY2UnO1xuaW1wb3J0IHsgRG9jdW1lbnRTZXJ2aWNlIH0gZnJvbSAnLi9kb2N1bWVudC5zZXJ2aWNlJztcbmltcG9ydCB7IFN0ZXBEcmF3ZXJTZXJ2aWNlIH0gZnJvbSAnLi9zdGVwLWRyYXdlci5zZXJ2aWNlJztcbmltcG9ydCB7IERvbVJlZlNlcnZpY2UgfSBmcm9tICcuL2RvbS5zZXJ2aWNlJztcbmltcG9ydCB7IE5PX1BPU0lUSU9OIH0gZnJvbSAnLi4vZGlyZWN0aXZlcy9qb3lyaWRlLmRpcmVjdGl2ZSc7XG5pbXBvcnQgeyBKb3lyaWRlT3B0aW9uc1NlcnZpY2UgfSBmcm9tICcuL2pveXJpZGUtb3B0aW9ucy5zZXJ2aWNlJztcbmltcG9ydCB7IFJvdXRlciB9IGZyb20gJ0Bhbmd1bGFyL3JvdXRlcic7XG5pbXBvcnQgeyBSZXBsYXlTdWJqZWN0LCBPYnNlcnZhYmxlIH0gZnJvbSAncnhqcyc7XG5pbXBvcnQgeyBKb3lyaWRlU3RlcEluZm8gfSBmcm9tICcuLi9tb2RlbHMvam95cmlkZS1zdGVwLWluZm8uY2xhc3MnO1xuaW1wb3J0IHsgSm95cmlkZVN0ZXBEb2VzTm90RXhpc3QsIEpveXJpZGVTdGVwT3V0T2ZSYW5nZSB9IGZyb20gJy4uL21vZGVscy9qb3lyaWRlLWVycm9yLmNsYXNzJztcbmltcG9ydCB7IExvZ2dlclNlcnZpY2UgfSBmcm9tICcuL2xvZ2dlci5zZXJ2aWNlJztcblxuY29uc3QgU0NST0xMQkFSX1NJWkUgPSAyMDtcblxuZXhwb3J0IGNvbnN0IERJU1RBTkNFX0ZST01fVEFSR0VUID0gMTU7XG5leHBvcnQgY29uc3QgQVJST1dfU0laRSA9IDEwO1xuXG5leHBvcnQgaW50ZXJmYWNlIElKb3lyaWRlU3RlcFNlcnZpY2Uge1xuICAgIHN0YXJ0VG91cigpOiBPYnNlcnZhYmxlPEpveXJpZGVTdGVwSW5mbz47XG4gICAgY2xvc2UoKTogYW55O1xuICAgIHByZXYoKTogYW55O1xuICAgIG5leHQoKTogYW55O1xufVxuXG5ASW5qZWN0YWJsZSgpXG5leHBvcnQgY2xhc3MgSm95cmlkZVN0ZXBTZXJ2aWNlIGltcGxlbWVudHMgSUpveXJpZGVTdGVwU2VydmljZSB7XG4gICAgcHJpdmF0ZSBjdXJyZW50U3RlcDogSm95cmlkZVN0ZXA7XG4gICAgcHJpdmF0ZSB3aW5Ub3BQb3NpdGlvbjogbnVtYmVyID0gMDtcbiAgICBwcml2YXRlIHdpbkJvdHRvbVBvc2l0aW9uOiBudW1iZXIgPSAwO1xuICAgIHByaXZhdGUgc3RlcHNPYnNlcnZlcjogUmVwbGF5U3ViamVjdDxKb3lyaWRlU3RlcEluZm8+ID0gbmV3IFJlcGxheVN1YmplY3Q8Sm95cmlkZVN0ZXBJbmZvPigpO1xuXG4gICAgY29uc3RydWN0b3IoXG4gICAgICAgIHByaXZhdGUgcmVhZG9ubHkgYmFja0Ryb3BTZXJ2aWNlOiBKb3lyaWRlQmFja2Ryb3BTZXJ2aWNlLFxuICAgICAgICBwcml2YXRlIHJlYWRvbmx5IGV2ZW50TGlzdGVuZXI6IEV2ZW50TGlzdGVuZXJTZXJ2aWNlLFxuICAgICAgICBwcml2YXRlIHJlYWRvbmx5IHN0ZXBzQ29udGFpbmVyU2VydmljZTogSm95cmlkZVN0ZXBzQ29udGFpbmVyU2VydmljZSxcbiAgICAgICAgcHJpdmF0ZSByZWFkb25seSBkb2N1bWVudFNlcnZpY2U6IERvY3VtZW50U2VydmljZSxcbiAgICAgICAgcHJpdmF0ZSByZWFkb25seSBET01TZXJ2aWNlOiBEb21SZWZTZXJ2aWNlLFxuICAgICAgICBwcml2YXRlIHJlYWRvbmx5IHN0ZXBEcmF3ZXJTZXJ2aWNlOiBTdGVwRHJhd2VyU2VydmljZSxcbiAgICAgICAgcHJpdmF0ZSByZWFkb25seSBvcHRpb25zU2VydmljZTogSm95cmlkZU9wdGlvbnNTZXJ2aWNlLFxuICAgICAgICBwcml2YXRlIHJlYWRvbmx5IHJvdXRlcjogUm91dGVyLFxuICAgICAgICBwcml2YXRlIHJlYWRvbmx5IGxvZ2dlcjogTG9nZ2VyU2VydmljZVxuICAgICkge1xuICAgICAgICB0aGlzLmluaXRWaWV3cG9ydFBvc2l0aW9ucygpO1xuICAgICAgICB0aGlzLnN1YnNjcmliZVRvU2Nyb2xsRXZlbnRzKCk7XG4gICAgICAgIHRoaXMuc3Vic2NyaWJlVG9SZXNpemVFdmVudHMoKTtcbiAgICB9XG5cbiAgICBwcml2YXRlIGluaXRWaWV3cG9ydFBvc2l0aW9ucygpIHtcbiAgICAgICAgdGhpcy53aW5Ub3BQb3NpdGlvbiA9IDA7XG4gICAgICAgIHRoaXMud2luQm90dG9tUG9zaXRpb24gPSB0aGlzLkRPTVNlcnZpY2UuZ2V0TmF0aXZlV2luZG93KCkuaW5uZXJIZWlnaHQgLSBTQ1JPTExCQVJfU0laRTtcbiAgICB9XG5cbiAgICBwcml2YXRlIHN1YnNjcmliZVRvU2Nyb2xsRXZlbnRzKCkge1xuICAgICAgICB0aGlzLmV2ZW50TGlzdGVuZXIuc3RhcnRMaXN0ZW5pbmdTY3JvbGxFdmVudHMoKTtcbiAgICAgICAgdGhpcy5ldmVudExpc3RlbmVyLnNjcm9sbEV2ZW50LnN1YnNjcmliZShzY3JvbGwgPT4ge1xuICAgICAgICAgICAgdGhpcy53aW5Ub3BQb3NpdGlvbiA9IHNjcm9sbC5zY3JvbGxZO1xuICAgICAgICAgICAgdGhpcy53aW5Cb3R0b21Qb3NpdGlvbiA9IHRoaXMud2luVG9wUG9zaXRpb24gKyB0aGlzLkRPTVNlcnZpY2UuZ2V0TmF0aXZlV2luZG93KCkuaW5uZXJIZWlnaHQgLSBTQ1JPTExCQVJfU0laRTtcbiAgICAgICAgICAgIGlmICh0aGlzLmN1cnJlbnRTdGVwKSB0aGlzLmJhY2tEcm9wU2VydmljZS5yZWRyYXcodGhpcy5jdXJyZW50U3RlcCwgc2Nyb2xsKTtcbiAgICAgICAgfSk7XG4gICAgfVxuXG4gICAgcHJpdmF0ZSBzdWJzY3JpYmVUb1Jlc2l6ZUV2ZW50cygpIHtcbiAgICAgICAgdGhpcy5ldmVudExpc3RlbmVyLnJlc2l6ZUV2ZW50LnN1YnNjcmliZSgoKSA9PiB7XG4gICAgICAgICAgICBpZiAodGhpcy5jdXJyZW50U3RlcCkgdGhpcy5iYWNrRHJvcFNlcnZpY2UucmVkcmF3VGFyZ2V0KHRoaXMuY3VycmVudFN0ZXApO1xuICAgICAgICB9KTtcbiAgICB9XG5cbiAgICBwcml2YXRlIGRyYXdTdGVwKHN0ZXA6IEpveXJpZGVTdGVwKSB7XG4gICAgICAgIHN0ZXAucG9zaXRpb24gPSBzdGVwLnBvc2l0aW9uID09PSBOT19QT1NJVElPTiA/IHRoaXMub3B0aW9uc1NlcnZpY2UuZ2V0U3RlcERlZmF1bHRQb3NpdGlvbigpIDogc3RlcC5wb3NpdGlvbjtcbiAgICAgICAgdGhpcy5zdGVwRHJhd2VyU2VydmljZS5kcmF3KHN0ZXApO1xuICAgIH1cblxuICAgIHN0YXJ0VG91cigpOiBPYnNlcnZhYmxlPEpveXJpZGVTdGVwSW5mbz4ge1xuICAgICAgICB0aGlzLnN0ZXBzT2JzZXJ2ZXIgPSBuZXcgUmVwbGF5U3ViamVjdDxKb3lyaWRlU3RlcEluZm8+KCk7XG4gICAgICAgIHRoaXMuc3RlcHNDb250YWluZXJTZXJ2aWNlLmluaXQoKTtcbiAgICAgICAgdGhpcy5kb2N1bWVudFNlcnZpY2Uuc2V0RG9jdW1lbnRIZWlnaHQoKTtcblxuICAgICAgICB0aGlzLnRyeVNob3dTdGVwKFN0ZXBBY3Rpb25UeXBlLk5FWFQpO1xuICAgICAgICB0aGlzLmV2ZW50TGlzdGVuZXIuc3RhcnRMaXN0ZW5pbmdSZXNpemVFdmVudHMoKTtcbiAgICAgICAgdGhpcy5zdWJzY3JpYmVUb1N0ZXBzVXBkYXRlcygpO1xuICAgICAgICByZXR1cm4gdGhpcy5zdGVwc09ic2VydmVyLmFzT2JzZXJ2YWJsZSgpO1xuICAgIH1cblxuICAgIGNsb3NlKCkge1xuICAgICAgICB0aGlzLnJlbW92ZUN1cnJlbnRTdGVwKCk7XG4gICAgICAgIHRoaXMubm90aWZ5VG91cklzRmluaXNoZWQoKTtcbiAgICAgICAgdGhpcy5ET01TZXJ2aWNlLmdldE5hdGl2ZVdpbmRvdygpLnNjcm9sbFRvKDAsIDApO1xuICAgICAgICB0aGlzLmV2ZW50TGlzdGVuZXIuc3RvcExpc3RlbmluZ1Jlc2l6ZUV2ZW50cygpO1xuICAgICAgICB0aGlzLmJhY2tEcm9wU2VydmljZS5yZW1vdmUoKTtcbiAgICB9XG5cbiAgICBwcmV2KCkge1xuICAgICAgICB0aGlzLnJlbW92ZUN1cnJlbnRTdGVwKCk7XG4gICAgICAgIHRoaXMuY3VycmVudFN0ZXAucHJldkNsaWtlZC5lbWl0KCk7XG4gICAgICAgIHRoaXMudHJ5U2hvd1N0ZXAoU3RlcEFjdGlvblR5cGUuUFJFVik7XG4gICAgfVxuXG4gICAgbmV4dCgpIHtcbiAgICAgICAgdGhpcy5yZW1vdmVDdXJyZW50U3RlcCgpO1xuICAgICAgICB0aGlzLmN1cnJlbnRTdGVwLm5leHRDbGlja2VkLmVtaXQoKTtcbiAgICAgICAgdGhpcy50cnlTaG93U3RlcChTdGVwQWN0aW9uVHlwZS5ORVhUKTtcbiAgICB9XG5cbiAgICBwcml2YXRlIGFzeW5jIG5hdmlnYXRlVG9TdGVwUGFnZShhY3Rpb246IFN0ZXBBY3Rpb25UeXBlKSB7XG4gICAgICAgIGxldCBzdGVwUm91dGUgPSB0aGlzLnN0ZXBzQ29udGFpbmVyU2VydmljZS5nZXRTdGVwUm91dGUoYWN0aW9uKTtcbiAgICAgICAgaWYgKHN0ZXBSb3V0ZSkge1xuICAgICAgICAgICAgcmV0dXJuIGF3YWl0IHRoaXMucm91dGVyLm5hdmlnYXRlKFtzdGVwUm91dGVdKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHByaXZhdGUgc3Vic2NyaWJlVG9TdGVwc1VwZGF0ZXMoKSB7XG4gICAgICAgIHRoaXMuc3RlcHNDb250YWluZXJTZXJ2aWNlLnN0ZXBIYXNCZWVuTW9kaWZpZWQuc3Vic2NyaWJlKHVwZGF0ZWRTdGVwID0+IHtcbiAgICAgICAgICAgIGlmICh0aGlzLmN1cnJlbnRTdGVwICYmIHRoaXMuY3VycmVudFN0ZXAubmFtZSA9PT0gdXBkYXRlZFN0ZXAubmFtZSkge1xuICAgICAgICAgICAgICAgIHRoaXMuY3VycmVudFN0ZXAgPSB1cGRhdGVkU3RlcDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgfVxuXG4gICAgcHJpdmF0ZSBhc3luYyB0cnlTaG93U3RlcChhY3Rpb25UeXBlOiBTdGVwQWN0aW9uVHlwZSkge1xuICAgICAgICBhd2FpdCB0aGlzLm5hdmlnYXRlVG9TdGVwUGFnZShhY3Rpb25UeXBlKTtcbiAgICAgICAgY29uc3QgdGltZW91dCA9IHRoaXMub3B0aW9uc1NlcnZpY2UuZ2V0V2FpdGluZ1RpbWUoKTtcbiAgICAgICAgaWYgKHRpbWVvdXQgPiAxMDApIHRoaXMuYmFja0Ryb3BTZXJ2aWNlLnJlbW92ZSgpO1xuICAgICAgICBzZXRUaW1lb3V0KCgpID0+IHtcbiAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgdGhpcy5zaG93U3RlcChhY3Rpb25UeXBlKTtcbiAgICAgICAgICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgICAgICAgICAgaWYgKGVycm9yIGluc3RhbmNlb2YgSm95cmlkZVN0ZXBEb2VzTm90RXhpc3QpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy50cnlTaG93U3RlcChhY3Rpb25UeXBlKTtcbiAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKGVycm9yIGluc3RhbmNlb2YgSm95cmlkZVN0ZXBPdXRPZlJhbmdlKSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMubG9nZ2VyLmVycm9yKCdGb3JjaW5nIHRoZSB0b3VyIGNsb3N1cmU6IEZpcnN0IG9yIExhc3Qgc3RlcCBub3QgZm91bmQgaW4gdGhlIERPTS4nKTtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5jbG9zZSgpO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihlcnJvcik7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9LCB0aW1lb3V0KTtcbiAgICB9XG5cbiAgICBwcml2YXRlIHNob3dTdGVwKGFjdGlvblR5cGU6IFN0ZXBBY3Rpb25UeXBlKSB7XG4gICAgICAgIHRoaXMuY3VycmVudFN0ZXAgPSB0aGlzLnN0ZXBzQ29udGFpbmVyU2VydmljZS5nZXQoYWN0aW9uVHlwZSk7XG5cbiAgICAgICAgaWYgKHRoaXMuY3VycmVudFN0ZXAgPT0gbnVsbCkgdGhyb3cgbmV3IEpveXJpZGVTdGVwRG9lc05vdEV4aXN0KCcnKTtcbiAgICAgICAgdGhpcy5ub3RpZnlTdGVwQ2xpY2tlZChhY3Rpb25UeXBlKTtcbiAgICAgICAgLy8gU2Nyb2xsIHRoZSBlbGVtZW50IHRvIGdldCBpdCB2aXNpYmxlIGlmIGl0J3MgaW4gYSBzY3JvbGxhYmxlIGVsZW1lbnRcbiAgICAgICAgdGhpcy5zY3JvbGxJZkVsZW1lbnRCZXlvbmRPdGhlckVsZW1lbnRzKCk7XG4gICAgICAgIHRoaXMuYmFja0Ryb3BTZXJ2aWNlLmRyYXcodGhpcy5jdXJyZW50U3RlcCk7XG4gICAgICAgIHRoaXMuZHJhd1N0ZXAodGhpcy5jdXJyZW50U3RlcCk7XG4gICAgICAgIHRoaXMuc2Nyb2xsSWZTdGVwQW5kVGFyZ2V0QXJlTm90VmlzaWJsZSgpO1xuICAgIH1cblxuICAgIHByaXZhdGUgbm90aWZ5U3RlcENsaWNrZWQoYWN0aW9uVHlwZTogU3RlcEFjdGlvblR5cGUpIHtcbiAgICAgICAgbGV0IHN0ZXBJbmZvOiBKb3lyaWRlU3RlcEluZm8gPSB7XG4gICAgICAgICAgICBudW1iZXI6IHRoaXMuc3RlcHNDb250YWluZXJTZXJ2aWNlLmdldFN0ZXBOdW1iZXIodGhpcy5jdXJyZW50U3RlcC5uYW1lKSxcbiAgICAgICAgICAgIG5hbWU6IHRoaXMuY3VycmVudFN0ZXAubmFtZSxcbiAgICAgICAgICAgIHJvdXRlOiB0aGlzLmN1cnJlbnRTdGVwLnJvdXRlLFxuICAgICAgICAgICAgYWN0aW9uVHlwZVxuICAgICAgICB9O1xuICAgICAgICB0aGlzLnN0ZXBzT2JzZXJ2ZXIubmV4dChzdGVwSW5mbyk7XG4gICAgfVxuXG4gICAgcHJpdmF0ZSBub3RpZnlUb3VySXNGaW5pc2hlZCgpIHtcbiAgICAgICAgaWYgKHRoaXMuY3VycmVudFN0ZXApIHRoaXMuY3VycmVudFN0ZXAudG91ckRvbmUuZW1pdCgpO1xuICAgICAgICB0aGlzLnN0ZXBzT2JzZXJ2ZXIuY29tcGxldGUoKTtcbiAgICB9XG4gICAgcHJpdmF0ZSByZW1vdmVDdXJyZW50U3RlcCgpIHtcbiAgICAgICAgaWYgKHRoaXMuY3VycmVudFN0ZXApIHRoaXMuc3RlcERyYXdlclNlcnZpY2UucmVtb3ZlKHRoaXMuY3VycmVudFN0ZXApO1xuICAgIH1cblxuICAgIHByaXZhdGUgc2Nyb2xsSWZTdGVwQW5kVGFyZ2V0QXJlTm90VmlzaWJsZSgpIHtcbiAgICAgICAgdGhpcy5zY3JvbGxXaGVuVGFyZ2V0T3JTdGVwQXJlSGlkZGVuQm90dG9tKCk7XG4gICAgICAgIHRoaXMuc2Nyb2xsV2hlblRhcmdldE9yU3RlcEFyZUhpZGRlblRvcCgpO1xuICAgIH1cblxuICAgIHByaXZhdGUgc2Nyb2xsV2hlblRhcmdldE9yU3RlcEFyZUhpZGRlbkJvdHRvbSgpIHtcbiAgICAgICAgbGV0IHRvdGFsVGFyZ2V0Qm90dG9tID0gdGhpcy5nZXRNYXhUYXJnZXRBbmRTdGVwQm90dG9tUG9zaXRpb24oKTtcbiAgICAgICAgaWYgKHRvdGFsVGFyZ2V0Qm90dG9tID4gdGhpcy53aW5Cb3R0b21Qb3NpdGlvbikge1xuICAgICAgICAgICAgdGhpcy5ET01TZXJ2aWNlLmdldE5hdGl2ZVdpbmRvdygpLnNjcm9sbEJ5KDAsIHRvdGFsVGFyZ2V0Qm90dG9tIC0gdGhpcy53aW5Cb3R0b21Qb3NpdGlvbik7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBwcml2YXRlIHNjcm9sbFdoZW5UYXJnZXRPclN0ZXBBcmVIaWRkZW5Ub3AoKSB7XG4gICAgICAgIGxldCB0b3RhbFRhcmdldFRvcCA9IHRoaXMuZ2V0TWF4VGFyZ2V0QW5kU3RlcFRvcFBvc2l0aW9uKCk7XG4gICAgICAgIGlmICh0b3RhbFRhcmdldFRvcCA8IHRoaXMud2luVG9wUG9zaXRpb24pIHtcbiAgICAgICAgICAgIHRoaXMuRE9NU2VydmljZS5nZXROYXRpdmVXaW5kb3coKS5zY3JvbGxCeSgwLCB0b3RhbFRhcmdldFRvcCAtIHRoaXMud2luVG9wUG9zaXRpb24pO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgcHJpdmF0ZSBnZXRNYXhUYXJnZXRBbmRTdGVwQm90dG9tUG9zaXRpb24oKTogbnVtYmVyIHtcbiAgICAgICAgbGV0IHRhcmdldEFic29sdXRlVG9wID0gdGhpcy5kb2N1bWVudFNlcnZpY2UuZ2V0RWxlbWVudEFic29sdXRlVG9wKHRoaXMuY3VycmVudFN0ZXAudGFyZ2V0Vmlld0NvbnRhaW5lci5lbGVtZW50KTtcbiAgICAgICAgaWYgKHRoaXMuY3VycmVudFN0ZXAucG9zaXRpb24gPT09ICd0b3AnKSB7XG4gICAgICAgICAgICByZXR1cm4gdGFyZ2V0QWJzb2x1dGVUb3AgKyB0aGlzLmN1cnJlbnRTdGVwLnN0ZXBJbnN0YW5jZS50YXJnZXRIZWlnaHQ7XG4gICAgICAgIH0gZWxzZSBpZiAodGhpcy5jdXJyZW50U3RlcC5wb3NpdGlvbiA9PT0gJ2JvdHRvbScpIHtcbiAgICAgICAgICAgIHJldHVybiAoXG4gICAgICAgICAgICAgICAgdGFyZ2V0QWJzb2x1dGVUb3AgK1xuICAgICAgICAgICAgICAgIHRoaXMuY3VycmVudFN0ZXAuc3RlcEluc3RhbmNlLnRhcmdldEhlaWdodCArXG4gICAgICAgICAgICAgICAgdGhpcy5jdXJyZW50U3RlcC5zdGVwSW5zdGFuY2Uuc3RlcEhlaWdodCArXG4gICAgICAgICAgICAgICAgQVJST1dfU0laRSArXG4gICAgICAgICAgICAgICAgRElTVEFOQ0VfRlJPTV9UQVJHRVRcbiAgICAgICAgICAgICk7XG4gICAgICAgIH0gZWxzZSBpZiAodGhpcy5jdXJyZW50U3RlcC5wb3NpdGlvbiA9PT0gJ3JpZ2h0JyB8fCB0aGlzLmN1cnJlbnRTdGVwLnBvc2l0aW9uID09PSAnbGVmdCcpIHtcbiAgICAgICAgICAgIHJldHVybiBNYXRoLm1heChcbiAgICAgICAgICAgICAgICB0YXJnZXRBYnNvbHV0ZVRvcCArIHRoaXMuY3VycmVudFN0ZXAuc3RlcEluc3RhbmNlLnRhcmdldEhlaWdodCxcbiAgICAgICAgICAgICAgICB0YXJnZXRBYnNvbHV0ZVRvcCArIHRoaXMuY3VycmVudFN0ZXAuc3RlcEluc3RhbmNlLnRhcmdldEhlaWdodCAvIDIgKyB0aGlzLmN1cnJlbnRTdGVwLnN0ZXBJbnN0YW5jZS5zdGVwSGVpZ2h0IC8gMlxuICAgICAgICAgICAgKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHByaXZhdGUgZ2V0TWF4VGFyZ2V0QW5kU3RlcFRvcFBvc2l0aW9uKCkge1xuICAgICAgICBsZXQgdGFyZ2V0QWJzb2x1dGVUb3AgPSB0aGlzLmRvY3VtZW50U2VydmljZS5nZXRFbGVtZW50QWJzb2x1dGVUb3AodGhpcy5jdXJyZW50U3RlcC50YXJnZXRWaWV3Q29udGFpbmVyLmVsZW1lbnQpO1xuICAgICAgICBpZiAodGhpcy5jdXJyZW50U3RlcC5wb3NpdGlvbiA9PT0gJ3RvcCcpIHtcbiAgICAgICAgICAgIHJldHVybiB0YXJnZXRBYnNvbHV0ZVRvcCAtICh0aGlzLmN1cnJlbnRTdGVwLnN0ZXBJbnN0YW5jZS5zdGVwSGVpZ2h0ICsgQVJST1dfU0laRSArIERJU1RBTkNFX0ZST01fVEFSR0VUKTtcbiAgICAgICAgfSBlbHNlIGlmICh0aGlzLmN1cnJlbnRTdGVwLnBvc2l0aW9uID09PSAnYm90dG9tJykge1xuICAgICAgICAgICAgcmV0dXJuIHRhcmdldEFic29sdXRlVG9wO1xuICAgICAgICB9IGVsc2UgaWYgKHRoaXMuY3VycmVudFN0ZXAucG9zaXRpb24gPT09ICdyaWdodCcgfHwgdGhpcy5jdXJyZW50U3RlcC5wb3NpdGlvbiA9PT0gJ2xlZnQnKSB7XG4gICAgICAgICAgICByZXR1cm4gTWF0aC5taW4oXG4gICAgICAgICAgICAgICAgdGFyZ2V0QWJzb2x1dGVUb3AsXG4gICAgICAgICAgICAgICAgdGFyZ2V0QWJzb2x1dGVUb3AgKyB0aGlzLmN1cnJlbnRTdGVwLnN0ZXBJbnN0YW5jZS50YXJnZXRIZWlnaHQgLyAyIC0gdGhpcy5jdXJyZW50U3RlcC5zdGVwSW5zdGFuY2Uuc3RlcEhlaWdodCAvIDJcbiAgICAgICAgICAgICk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBwcml2YXRlIHNjcm9sbElmRWxlbWVudEJleW9uZE90aGVyRWxlbWVudHMoKSB7XG4gICAgICAgIGlmICh0aGlzLmlzRWxlbWVudEJleW9uZE90aGVycygpID09PSAyKSB7XG4gICAgICAgICAgICB0aGlzLmRvY3VtZW50U2VydmljZS5zY3JvbGxUb1RoZVRvcCh0aGlzLmN1cnJlbnRTdGVwLnRhcmdldFZpZXdDb250YWluZXIuZWxlbWVudCk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHRoaXMuaXNFbGVtZW50QmV5b25kT3RoZXJzKCkgPT09IDIpIHtcbiAgICAgICAgICAgIHRoaXMuZG9jdW1lbnRTZXJ2aWNlLnNjcm9sbFRvVGhlQm90dG9tKHRoaXMuY3VycmVudFN0ZXAudGFyZ2V0Vmlld0NvbnRhaW5lci5lbGVtZW50KTtcbiAgICAgICAgfVxuICAgICAgICBpZiAodGhpcy5pc0VsZW1lbnRCZXlvbmRPdGhlcnMoKSA9PT0gMSAmJiB0aGlzLmRvY3VtZW50U2VydmljZS5pc1BhcmVudFNjcm9sbGFibGUodGhpcy5jdXJyZW50U3RlcC50YXJnZXRWaWV3Q29udGFpbmVyLmVsZW1lbnQpKSB7XG4gICAgICAgICAgICB0aGlzLmRvY3VtZW50U2VydmljZS5zY3JvbGxJbnRvVmlldyh0aGlzLmN1cnJlbnRTdGVwLnRhcmdldFZpZXdDb250YWluZXIuZWxlbWVudCwgdGhpcy5jdXJyZW50U3RlcC5pc0VsZW1lbnRPckFuY2VzdG9yRml4ZWQpO1xuICAgICAgICB9XG4gICAgICAgIGlmICh0aGlzLmlzRWxlbWVudEJleW9uZE90aGVycygpID09PSAxICYmIHRoaXMuZG9jdW1lbnRTZXJ2aWNlLmlzUGFyZW50U2Nyb2xsYWJsZSh0aGlzLmN1cnJlbnRTdGVwLnRhcmdldFZpZXdDb250YWluZXIuZWxlbWVudCkpIHtcbiAgICAgICAgICAgIHRoaXMuY3VycmVudFN0ZXAudGFyZ2V0Vmlld0NvbnRhaW5lci5lbGVtZW50Lm5hdGl2ZUVsZW1lbnQuc2Nyb2xsSW50b1ZpZXcoKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHByaXZhdGUgaXNFbGVtZW50QmV5b25kT3RoZXJzKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5kb2N1bWVudFNlcnZpY2UuaXNFbGVtZW50QmV5b25kT3RoZXJzKFxuICAgICAgICAgICAgdGhpcy5jdXJyZW50U3RlcC50YXJnZXRWaWV3Q29udGFpbmVyLmVsZW1lbnQsXG4gICAgICAgICAgICB0aGlzLmN1cnJlbnRTdGVwLmlzRWxlbWVudE9yQW5jZXN0b3JGaXhlZCxcbiAgICAgICAgICAgICdiYWNrZHJvcCdcbiAgICAgICAgKTtcbiAgICB9XG59XG4iXX0=