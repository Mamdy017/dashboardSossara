{"version":3,"file":"virtual-scroll.d.ts","sources":["virtual-scroll.d.ts"],"names":[],"mappingssourcesContent":["import { ElementRef, EventEmitter, NgZone, OnChanges, OnDestroy, OnInit, Renderer2, ChangeDetectorRef } from '@angular/core';\nimport { VirtualScrollerDefaultOptions } from './defaultoptions';\nimport { IPageInfo } from './ipageinfo';\nimport { IViewport } from './iviewport';\nimport { WrapGroupDimensions } from './wrapgroupdimensions';\nimport { IDimensions } from './idimension';\nexport declare function VIRTUAL_SCROLLER_DEFAULT_OPTIONS_FACTORY(): VirtualScrollerDefaultOptions;\nexport declare class VirtualScrollerComponent implements OnInit, OnChanges, OnDestroy {\n    protected readonly element: ElementRef;\n    protected readonly renderer: Renderer2;\n    protected readonly zone: NgZone;\n    protected changeDetectorRef: ChangeDetectorRef;\n    viewPortItems: any[];\n    window: Window & typeof globalThis;\n    get viewPortInfo(): IPageInfo;\n    executeRefreshOutsideAngularZone: boolean;\n    protected _enableUnequalChildrenSizes: boolean;\n    get enableUnequalChildrenSizes(): boolean;\n    set enableUnequalChildrenSizes(value: boolean);\n    useMarginInsteadOfTranslate: boolean;\n    modifyOverflowStyleOfParentScroll: boolean;\n    stripedTable: boolean;\n    scrollbarWidth: number;\n    scrollbarHeight: number;\n    childWidth: number;\n    childHeight: number;\n    ssrChildWidth: number;\n    ssrChildHeight: number;\n    ssrViewportWidth: number;\n    ssrViewportHeight: number;\n    protected _bufferAmount: number;\n    get bufferAmount(): number;\n    set bufferAmount(value: number);\n    scrollAnimationTime: number;\n    resizeBypassRefreshThreshold: number;\n    protected _scrollThrottlingTime: number;\n    get scrollThrottlingTime(): number;\n    set scrollThrottlingTime(value: number);\n    protected _scrollDebounceTime: number;\n    get scrollDebounceTime(): number;\n    set scrollDebounceTime(value: number);\n    protected onScroll: () => void;\n    protected updateOnScrollFunction(): void;\n    protected checkScrollElementResizedTimer: number;\n    protected _checkResizeInterval: number;\n    get checkResizeInterval(): number;\n    set checkResizeInterval(value: number);\n    protected _items: any[];\n    get items(): any[];\n    set items(value: any[]);\n    compareItems: (item1: any, item2: any) => boolean;\n    protected _horizontal: boolean;\n    get horizontal(): boolean;\n    set horizontal(value: boolean);\n    protected revertParentOverscroll(): void;\n    protected oldParentScrollOverflow: {\n        x: string;\n        y: string;\n    };\n    protected _parentScroll: Element | Window;\n    get parentScroll(): Element | Window;\n    set parentScroll(value: Element | Window);\n    vsUpdate: EventEmitter<any[]>;\n    vsChange: EventEmitter<IPageInfo>;\n    vsStart: EventEmitter<IPageInfo>;\n    vsEnd: EventEmitter<IPageInfo>;\n    protected contentElementRef: ElementRef;\n    protected invisiblePaddingElementRef: ElementRef;\n    protected headerElementRef: ElementRef;\n    protected containerElementRef: ElementRef;\n    ngOnInit(): void;\n    ngOnDestroy(): void;\n    ngOnChanges(changes: any): void;\n    ngDoCheck(): void;\n    refresh(): void;\n    invalidateAllCachedMeasurements(): void;\n    invalidateCachedMeasurementForItem(item: any): void;\n    invalidateCachedMeasurementAtIndex(index: number): void;\n    scrollInto(item: any, alignToBeginning?: boolean, additionalOffset?: number, animationMilliseconds?: number, animationCompletedCallback?: () => void): void;\n    scrollToIndex(index: number, alignToBeginning?: boolean, additionalOffset?: number, animationMilliseconds?: number, animationCompletedCallback?: () => void): void;\n    protected scrollToIndex_internal(index: number, alignToBeginning?: boolean, additionalOffset?: number, animationMilliseconds?: number, animationCompletedCallback?: () => void): void;\n    scrollToPosition(scrollPosition: number, animationMilliseconds?: number, animationCompletedCallback?: () => void): void;\n    protected isAngularUniversalSSR: boolean;\n    constructor(element: ElementRef, renderer: Renderer2, zone: NgZone, changeDetectorRef: ChangeDetectorRef, platformId: Object, options: VirtualScrollerDefaultOptions);\n    protected getElementSize(element: HTMLElement): ClientRect;\n    protected previousScrollBoundingRect: ClientRect;\n    protected checkScrollElementResized(): void;\n    protected _invisiblePaddingProperty: any;\n    protected _offsetType: any;\n    protected _scrollType: any;\n    protected _pageOffsetType: any;\n    protected _childScrollDim: any;\n    protected _translateDir: any;\n    protected _marginDir: any;\n    protected updateDirection(): void;\n    protected debounce(func: Function, wait: number): Function;\n    protected throttleTrailing(func: Function, wait: number): Function;\n    protected calculatedScrollbarWidth: number;\n    protected calculatedScrollbarHeight: number;\n    protected padding: number;\n    protected previousViewPort: IViewport;\n    protected currentTween: any;\n    protected cachedItemsLength: number;\n    protected disposeScrollHandler: () => void | undefined;\n    protected disposeResizeHandler: () => void | undefined;\n    protected refresh_internal(itemsArrayModified: boolean, refreshCompletedCallback?: () => void, maxRunTimes?: number): void;\n    protected getScrollElement(): HTMLElement;\n    protected addScrollEventHandlers(): void;\n    protected removeScrollEventHandlers(): void;\n    protected getElementsOffset(): number;\n    protected countItemsPerWrapGroup(): number;\n    protected getScrollStartPosition(): number;\n    protected minMeasuredChildWidth: number;\n    protected minMeasuredChildHeight: number;\n    protected wrapGroupDimensions: WrapGroupDimensions;\n    protected resetWrapGroupDimensions(): void;\n    protected calculateDimensions(): IDimensions;\n    protected cachedPageSize: number;\n    protected previousScrollNumberElements: number;\n    protected calculatePadding(arrayStartIndexWithBuffer: number, dimensions: IDimensions): number;\n    protected calculatePageInfo(scrollPosition: number, dimensions: IDimensions): IPageInfo;\n    protected calculateViewport(): IViewport;\n}\nexport declare class VirtualScrollerModule {\n}\n"]}