{"version":3,"file":"multiselect.component.d.ts","sources":["multiselect.component.d.ts"],"names":[],"mappingssourcesContent":["import { OnInit, OnDestroy, SimpleChanges, OnChanges, ChangeDetectorRef, AfterViewChecked, EventEmitter, ElementRef } from '@angular/core';\nimport { ControlValueAccessor, Validator, FormControl } from '@angular/forms';\nimport { DropdownSettings } from './multiselect.interface';\nimport { ListFilterPipe } from './list-filter';\nimport { Item, Badge, Search } from './menu-item';\nimport { Subscription, Subject } from 'rxjs';\nexport declare const DROPDOWN_CONTROL_VALUE_ACCESSOR: any;\nexport declare const DROPDOWN_CONTROL_VALIDATION: any;\nexport declare class AngularMultiSelect implements OnInit, ControlValueAccessor, OnChanges, Validator, AfterViewChecked, OnDestroy {\n    _elementRef: ElementRef;\n    private cdr;\n    private filterPipe;\n    data: Array<any>;\n    settings: DropdownSettings;\n    loading: boolean;\n    onSelect: EventEmitter<any>;\n    onDeSelect: EventEmitter<any>;\n    onSelectAll: EventEmitter<Array<any>>;\n    onDeSelectAll: EventEmitter<Array<any>>;\n    onOpen: EventEmitter<any>;\n    onClose: EventEmitter<any>;\n    onScrollToEnd: EventEmitter<any>;\n    onFilterSelectAll: EventEmitter<Array<any>>;\n    onFilterDeSelectAll: EventEmitter<Array<any>>;\n    onAddFilterNewItem: EventEmitter<any>;\n    onGroupSelect: EventEmitter<any>;\n    onGroupDeSelect: EventEmitter<any>;\n    itemTempl: Item;\n    badgeTempl: Badge;\n    searchTempl: Search;\n    searchInput: ElementRef;\n    selectedListElem: ElementRef;\n    dropdownListElem: ElementRef;\n    cuppaDropdown: ElementRef;\n    onEscapeDown(event: KeyboardEvent): void;\n    onScroll(event: any): void;\n    virtualdata: any;\n    searchTerm$: Subject<string>;\n    selectedItems: Array<any>;\n    isActive: boolean;\n    isSelectAll: boolean;\n    isFilterSelectAll: boolean;\n    isInfiniteFilterSelectAll: boolean;\n    groupedData: Array<any>;\n    filter: any;\n    chunkArray: any[];\n    scrollTop: any;\n    chunkIndex: any[];\n    cachedItems: any[];\n    groupCachedItems: any[];\n    totalRows: any;\n    itemHeight: any;\n    screenItemsLen: any;\n    cachedItemsLen: any;\n    totalHeight: any;\n    scroller: any;\n    maxBuffer: any;\n    lastScrolled: any;\n    lastRepaintY: any;\n    selectedListHeight: any;\n    filterLength: any;\n    infiniteFilterLength: any;\n    viewPortItems: any;\n    item: any;\n    dropdownListYOffset: number;\n    subscription: Subscription;\n    dropDownWidth: number;\n    dropDownTop: any;\n    dropDownBottom: any;\n    dropDownLeft: number;\n    id: any;\n    defaultSettings: DropdownSettings;\n    randomSize: boolean;\n    parseError: boolean;\n    filteredList: any;\n    virtualScroollInit: boolean;\n    private virtualScroller;\n    isDisabledItemPresent: boolean;\n    constructor(_elementRef: ElementRef, cdr: ChangeDetectorRef, filterPipe: ListFilterPipe);\n    ngOnInit(): void;\n    onKeyUp(evt: any): void;\n    ngOnChanges(changes: SimpleChanges): void;\n    ngDoCheck(): void;\n    ngAfterViewInit(): void;\n    ngAfterViewChecked(): void;\n    onItemClick(item: any, index: number, evt: Event): void;\n    validate(c: FormControl): any;\n    private onTouchedCallback;\n    private onChangeCallback;\n    writeValue(value: any): void;\n    registerOnChange(fn: any): void;\n    registerOnTouched(fn: any): void;\n    trackByFn(index: number, item: any): any;\n    isSelected(clickedItem: any): boolean;\n    addSelected(item: any): void;\n    removeSelected(clickedItem: any): void;\n    toggleDropdown(evt: any): void;\n    openDropdown(): void;\n    closeDropdown(): void;\n    closeDropdownOnClickOut(): void;\n    toggleSelectAll(event: any): void;\n    filterGroupedList(): void;\n    toggleFilterSelectAll(): void;\n    toggleInfiniteFilterSelectAll(): void;\n    clearSearch(): void;\n    onFilterChange(data: any): void;\n    cloneArray(arr: any): any;\n    updateGroupInfo(item: any): void;\n    transformData(arr: Array<any>, field: any): Array<any>;\n    filterInfiniteList(evt: any): void;\n    resetInfiniteSearch(): void;\n    onScrollEnd(e: any): void;\n    ngOnDestroy(): void;\n    selectGroup(item: any): void;\n    addFilterNewItem(): void;\n    calculateDropdownDirection(): void;\n    openTowardsTop(value: boolean): void;\n    clearSelection(e?: any): void;\n    filteritems(evt: any): void;\n}\nexport declare class AngularMultiSelectModule {\n}\n"]}