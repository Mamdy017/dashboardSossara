import { Directive, Output, EventEmitter, Input, Optional, } from '@angular/core';
import { distinctUntilChanged, pairwise, filter, map } from 'rxjs/operators';
import { addClass, removeClass } from './util';
import * as i0 from "@angular/core";
import * as i1 from "./draggable-helper.provider";
import * as i2 from "./draggable-scroll-container.directive";
function isCoordinateWithinRectangle(clientX, clientY, rect) {
    return (clientX >= rect.left &&
        clientX <= rect.right &&
        clientY >= rect.top &&
        clientY <= rect.bottom);
}
export class DroppableDirective {
    constructor(element, draggableHelper, zone, renderer, scrollContainer) {
        this.element = element;
        this.draggableHelper = draggableHelper;
        this.zone = zone;
        this.renderer = renderer;
        this.scrollContainer = scrollContainer;
        /**
         * Called when a draggable element starts overlapping the element
         */
        this.dragEnter = new EventEmitter();
        /**
         * Called when a draggable element stops overlapping the element
         */
        this.dragLeave = new EventEmitter();
        /**
         * Called when a draggable element is moved over the element
         */
        this.dragOver = new EventEmitter();
        /**
         * Called when a draggable element is dropped on this element
         */
        this.drop = new EventEmitter(); // eslint-disable-line  @angular-eslint/no-output-native
    }
    ngOnInit() {
        this.currentDragSubscription = this.draggableHelper.currentDrag.subscribe((drag$) => {
            addClass(this.renderer, this.element, this.dragActiveClass);
            const droppableElement = {
                updateCache: true,
            };
            const deregisterScrollListener = this.renderer.listen(this.scrollContainer
                ? this.scrollContainer.elementRef.nativeElement
                : 'window', 'scroll', () => {
                droppableElement.updateCache = true;
            });
            let currentDragEvent;
            const overlaps$ = drag$.pipe(map(({ clientX, clientY, dropData, target }) => {
                currentDragEvent = { clientX, clientY, dropData, target };
                if (droppableElement.updateCache) {
                    droppableElement.rect =
                        this.element.nativeElement.getBoundingClientRect();
                    if (this.scrollContainer) {
                        droppableElement.scrollContainerRect =
                            this.scrollContainer.elementRef.nativeElement.getBoundingClientRect();
                    }
                    droppableElement.updateCache = false;
                }
                const isWithinElement = isCoordinateWithinRectangle(clientX, clientY, droppableElement.rect);
                const isDropAllowed = !this.validateDrop ||
                    this.validateDrop({ clientX, clientY, target, dropData });
                if (droppableElement.scrollContainerRect) {
                    return (isWithinElement &&
                        isDropAllowed &&
                        isCoordinateWithinRectangle(clientX, clientY, droppableElement.scrollContainerRect));
                }
                else {
                    return isWithinElement && isDropAllowed;
                }
            }));
            const overlapsChanged$ = overlaps$.pipe(distinctUntilChanged());
            let dragOverActive; // TODO - see if there's a way of doing this via rxjs
            overlapsChanged$
                .pipe(filter((overlapsNow) => overlapsNow))
                .subscribe(() => {
                dragOverActive = true;
                addClass(this.renderer, this.element, this.dragOverClass);
                if (this.dragEnter.observers.length > 0) {
                    this.zone.run(() => {
                        this.dragEnter.next(currentDragEvent);
                    });
                }
            });
            overlaps$.pipe(filter((overlapsNow) => overlapsNow)).subscribe(() => {
                if (this.dragOver.observers.length > 0) {
                    this.zone.run(() => {
                        this.dragOver.next(currentDragEvent);
                    });
                }
            });
            overlapsChanged$
                .pipe(pairwise(), filter(([didOverlap, overlapsNow]) => didOverlap && !overlapsNow))
                .subscribe(() => {
                dragOverActive = false;
                removeClass(this.renderer, this.element, this.dragOverClass);
                if (this.dragLeave.observers.length > 0) {
                    this.zone.run(() => {
                        this.dragLeave.next(currentDragEvent);
                    });
                }
            });
            drag$.subscribe({
                complete: () => {
                    deregisterScrollListener();
                    removeClass(this.renderer, this.element, this.dragActiveClass);
                    if (dragOverActive) {
                        removeClass(this.renderer, this.element, this.dragOverClass);
                        if (this.drop.observers.length > 0) {
                            this.zone.run(() => {
                                this.drop.next(currentDragEvent);
                            });
                        }
                    }
                },
            });
        });
    }
    ngOnDestroy() {
        if (this.currentDragSubscription) {
            this.currentDragSubscription.unsubscribe();
        }
    }
}
DroppableDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "14.1.0", ngImport: i0, type: DroppableDirective, deps: [{ token: i0.ElementRef }, { token: i1.DraggableHelper }, { token: i0.NgZone }, { token: i0.Renderer2 }, { token: i2.DraggableScrollContainerDirective, optional: true }], target: i0.ɵɵFactoryTarget.Directive });
DroppableDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "14.0.0", version: "14.1.0", type: DroppableDirective, selector: "[mwlDroppable]", inputs: { dragOverClass: "dragOverClass", dragActiveClass: "dragActiveClass", validateDrop: "validateDrop" }, outputs: { dragEnter: "dragEnter", dragLeave: "dragLeave", dragOver: "dragOver", drop: "drop" }, ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "14.1.0", ngImport: i0, type: DroppableDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: '[mwlDroppable]',
                }]
        }], ctorParameters: function () { return [{ type: i0.ElementRef }, { type: i1.DraggableHelper }, { type: i0.NgZone }, { type: i0.Renderer2 }, { type: i2.DraggableScrollContainerDirective, decorators: [{
                    type: Optional
                }] }]; }, propDecorators: { dragOverClass: [{
                type: Input
            }], dragActiveClass: [{
                type: Input
            }], validateDrop: [{
                type: Input
            }], dragEnter: [{
                type: Output
            }], dragLeave: [{
                type: Output
            }], dragOver: [{
                type: Output
            }], drop: [{
                type: Output
            }] } });
//# sourceMappingURL=data:application/json;base64,