(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@angular/core'), require('@angular/common'), require('rxjs'), require('rxjs/operators')) :
    typeof define === 'function' && define.amd ? define('ngx-slimscroll', ['exports', '@angular/core', '@angular/common', 'rxjs', 'rxjs/operators'], factory) :
    (global = global || self, factory(global['ngx-slimscroll'] = {}, global.ng.core, global.ng.common, global.rxjs, global.rxjs.operators));
}(this, (function (exports, core, common, rxjs, operators) { 'use strict';

    var SlimScrollEvent = /** @class */ (function () {
        function SlimScrollEvent(obj) {
            this.type = obj.type;
            this.y = obj && obj.y ? obj.y : 0;
            this.percent = obj && obj.percent ? obj.percent : 0;
            this.duration = obj && obj.duration ? obj.duration : 0;
            this.easing = obj && obj.easing ? obj.easing : 'linear';
        }
        return SlimScrollEvent;
    }());

    var SLIMSCROLL_DEFAULTS = new core.InjectionToken('NGX_SLIMSCROLL_DEFAULTS');
    var SlimScrollOptions = /** @class */ (function () {
        function SlimScrollOptions(obj) {
            this.position = obj && obj.position ? obj.position : 'right';
            this.barBackground = obj && obj.barBackground ? obj.barBackground : '#343a40';
            this.barOpacity = obj && obj.barOpacity ? obj.barOpacity : '1';
            this.barWidth = obj && obj.barWidth ? obj.barWidth : '12';
            this.barBorderRadius = obj && obj.barBorderRadius ? obj.barBorderRadius : '5';
            this.barMargin = obj && obj.barMargin ? obj.barMargin : '0 0 0 0';
            this.gridBackground = obj && obj.gridBackground ? obj.gridBackground : '#adb5bd';
            this.gridOpacity = obj && obj.gridOpacity ? obj.gridOpacity : '1';
            this.gridWidth = obj && obj.gridWidth ? obj.gridWidth : '8';
            this.gridBorderRadius = obj && obj.gridBorderRadius ? obj.gridBorderRadius : '10';
            this.gridMargin = obj && obj.gridMargin ? obj.gridMargin : '0 0 0 0';
            this.alwaysVisible = obj && typeof obj.alwaysVisible !== 'undefined' ? obj.alwaysVisible : true;
            this.visibleTimeout = obj && obj.visibleTimeout ? obj.visibleTimeout : 1000;
            this.alwaysPreventDefaultScroll =
                obj && typeof obj.alwaysPreventDefaultScroll !== 'undefined' ? obj.alwaysPreventDefaultScroll : true;
        }
        SlimScrollOptions.prototype.merge = function (obj) {
            var result = new SlimScrollOptions();
            result.position = obj && obj.position ? obj.position : this.position;
            result.barBackground = obj && obj.barBackground ? obj.barBackground : this.barBackground;
            result.barOpacity = obj && obj.barOpacity ? obj.barOpacity : this.barOpacity;
            result.barWidth = obj && obj.barWidth ? obj.barWidth : this.barWidth;
            result.barBorderRadius = obj && obj.barBorderRadius ? obj.barBorderRadius : this.barBorderRadius;
            result.barMargin = obj && obj.barMargin ? obj.barMargin : this.barMargin;
            result.gridBackground = obj && obj.gridBackground ? obj.gridBackground : this.gridBackground;
            result.gridOpacity = obj && obj.gridOpacity ? obj.gridOpacity : this.gridOpacity;
            result.gridWidth = obj && obj.gridWidth ? obj.gridWidth : this.gridWidth;
            result.gridBorderRadius = obj && obj.gridBorderRadius ? obj.gridBorderRadius : this.gridBorderRadius;
            result.gridMargin = obj && obj.gridMargin ? obj.gridMargin : this.gridMargin;
            result.alwaysVisible = obj && typeof obj.alwaysVisible !== 'undefined' ? obj.alwaysVisible : this.alwaysVisible;
            result.visibleTimeout = obj && obj.visibleTimeout ? obj.visibleTimeout : this.visibleTimeout;
            result.alwaysPreventDefaultScroll =
                obj && typeof obj.alwaysPreventDefaultScroll !== 'undefined' ? obj.alwaysPreventDefaultScroll : true;
            return result;
        };
        return SlimScrollOptions;
    }());

    var SlimScrollState = /** @class */ (function () {
        function SlimScrollState(obj) {
            this.scrollPosition = obj && obj.scrollPosition ? obj.scrollPosition : 0;
            this.isScrollAtStart = obj && typeof obj.isScrollAtStart !== 'undefined' ? obj.isScrollAtStart : true;
            this.isScrollAtEnd = obj && typeof obj.isScrollAtEnd !== 'undefined' ? obj.isScrollAtEnd : false;
        }
        return SlimScrollState;
    }());

    /*! *****************************************************************************
    Copyright (c) Microsoft Corporation.

    Permission to use, copy, modify, and/or distribute this software for any
    purpose with or without fee is hereby granted.

    THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
    REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
    AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
    INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
    LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
    OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
    PERFORMANCE OF THIS SOFTWARE.
    ***************************************************************************** */
    /* global Reflect, Promise */
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b)
                if (b.hasOwnProperty(p))
                    d[p] = b[p]; };
        return extendStatics(d, b);
    };
    function __extends(d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    }
    var __assign = function () {
        __assign = Object.assign || function __assign(t) {
            for (var s, i = 1, n = arguments.length; i < n; i++) {
                s = arguments[i];
                for (var p in s)
                    if (Object.prototype.hasOwnProperty.call(s, p))
                        t[p] = s[p];
            }
            return t;
        };
        return __assign.apply(this, arguments);
    };
    function __rest(s, e) {
        var t = {};
        for (var p in s)
            if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
                t[p] = s[p];
        if (s != null && typeof Object.getOwnPropertySymbols === "function")
            for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
                if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                    t[p[i]] = s[p[i]];
            }
        return t;
    }
    function __decorate(decorators, target, key, desc) {
        var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
        if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
            r = Reflect.decorate(decorators, target, key, desc);
        else
            for (var i = decorators.length - 1; i >= 0; i--)
                if (d = decorators[i])
                    r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
        return c > 3 && r && Object.defineProperty(target, key, r), r;
    }
    function __param(paramIndex, decorator) {
        return function (target, key) { decorator(target, key, paramIndex); };
    }
    function __metadata(metadataKey, metadataValue) {
        if (typeof Reflect === "object" && typeof Reflect.metadata === "function")
            return Reflect.metadata(metadataKey, metadataValue);
    }
    function __awaiter(thisArg, _arguments, P, generator) {
        function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
        return new (P || (P = Promise))(function (resolve, reject) {
            function fulfilled(value) { try {
                step(generator.next(value));
            }
            catch (e) {
                reject(e);
            } }
            function rejected(value) { try {
                step(generator["throw"](value));
            }
            catch (e) {
                reject(e);
            } }
            function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
            step((generator = generator.apply(thisArg, _arguments || [])).next());
        });
    }
    function __generator(thisArg, body) {
        var _ = { label: 0, sent: function () { if (t[0] & 1)
                throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
        return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function () { return this; }), g;
        function verb(n) { return function (v) { return step([n, v]); }; }
        function step(op) {
            if (f)
                throw new TypeError("Generator is already executing.");
            while (_)
                try {
                    if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done)
                        return t;
                    if (y = 0, t)
                        op = [op[0] & 2, t.value];
                    switch (op[0]) {
                        case 0:
                        case 1:
                            t = op;
                            break;
                        case 4:
                            _.label++;
                            return { value: op[1], done: false };
                        case 5:
                            _.label++;
                            y = op[1];
                            op = [0];
                            continue;
                        case 7:
                            op = _.ops.pop();
                            _.trys.pop();
                            continue;
                        default:
                            if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
                                _ = 0;
                                continue;
                            }
                            if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) {
                                _.label = op[1];
                                break;
                            }
                            if (op[0] === 6 && _.label < t[1]) {
                                _.label = t[1];
                                t = op;
                                break;
                            }
                            if (t && _.label < t[2]) {
                                _.label = t[2];
                                _.ops.push(op);
                                break;
                            }
                            if (t[2])
                                _.ops.pop();
                            _.trys.pop();
                            continue;
                    }
                    op = body.call(thisArg, _);
                }
                catch (e) {
                    op = [6, e];
                    y = 0;
                }
                finally {
                    f = t = 0;
                }
            if (op[0] & 5)
                throw op[1];
            return { value: op[0] ? op[1] : void 0, done: true };
        }
    }
    var __createBinding = Object.create ? (function (o, m, k, k2) {
        if (k2 === undefined)
            k2 = k;
        Object.defineProperty(o, k2, { enumerable: true, get: function () { return m[k]; } });
    }) : (function (o, m, k, k2) {
        if (k2 === undefined)
            k2 = k;
        o[k2] = m[k];
    });
    function __exportStar(m, exports) {
        for (var p in m)
            if (p !== "default" && !exports.hasOwnProperty(p))
                __createBinding(exports, m, p);
    }
    function __values(o) {
        var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
        if (m)
            return m.call(o);
        if (o && typeof o.length === "number")
            return {
                next: function () {
                    if (o && i >= o.length)
                        o = void 0;
                    return { value: o && o[i++], done: !o };
                }
            };
        throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
    }
    function __read(o, n) {
        var m = typeof Symbol === "function" && o[Symbol.iterator];
        if (!m)
            return o;
        var i = m.call(o), r, ar = [], e;
        try {
            while ((n === void 0 || n-- > 0) && !(r = i.next()).done)
                ar.push(r.value);
        }
        catch (error) {
            e = { error: error };
        }
        finally {
            try {
                if (r && !r.done && (m = i["return"]))
                    m.call(i);
            }
            finally {
                if (e)
                    throw e.error;
            }
        }
        return ar;
    }
    function __spread() {
        for (var ar = [], i = 0; i < arguments.length; i++)
            ar = ar.concat(__read(arguments[i]));
        return ar;
    }
    function __spreadArrays() {
        for (var s = 0, i = 0, il = arguments.length; i < il; i++)
            s += arguments[i].length;
        for (var r = Array(s), k = 0, i = 0; i < il; i++)
            for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)
                r[k] = a[j];
        return r;
    }
    ;
    function __await(v) {
        return this instanceof __await ? (this.v = v, this) : new __await(v);
    }
    function __asyncGenerator(thisArg, _arguments, generator) {
        if (!Symbol.asyncIterator)
            throw new TypeError("Symbol.asyncIterator is not defined.");
        var g = generator.apply(thisArg, _arguments || []), i, q = [];
        return i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () { return this; }, i;
        function verb(n) { if (g[n])
            i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }
        function resume(n, v) { try {
            step(g[n](v));
        }
        catch (e) {
            settle(q[0][3], e);
        } }
        function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }
        function fulfill(value) { resume("next", value); }
        function reject(value) { resume("throw", value); }
        function settle(f, v) { if (f(v), q.shift(), q.length)
            resume(q[0][0], q[0][1]); }
    }
    function __asyncDelegator(o) {
        var i, p;
        return i = {}, verb("next"), verb("throw", function (e) { throw e; }), verb("return"), i[Symbol.iterator] = function () { return this; }, i;
        function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === "return" } : f ? f(v) : v; } : f; }
    }
    function __asyncValues(o) {
        if (!Symbol.asyncIterator)
            throw new TypeError("Symbol.asyncIterator is not defined.");
        var m = o[Symbol.asyncIterator], i;
        return m ? m.call(o) : (o = typeof __values === "function" ? __values(o) : o[Symbol.iterator](), i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () { return this; }, i);
        function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }
        function settle(resolve, reject, d, v) { Promise.resolve(v).then(function (v) { resolve({ value: v, done: d }); }, reject); }
    }
    function __makeTemplateObject(cooked, raw) {
        if (Object.defineProperty) {
            Object.defineProperty(cooked, "raw", { value: raw });
        }
        else {
            cooked.raw = raw;
        }
        return cooked;
    }
    ;
    var __setModuleDefault = Object.create ? (function (o, v) {
        Object.defineProperty(o, "default", { enumerable: true, value: v });
    }) : function (o, v) {
        o["default"] = v;
    };
    function __importStar(mod) {
        if (mod && mod.__esModule)
            return mod;
        var result = {};
        if (mod != null)
            for (var k in mod)
                if (Object.hasOwnProperty.call(mod, k))
                    __createBinding(result, mod, k);
        __setModuleDefault(result, mod);
        return result;
    }
    function __importDefault(mod) {
        return (mod && mod.__esModule) ? mod : { default: mod };
    }
    function __classPrivateFieldGet(receiver, privateMap) {
        if (!privateMap.has(receiver)) {
            throw new TypeError("attempted to get private field on non-instance");
        }
        return privateMap.get(receiver);
    }
    function __classPrivateFieldSet(receiver, privateMap, value) {
        if (!privateMap.has(receiver)) {
            throw new TypeError("attempted to set private field on non-instance");
        }
        privateMap.set(receiver, value);
        return value;
    }

    var ɵ0 = function (t) { return t; }, ɵ1 = function (t) { return t * t; }, ɵ2 = function (t) { return t * (2 - t); }, ɵ3 = function (t) { return (t < 0.5 ? 2 * t * t : -1 + (4 - 2 * t) * t); }, ɵ4 = function (t) { return t * t * t; }, ɵ5 = function (t) { return --t * t * t + 1; }, ɵ6 = function (t) { return (t < 0.5 ? 4 * t * t * t : (t - 1) * (2 * t - 2) * (2 * t - 2) + 1); }, ɵ7 = function (t) { return t * t * t * t; }, ɵ8 = function (t) { return 1 - --t * t * t * t; }, ɵ9 = function (t) { return (t < 0.5 ? 8 * t * t * t * t : 1 - 8 * --t * t * t * t); }, ɵ10 = function (t) { return t * t * t * t * t; }, ɵ11 = function (t) { return 1 + --t * t * t * t * t; }, ɵ12 = function (t) { return (t < 0.5 ? 16 * t * t * t * t * t : 1 + 16 * --t * t * t * t * t); };
    var easing = {
        linear: ɵ0,
        inQuad: ɵ1,
        outQuad: ɵ2,
        inOutQuad: ɵ3,
        inCubic: ɵ4,
        outCubic: ɵ5,
        inOutCubic: ɵ6,
        inQuart: ɵ7,
        outQuart: ɵ8,
        inOutQuart: ɵ9,
        inQuint: ɵ10,
        outQuint: ɵ11,
        inOutQuint: ɵ12
    };
    var SlimScrollDirective = /** @class */ (function () {
        function SlimScrollDirective(viewContainer, renderer, document, optionsDefaults) {
            this.viewContainer = viewContainer;
            this.renderer = renderer;
            this.document = document;
            this.optionsDefaults = optionsDefaults;
            this.enabled = true;
            this.scrollChanged = new core.EventEmitter();
            this.barVisibilityChange = new core.EventEmitter();
            this.el = this.viewContainer.element.nativeElement;
            this.body = this.document.querySelector('body');
            this.mutationThrottleTimeout = 50;
        }
        SlimScrollDirective.prototype.ngOnInit = function () {
            if (!this.interactionSubscriptions && this.enabled) {
                this.setup();
            }
        };
        SlimScrollDirective.prototype.ngOnChanges = function (changes) {
            if (changes.enabled) {
                if (this.enabled) {
                    this.setup();
                }
                else {
                    this.destroy();
                }
            }
            if (changes.options) {
                this.destroy();
                this.setup();
            }
        };
        SlimScrollDirective.prototype.ngOnDestroy = function () {
            this.destroy();
        };
        SlimScrollDirective.prototype.setup = function () {
            var _this = this;
            this.interactionSubscriptions = new rxjs.Subscription();
            if (this.optionsDefaults) {
                this.options = new SlimScrollOptions(this.optionsDefaults).merge(this.options);
            }
            else {
                this.options = new SlimScrollOptions(this.options);
            }
            this.setStyle();
            this.wrapContainer();
            this.initGrid();
            this.initBar();
            this.getBarHeight();
            this.initWheel();
            this.initDrag();
            if (!this.options.alwaysVisible) {
                this.hideBarAndGrid();
            }
            if (MutationObserver) {
                if (this.mutationObserver) {
                    this.mutationObserver.disconnect();
                }
                this.mutationObserver = new MutationObserver(function () {
                    if (_this.mutationThrottleTimeout) {
                        clearTimeout(_this.mutationThrottleTimeout);
                        _this.mutationThrottleTimeout = setTimeout(_this.onMutation.bind(_this), 50);
                    }
                });
                this.mutationObserver.observe(this.el, { subtree: true, childList: true });
            }
            if (this.scrollEvents && this.scrollEvents instanceof core.EventEmitter) {
                var scrollSubscription = this.scrollEvents.subscribe(function (event) { return _this.handleEvent(event); });
                this.interactionSubscriptions.add(scrollSubscription);
            }
        };
        SlimScrollDirective.prototype.handleEvent = function (e) {
            if (e.type === 'scrollToBottom') {
                var y = this.el.scrollHeight - this.el.clientHeight;
                this.scrollTo(y, e.duration, e.easing);
            }
            else if (e.type === 'scrollToTop') {
                var y = 0;
                this.scrollTo(y, e.duration, e.easing);
            }
            else if (e.type === 'scrollToPercent' && e.percent >= 0 && e.percent <= 100) {
                var y = Math.round(((this.el.scrollHeight - this.el.clientHeight) / 100) * e.percent);
                this.scrollTo(y, e.duration, e.easing);
            }
            else if (e.type === 'scrollTo') {
                var max = this.el.scrollHeight - this.el.clientHeight;
                var y = e.y <= max ? e.y : max;
                if (y >= 0) {
                    this.scrollTo(y, e.duration, e.easing);
                }
            }
            else if (e.type === 'recalculate') {
                this.getBarHeight();
            }
        };
        SlimScrollDirective.prototype.setStyle = function () {
            var el = this.el;
            this.renderer.setStyle(el, 'overflow', 'hidden');
        };
        SlimScrollDirective.prototype.onMutation = function () {
            this.getBarHeight();
            this.setBarTop();
        };
        SlimScrollDirective.prototype.wrapContainer = function () {
            this.wrapper = this.renderer.createElement('div');
            var wrapper = this.wrapper;
            var el = this.el;
            this.renderer.addClass(wrapper, 'slimscroll-wrapper');
            this.renderer.setStyle(wrapper, 'position', 'relative');
            this.renderer.setStyle(wrapper, 'overflow', 'hidden');
            this.renderer.setStyle(wrapper, 'display', 'block');
            this.renderer.setStyle(wrapper, 'margin', getComputedStyle(el).margin);
            this.renderer.setStyle(wrapper, 'width', '100%');
            this.renderer.setStyle(wrapper, 'height', getComputedStyle(el).height);
            this.renderer.insertBefore(el.parentNode, wrapper, el);
            this.renderer.appendChild(wrapper, el);
        };
        SlimScrollDirective.prototype.initGrid = function () {
            this.grid = this.renderer.createElement('div');
            var grid = this.grid;
            this.renderer.addClass(grid, 'slimscroll-grid');
            this.renderer.setStyle(grid, 'position', 'absolute');
            this.renderer.setStyle(grid, 'top', '0');
            this.renderer.setStyle(grid, 'bottom', '0');
            this.renderer.setStyle(grid, this.options.position, '0');
            this.renderer.setStyle(grid, 'width', this.options.gridWidth + "px");
            this.renderer.setStyle(grid, 'background', this.options.gridBackground);
            this.renderer.setStyle(grid, 'opacity', this.options.gridOpacity);
            this.renderer.setStyle(grid, 'display', 'block');
            this.renderer.setStyle(grid, 'cursor', 'pointer');
            this.renderer.setStyle(grid, 'z-index', '99');
            this.renderer.setStyle(grid, 'border-radius', this.options.gridBorderRadius + "px");
            this.renderer.setStyle(grid, 'margin', this.options.gridMargin);
            this.renderer.appendChild(this.wrapper, grid);
        };
        SlimScrollDirective.prototype.initBar = function () {
            this.bar = this.renderer.createElement('div');
            var bar = this.bar;
            this.renderer.addClass(bar, 'slimscroll-bar');
            this.renderer.setStyle(bar, 'position', 'absolute');
            this.renderer.setStyle(bar, 'top', '0');
            this.renderer.setStyle(bar, this.options.position, '0');
            this.renderer.setStyle(bar, 'width', this.options.barWidth + "px");
            this.renderer.setStyle(bar, 'background', this.options.barBackground);
            this.renderer.setStyle(bar, 'opacity', this.options.barOpacity);
            this.renderer.setStyle(bar, 'display', 'block');
            this.renderer.setStyle(bar, 'cursor', 'pointer');
            this.renderer.setStyle(bar, 'z-index', '100');
            this.renderer.setStyle(bar, 'border-radius', this.options.barBorderRadius + "px");
            this.renderer.setStyle(bar, 'margin', this.options.barMargin);
            this.renderer.appendChild(this.wrapper, bar);
            this.barVisibilityChange.emit(true);
        };
        SlimScrollDirective.prototype.getBarHeight = function () {
            var elHeight = this.el.offsetHeight;
            var barHeight = Math.max((elHeight / this.el.scrollHeight) * elHeight, 30) + 'px';
            var display = parseInt(barHeight, 10) === elHeight ? 'none' : 'block';
            if (this.wrapper.offsetHeight !== elHeight) {
                this.renderer.setStyle(this.wrapper, 'height', elHeight + 'px');
            }
            this.renderer.setStyle(this.bar, 'height', barHeight);
            this.renderer.setStyle(this.bar, 'display', display);
            this.renderer.setStyle(this.grid, 'display', display);
            this.barVisibilityChange.emit(display !== 'none');
        };
        SlimScrollDirective.prototype.scrollTo = function (y, duration, easingFunc) {
            var _this = this;
            var start = Date.now();
            var from = this.el.scrollTop;
            var paddingTop = parseInt(this.el.style.paddingTop, 10) || 0;
            var paddingBottom = parseInt(this.el.style.paddingBottom, 10) || 0;
            var scroll = function () {
                var currentTime = Date.now();
                var time = Math.min(1, (currentTime - start) / duration);
                var easedTime = easing[easingFunc](time);
                if (paddingTop > 0 || paddingBottom > 0) {
                    var fromY = null;
                    if (paddingTop > 0) {
                        fromY = -paddingTop;
                        fromY = -(easedTime * (y - fromY) + fromY);
                        _this.renderer.setStyle(_this.el, 'padding-top', fromY + "px");
                    }
                    if (paddingBottom > 0) {
                        fromY = paddingBottom;
                        fromY = easedTime * (y - fromY) + fromY;
                        _this.renderer.setStyle(_this.el, 'padding-bottom', fromY + "px");
                    }
                }
                else {
                    _this.el.scrollTop = easedTime * (y - from) + from;
                }
                _this.setBarTop();
                _this.saveCurrent();
                _this.updateScrollState();
                if (time < 1) {
                    requestAnimationFrame(scroll);
                }
            };
            if (!duration || !easingFunc) {
                this.el.scrollTop = y;
                this.setBarTop();
                this.saveCurrent();
                this.updateScrollState();
            }
            else {
                requestAnimationFrame(scroll);
            }
        };
        SlimScrollDirective.prototype.scrollContent = function (y, isWheel, isJump) {
            var _this = this;
            var delta = y;
            var maxTop = this.el.offsetHeight - this.bar.offsetHeight;
            var hiddenContent = this.el.scrollHeight - this.el.offsetHeight;
            var percentScroll;
            var over = null;
            if (isWheel) {
                delta = parseInt(getComputedStyle(this.bar).top, 10) + ((y * 20) / 100) * this.bar.offsetHeight;
                if (delta < 0 || delta > maxTop) {
                    over = delta > maxTop ? delta - maxTop : delta;
                }
                delta = Math.min(Math.max(delta, 0), maxTop);
                delta = y > 0 ? Math.ceil(delta) : Math.floor(delta);
                this.renderer.setStyle(this.bar, 'top', delta + 'px');
            }
            percentScroll = parseInt(getComputedStyle(this.bar).top, 10) / (this.el.offsetHeight - this.bar.offsetHeight);
            delta = percentScroll * hiddenContent;
            this.el.scrollTop = delta;
            this.showBarAndGrid();
            if (!this.options.alwaysVisible) {
                if (this.visibleTimeout) {
                    clearTimeout(this.visibleTimeout);
                }
                this.visibleTimeout = setTimeout(function () {
                    _this.hideBarAndGrid();
                }, this.options.visibleTimeout);
            }
            this.updateScrollState();
            this.saveCurrent();
            return over;
        };
        SlimScrollDirective.prototype.updateScrollState = function () {
            var isScrollAtStart = this.el.scrollTop === 0;
            var isScrollAtEnd = this.el.scrollTop === this.el.scrollHeight - this.el.offsetHeight;
            var scrollPosition = Math.ceil(this.el.scrollTop);
            var scrollState = new SlimScrollState({ scrollPosition: scrollPosition, isScrollAtStart: isScrollAtStart, isScrollAtEnd: isScrollAtEnd });
            this.scrollChanged.emit(scrollState);
        };
        SlimScrollDirective.prototype.initWheel = function () {
            var _this = this;
            var dommousescroll = rxjs.fromEvent(this.el, 'DOMMouseScroll');
            var mousewheel = rxjs.fromEvent(this.el, 'mousewheel');
            var wheelSubscription = rxjs.merge.apply(void 0, __spread([dommousescroll, mousewheel])).subscribe(function (e) {
                var delta = 0;
                if (e.wheelDelta) {
                    delta = -e.wheelDelta / 120;
                }
                if (e.detail) {
                    delta = e.detail / 3;
                }
                var over = _this.scrollContent(delta, true, false);
                if (e.preventDefault && (_this.options.alwaysPreventDefaultScroll || over === null)) {
                    e.preventDefault();
                }
            });
            this.interactionSubscriptions.add(wheelSubscription);
        };
        SlimScrollDirective.prototype.initDrag = function () {
            var _this = this;
            var bar = this.bar;
            var mousemove = rxjs.fromEvent(this.document.documentElement, 'mousemove');
            var touchmove = rxjs.fromEvent(this.document.documentElement, 'touchmove');
            var mousedown = rxjs.fromEvent(bar, 'mousedown');
            var touchstart = rxjs.fromEvent(this.el, 'touchstart');
            var mouseup = rxjs.fromEvent(this.document.documentElement, 'mouseup');
            var touchend = rxjs.fromEvent(this.document.documentElement, 'touchend');
            var mousedrag = mousedown.pipe(operators.mergeMap(function (e) {
                _this.pageY = e.pageY;
                _this.top = parseFloat(getComputedStyle(bar).top);
                return mousemove.pipe(operators.map(function (emove) {
                    emove.preventDefault();
                    return _this.top + emove.pageY - _this.pageY;
                }), operators.takeUntil(mouseup));
            }));
            var touchdrag = touchstart.pipe(operators.mergeMap(function (e) {
                _this.pageY = e.targetTouches[0].pageY;
                _this.top = -parseFloat(getComputedStyle(bar).top);
                return touchmove.pipe(operators.map(function (tmove) {
                    return -(_this.top + tmove.targetTouches[0].pageY - _this.pageY);
                }), operators.takeUntil(touchend));
            }));
            var dragSubscription = rxjs.merge.apply(void 0, __spread([mousedrag, touchdrag])).subscribe(function (top) {
                _this.body.addEventListener('selectstart', _this.preventDefaultEvent, false);
                _this.renderer.setStyle(_this.body, 'touch-action', 'pan-y');
                _this.renderer.setStyle(_this.body, 'user-select', 'none');
                _this.renderer.setStyle(_this.bar, 'top', top + "px");
                var over = _this.scrollContent(0, true, false);
                var maxTop = _this.el.offsetHeight - _this.bar.offsetHeight;
                if (over && over < 0 && -over <= maxTop) {
                    _this.renderer.setStyle(_this.el, 'paddingTop', -over + 'px');
                }
                else if (over && over > 0 && over <= maxTop) {
                    _this.renderer.setStyle(_this.el, 'paddingBottom', over + 'px');
                }
            });
            var dragEndSubscription = rxjs.merge.apply(void 0, __spread([mouseup, touchend])).subscribe(function () {
                _this.body.removeEventListener('selectstart', _this.preventDefaultEvent, false);
                var paddingTop = parseInt(_this.el.style.paddingTop, 10);
                var paddingBottom = parseInt(_this.el.style.paddingBottom, 10);
                _this.renderer.setStyle(_this.body, 'touch-action', 'unset');
                _this.renderer.setStyle(_this.body, 'user-select', 'default');
                if (paddingTop > 0) {
                    _this.scrollTo(0, 300, 'linear');
                }
                else if (paddingBottom > 0) {
                    _this.scrollTo(0, 300, 'linear');
                }
            });
            this.interactionSubscriptions.add(dragSubscription);
            this.interactionSubscriptions.add(dragEndSubscription);
        };
        SlimScrollDirective.prototype.setBarTop = function () {
            var barHeight = Math.max((this.el.offsetHeight / this.el.scrollHeight) * this.el.offsetHeight, 30);
            var maxScrollTop = this.el.scrollHeight - this.el.clientHeight;
            var paddingBottom = parseInt(this.el.style.paddingBottom, 10) || 0;
            var percentScroll = this.el.scrollTop / maxScrollTop;
            if (paddingBottom === 0) {
                var delta = Math.round((this.el.clientHeight - barHeight) * percentScroll);
                if (delta > 0) {
                    this.renderer.setStyle(this.bar, 'top', delta + "px");
                }
            }
        };
        SlimScrollDirective.prototype.saveCurrent = function () {
            var max = this.el.scrollHeight - this.el.clientHeight;
            var percent = this.el.scrollTop / max;
            this.current = { max: max, percent: percent };
        };
        SlimScrollDirective.prototype.showBarAndGrid = function () {
            this.renderer.setStyle(this.grid, 'background', this.options.gridBackground);
            this.renderer.setStyle(this.bar, 'background', this.options.barBackground);
        };
        SlimScrollDirective.prototype.hideBarAndGrid = function () {
            this.renderer.setStyle(this.grid, 'background', 'transparent');
            this.renderer.setStyle(this.bar, 'background', 'transparent');
        };
        SlimScrollDirective.prototype.preventDefaultEvent = function (e) {
            e.preventDefault();
            e.stopPropagation();
        };
        SlimScrollDirective.prototype.destroy = function () {
            if (this.mutationObserver) {
                this.mutationObserver.disconnect();
                this.mutationObserver = null;
            }
            if (this.el.parentElement.classList.contains('slimscroll-wrapper')) {
                var wrapper = this.el.parentElement;
                var bar = wrapper.querySelector('.slimscroll-bar');
                wrapper.removeChild(bar);
                var grid = wrapper.querySelector('.slimscroll-grid');
                wrapper.removeChild(grid);
                this.unwrap(wrapper);
            }
            if (this.interactionSubscriptions) {
                this.interactionSubscriptions.unsubscribe();
            }
        };
        SlimScrollDirective.prototype.unwrap = function (wrapper) {
            var docFrag = document.createDocumentFragment();
            while (wrapper.firstChild) {
                var child = wrapper.removeChild(wrapper.firstChild);
                docFrag.appendChild(child);
            }
            wrapper.parentNode.replaceChild(docFrag, wrapper);
        };
        SlimScrollDirective.prototype.onResize = function () {
            var percent = Object.assign({}, this.current).percent;
            this.destroy();
            this.setup();
            this.scrollTo(Math.round((this.el.scrollHeight - this.el.clientHeight) * percent), null, null);
        };
        return SlimScrollDirective;
    }());
    SlimScrollDirective.decorators = [
        { type: core.Directive, args: [{
                    selector: '[slimScroll]',
                    exportAs: 'slimScroll'
                },] }
    ];
    SlimScrollDirective.ctorParameters = function () { return [
        { type: core.ViewContainerRef, decorators: [{ type: core.Inject, args: [core.ViewContainerRef,] }] },
        { type: core.Renderer2, decorators: [{ type: core.Inject, args: [core.Renderer2,] }] },
        { type: undefined, decorators: [{ type: core.Inject, args: [common.DOCUMENT,] }] },
        { type: undefined, decorators: [{ type: core.Inject, args: [SLIMSCROLL_DEFAULTS,] }, { type: core.Optional }] }
    ]; };
    SlimScrollDirective.propDecorators = {
        enabled: [{ type: core.Input }],
        options: [{ type: core.Input }],
        scrollEvents: [{ type: core.Input }],
        scrollChanged: [{ type: core.Output }],
        barVisibilityChange: [{ type: core.Output }],
        onResize: [{ type: core.HostListener, args: ['window:resize', [],] }]
    };

    var NgSlimScrollModule = /** @class */ (function () {
        function NgSlimScrollModule() {
        }
        return NgSlimScrollModule;
    }());
    NgSlimScrollModule.decorators = [
        { type: core.NgModule, args: [{
                    declarations: [
                        SlimScrollDirective
                    ],
                    exports: [
                        SlimScrollDirective
                    ]
                },] }
    ];

    /*
     * Public API Surface of ngx-slimscroll
     */

    /**
     * Generated bundle index. Do not edit.
     */

    exports.NgSlimScrollModule = NgSlimScrollModule;
    exports.SLIMSCROLL_DEFAULTS = SLIMSCROLL_DEFAULTS;
    exports.SlimScrollDirective = SlimScrollDirective;
    exports.SlimScrollEvent = SlimScrollEvent;
    exports.SlimScrollOptions = SlimScrollOptions;
    exports.SlimScrollState = SlimScrollState;
    exports.easing = easing;
    exports.ɵ0 = ɵ0;
    exports.ɵ1 = ɵ1;
    exports.ɵ10 = ɵ10;
    exports.ɵ11 = ɵ11;
    exports.ɵ12 = ɵ12;
    exports.ɵ2 = ɵ2;
    exports.ɵ3 = ɵ3;
    exports.ɵ4 = ɵ4;
    exports.ɵ5 = ɵ5;
    exports.ɵ6 = ɵ6;
    exports.ɵ7 = ɵ7;
    exports.ɵ8 = ɵ8;
    exports.ɵ9 = ɵ9;

    Object.defineProperty(exports, '__esModule', { value: true });

})));
//# sourceMappingURL=ngx-slimscroll.umd.js.map
