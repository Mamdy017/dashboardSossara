import { ChangeDetectionStrategy, Component, EventEmitter, Inject, Input, Output } from '@angular/core';
import { dismissOnDestroyToken, fireOnInitToken } from './di';
import * as i0 from "@angular/core";
import * as i1 from "./sweetalert2-loader.service";
/**
 * <swal> component. See the README.md for usage.
 *
 * It contains a bunch of @Inputs that have a perfect 1:1 mapping with SweetAlert2 options.
 * Their types are directly coming from SweetAlert2 types defintitions, meaning that ngx-sweetalert2 is tightly coupled
 * to SweetAlert2, but also is type-safe even if both libraries do not evolve in sync.
 *
 * (?) If you want to use an object that declares the SweetAlert2 options all at once rather than many @Inputs,
 *     take a look at [swalOptions], that lets you pass a full {@link SweetAlertOptions} object.
 *
 * (?) If you are reading the TypeScript source of this component, you may think that it's a lot of code.
 *     Be sure that a lot of this code is types and Angular boilerplate. Compiled and minified code is much smaller.
 *     If you are really concerned about performance and/or don't care about the API and its convenient integration
 *     with Angular (notably change detection and transclusion), you may totally use SweetAlert2 natively as well ;)
 *
 * /!\ Some SweetAlert options aren't @Inputs but @Outputs: `willOpen`, `didOpen`, `didRender`, `willClose`, `didClose`
 *     and `didDestroy`.
 *     However, `preConfirm`, `preDeny` and `inputValidator` are still @Inputs because they are not event handlers,
 *     there can't be multiple listeners on them, and we need the values they can/must return.
 */
export class SwalComponent {
    constructor(sweetAlert2Loader, moduleLevelFireOnInit, moduleLevelDismissOnDestroy) {
        this.sweetAlert2Loader = sweetAlert2Loader;
        this.moduleLevelFireOnInit = moduleLevelFireOnInit;
        this.moduleLevelDismissOnDestroy = moduleLevelDismissOnDestroy;
        /**
         * Modal lifecycle hook. Synchronously runs before the modal is shown on screen.
         */
        this.willOpen = new EventEmitter();
        /**
         * Modal lifecycle hook. Synchronously runs before the modal is shown on screen.
         */
        this.didOpen = new EventEmitter();
        /**
         * Modal lifecycle hook. Synchronously runs after the popup DOM has been updated (ie. just before the modal is
         * repainted on the screen).
         * Typically, this will happen after `Swal.fire()` or `Swal.update()`.
         * If you want to perform changes in the popup's DOM, that survive `Swal.update()`, prefer {@link didRender} over
         * {@link willOpen}.
         */
        this.didRender = new EventEmitter();
        /**
         * Modal lifecycle hook. Synchronously runs when the popup closes by user interaction (and not due to another popup
         * being fired).
         */
        this.willClose = new EventEmitter();
        /**
         * Modal lifecycle hook. Asynchronously runs after the popup has been disposed by user interaction (and not due to
         * another popup being fired).
         */
        this.didClose = new EventEmitter();
        /**
         * Modal lifecycle hook. Synchronously runs after popup has been destroyed either by user interaction or by another
         * popup.
         * If you have cleanup operations that you need to reliably execute each time a modal is closed, prefer
         * {@link didDestroy} over {@link didClose}.
         */
        this.didDestroy = new EventEmitter();
        /**
         * Emits when the user clicks "Confirm".
         * The event value ($event) can be either:
         *  - by default, just `true`,
         *  - when using {@link input}, the input value,
         *  - when using {@link preConfirm}, the return value of this function.
         *
         * Example:
         *     <swal (confirm)="handleConfirm($event)"></swal>
         *
         *     public handleConfirm(email: string): void {
         *         // ... save user email
         *     }
         */
        this.confirm = new EventEmitter();
        /**
         * Emits when the user clicks "Deny".
         * This event bears no value.
         * Use `(deny)` (along with {@link showDenyButton}) when you want a modal with three buttons (confirm, deny and
         * cancel), and/or when you want to handle clear refusal in a separate way than simple dismissal.
         *
         * Example:
         *     <swal (deny)="handleDeny()"></swal>
         *
         *     public handleDeny(): void {
         *     }
         */
        this.deny = new EventEmitter();
        /**
         * Emits when the user clicks "Cancel", or dismisses the modal by any other allowed way.
         * The event value ($event) is a string that explains how the modal was dismissed. It is `undefined` when
         * the modal was programmatically closed (through {@link close} for example).
         *
         * Example:
         *     <swal (dismiss)="handleDismiss($event)"></swal>
         *
         *     public handleDismiss(reason: DismissReason | undefined): void {
         *         // reason can be 'cancel', 'overlay', 'close', 'timer' or undefined.
         *         // ... do something
         *     }
         */
        this.dismiss = new EventEmitter();
        /**
         * This Set retains the properties that have been changed from @Inputs, so we can know precisely
         * what options we have to send to {@link Swal.fire}.
         */
        this.touchedProps = new Set();
        /**
         * A function of signature `(propName: string): void` that adds a given property name to the list of
         * touched properties, ie. {@link touchedProps}.
         */
        this.markTouched = this.touchedProps.add.bind(this.touchedProps);
        /**
         * Is the SweetAlert2 modal represented by this component currently opened?
         */
        this.isCurrentlyShown = false;
    }
    /**
     * An object of SweetAlert2 native options, useful if:
     *  - you don't want to use the @Inputs for practical/philosophical reasons ;
     *  - there are missing @Inputs because ngx-sweetalert2 isn't up-to-date with SweetAlert2's latest changes.
     *
     * /!\ Please note that setting this property does NOT erase what has been set before unless you specify the
     *     previous properties you want to erase again.
     *     Ie. setting { title: 'Title' } and then { text: 'Text' } will give { title: 'Title', text: 'Text' }.
     *
     * /!\ Be aware that the options defined in this object will override the @Inputs of the same name.
     */
    set swalOptions(options) {
        //=> Update properties
        Object.assign(this, options);
        //=> Mark changed properties as touched
        const touchedKeys = Object.keys(options);
        touchedKeys.forEach(this.markTouched);
    }
    /**
     * Computes the options object that will get passed to SweetAlert2.
     * Only the properties that have been set at least once on this component will be returned.
     * Mostly for internal usage.
     */
    get swalOptions() {
        //=> We will compute the options object based on the option keys that are known to have changed.
        //   That avoids passing a gigantic object to SweetAlert2, making debugging easier and potentially
        //   avoiding side effects.
        return [...this.touchedProps].reduce((obj, key) => ({ ...obj, [key]: this[key] }), {});
    }
    set swalVisible(visible) {
        visible ? this.fire() : this.close();
    }
    get swalVisible() {
        return this.isCurrentlyShown;
    }
    /**
     * Angular lifecycle hook.
     * Asks the SweetAlert2 loader service to preload the SweetAlert2 library, so it begins to be loaded only if there
     * is a <swal> component somewhere, and is probably fully loaded when the modal has to be displayed,
     * causing no delay.
     */
    ngOnInit() {
        //=> Preload SweetAlert2 library in case this component is activated.
        this.sweetAlert2Loader.preloadSweetAlertLibrary();
    }
    /**
     * Angular lifecycle hook.
     * Fires the modal, if the component or module is configured to do so.
     */
    ngAfterViewInit() {
        const fireOnInit = this.swalFireOnInit === undefined
            ? this.moduleLevelFireOnInit
            : this.swalFireOnInit;
        fireOnInit && this.fire();
    }
    /**
     * Angular lifecycle hook.
     * Updates the SweetAlert options, and if the modal is opened, asks SweetAlert to render it again.
     */
    ngOnChanges(changes) {
        //=> For each changed @Input that matches a SweetAlert2 option, mark as touched so we can
        //   send it with the next fire() or update() calls.
        Object.keys(changes)
            //=> If the filtering logic becomes more complex here, we can use Swal.isValidParameter
            .filter((key) => !key.startsWith('swal'))
            .forEach(this.markTouched);
        //=> Eventually trigger re-render if the modal is open.
        void this.update();
    }
    /**
     * Angular lifecycle hook.
     * Closes the SweetAlert when the component is destroyed.
     */
    ngOnDestroy() {
        //=> Release the modal if the component is destroyed and if that behaviour is not disabled.
        const dismissOnDestroy = this.swalDismissOnDestroy === undefined
            ? this.moduleLevelDismissOnDestroy
            : this.swalDismissOnDestroy;
        dismissOnDestroy && this.close();
    }
    /**
     * Shows the SweetAlert.
     *
     * Returns the SweetAlert2 promise for convenience and use in code behind templates.
     * Otherwise, (confirm)="myHandler($event)" and (dismiss)="myHandler($event)" can be used in templates.
     */
    async fire() {
        const swal = await this.sweetAlert2Loader.swal;
        const userOptions = this.swalOptions;
        //=> Build the SweetAlert2 options
        const options = {
            //=> Merge with calculated options set for that specific swal
            ...userOptions,
            //=> Handle modal lifecycle events
            willOpen: composeHook(userOptions.willOpen, (modalElement) => {
                this.willOpen.emit({ modalElement });
            }),
            didOpen: composeHook(userOptions.didOpen, (modalElement) => {
                this.isCurrentlyShown = true;
                this.didOpen.emit({ modalElement });
            }),
            didRender: composeHook(userOptions.didRender, (modalElement) => {
                this.didRender.emit({ modalElement });
            }),
            willClose: composeHook(userOptions.willClose, (modalElement) => {
                this.isCurrentlyShown = false;
                this.willClose.emit({ modalElement });
            }),
            didClose: composeHook(userOptions.didClose, () => {
                this.didClose.emit();
            }),
            didDestroy: composeHook(userOptions.didDestroy, () => {
                this.didDestroy.emit();
            })
        };
        //=> Show the Swal! And wait for confirmation or dimissal.
        const result = await swal.fire(options);
        //=> Emit on (confirm), (deny) or (dismiss)
        switch (true) {
            case result.isConfirmed:
                this.confirm.emit(result.value);
                break;
            case result.isDenied:
                this.deny.emit();
                break;
            case result.isDismissed:
                this.dismiss.emit(result.dismiss);
                break;
        }
        return result;
        function composeHook(userHook, libHook) {
            return (...args) => (libHook(...args), userHook?.(...args));
        }
    }
    /**
     * Closes the modal, if opened.
     *
     * @param result The value that the modal will resolve with, triggering either (confirm), (deny) or (dismiss).
     *               If the argument is not passed, it is (dismiss) that will emit an `undefined` reason.
     *               {@see Swal.close}.
     */
    async close(result) {
        if (!this.isCurrentlyShown)
            return;
        const swal = await this.sweetAlert2Loader.swal;
        swal.close(result);
    }
    /**
     * Updates SweetAlert2 options while the modal is opened, causing the modal to re-render.
     * If the modal is not opened, the component options will simply be updated and that's it.
     *
     * /!\ Please note that not all SweetAlert2 options are updatable while the modal is opened.
     *
     * @param options
     */
    async update(options) {
        if (options) {
            this.swalOptions = options;
        }
        if (!this.isCurrentlyShown)
            return;
        const swal = await this.sweetAlert2Loader.swal;
        const allOptions = this.swalOptions;
        const updatableOptions = Object.keys(allOptions)
            .filter(swal.isUpdatableParameter)
            .reduce((obj, key) => ({ ...obj, [key]: allOptions[key] }), {});
        swal.update(updatableOptions);
    }
}
SwalComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.2.4", ngImport: i0, type: SwalComponent, deps: [{ token: i1.SweetAlert2LoaderService }, { token: fireOnInitToken }, { token: dismissOnDestroyToken }], target: i0.ɵɵFactoryTarget.Component });
SwalComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "13.2.4", type: SwalComponent, selector: "swal", inputs: { title: "title", titleText: "titleText", text: "text", html: "html", footer: "footer", icon: "icon", iconColor: "iconColor", iconHtml: "iconHtml", backdrop: "backdrop", toast: "toast", target: "target", input: "input", width: "width", padding: "padding", background: "background", position: "position", grow: "grow", showClass: "showClass", hideClass: "hideClass", customClass: "customClass", timer: "timer", timerProgressBar: "timerProgressBar", heightAuto: "heightAuto", allowOutsideClick: "allowOutsideClick", allowEscapeKey: "allowEscapeKey", allowEnterKey: "allowEnterKey", stopKeydownPropagation: "stopKeydownPropagation", keydownListenerCapture: "keydownListenerCapture", showConfirmButton: "showConfirmButton", showDenyButton: "showDenyButton", showCancelButton: "showCancelButton", confirmButtonText: "confirmButtonText", denyButtonText: "denyButtonText", cancelButtonText: "cancelButtonText", confirmButtonColor: "confirmButtonColor", denyButtonColor: "denyButtonColor", cancelButtonColor: "cancelButtonColor", confirmButtonAriaLabel: "confirmButtonAriaLabel", denyButtonAriaLabel: "denyButtonAriaLabel", cancelButtonAriaLabel: "cancelButtonAriaLabel", buttonsStyling: "buttonsStyling", reverseButtons: "reverseButtons", focusConfirm: "focusConfirm", focusDeny: "focusDeny", focusCancel: "focusCancel", showCloseButton: "showCloseButton", closeButtonHtml: "closeButtonHtml", closeButtonAriaLabel: "closeButtonAriaLabel", loaderHtml: "loaderHtml", showLoaderOnConfirm: "showLoaderOnConfirm", preConfirm: "preConfirm", preDeny: "preDeny", imageUrl: "imageUrl", imageWidth: "imageWidth", imageHeight: "imageHeight", imageAlt: "imageAlt", inputLabel: "inputLabel", inputPlaceholder: "inputPlaceholder", inputValue: "inputValue", inputOptions: "inputOptions", inputAutoTrim: "inputAutoTrim", inputAttributes: "inputAttributes", inputValidator: "inputValidator", returnInputValueOnDeny: "returnInputValueOnDeny", validationMessage: "validationMessage", progressSteps: "progressSteps", currentProgressStep: "currentProgressStep", progressStepsDistance: "progressStepsDistance", scrollbarPadding: "scrollbarPadding", swalOptions: "swalOptions", swalFireOnInit: "swalFireOnInit", swalDismissOnDestroy: "swalDismissOnDestroy", swalVisible: "swalVisible" }, outputs: { willOpen: "willOpen", didOpen: "didOpen", didRender: "didRender", willClose: "willClose", didClose: "didClose", didDestroy: "didDestroy", confirm: "confirm", deny: "deny", dismiss: "dismiss" }, usesOnChanges: true, ngImport: i0, template: '', isInline: true, changeDetection: i0.ChangeDetectionStrategy.OnPush });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.2.4", ngImport: i0, type: SwalComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'swal',
                    template: '',
                    changeDetection: ChangeDetectionStrategy.OnPush
                }]
        }], ctorParameters: function () { return [{ type: i1.SweetAlert2LoaderService }, { type: undefined, decorators: [{
                    type: Inject,
                    args: [fireOnInitToken]
                }] }, { type: undefined, decorators: [{
                    type: Inject,
                    args: [dismissOnDestroyToken]
                }] }]; }, propDecorators: { title: [{
                type: Input
            }], titleText: [{
                type: Input
            }], text: [{
                type: Input
            }], html: [{
                type: Input
            }], footer: [{
                type: Input
            }], icon: [{
                type: Input
            }], iconColor: [{
                type: Input
            }], iconHtml: [{
                type: Input
            }], backdrop: [{
                type: Input
            }], toast: [{
                type: Input
            }], target: [{
                type: Input
            }], input: [{
                type: Input
            }], width: [{
                type: Input
            }], padding: [{
                type: Input
            }], background: [{
                type: Input
            }], position: [{
                type: Input
            }], grow: [{
                type: Input
            }], showClass: [{
                type: Input
            }], hideClass: [{
                type: Input
            }], customClass: [{
                type: Input
            }], timer: [{
                type: Input
            }], timerProgressBar: [{
                type: Input
            }], heightAuto: [{
                type: Input
            }], allowOutsideClick: [{
                type: Input
            }], allowEscapeKey: [{
                type: Input
            }], allowEnterKey: [{
                type: Input
            }], stopKeydownPropagation: [{
                type: Input
            }], keydownListenerCapture: [{
                type: Input
            }], showConfirmButton: [{
                type: Input
            }], showDenyButton: [{
                type: Input
            }], showCancelButton: [{
                type: Input
            }], confirmButtonText: [{
                type: Input
            }], denyButtonText: [{
                type: Input
            }], cancelButtonText: [{
                type: Input
            }], confirmButtonColor: [{
                type: Input
            }], denyButtonColor: [{
                type: Input
            }], cancelButtonColor: [{
                type: Input
            }], confirmButtonAriaLabel: [{
                type: Input
            }], denyButtonAriaLabel: [{
                type: Input
            }], cancelButtonAriaLabel: [{
                type: Input
            }], buttonsStyling: [{
                type: Input
            }], reverseButtons: [{
                type: Input
            }], focusConfirm: [{
                type: Input
            }], focusDeny: [{
                type: Input
            }], focusCancel: [{
                type: Input
            }], showCloseButton: [{
                type: Input
            }], closeButtonHtml: [{
                type: Input
            }], closeButtonAriaLabel: [{
                type: Input
            }], loaderHtml: [{
                type: Input
            }], showLoaderOnConfirm: [{
                type: Input
            }], preConfirm: [{
                type: Input
            }], preDeny: [{
                type: Input
            }], imageUrl: [{
                type: Input
            }], imageWidth: [{
                type: Input
            }], imageHeight: [{
                type: Input
            }], imageAlt: [{
                type: Input
            }], inputLabel: [{
                type: Input
            }], inputPlaceholder: [{
                type: Input
            }], inputValue: [{
                type: Input
            }], inputOptions: [{
                type: Input
            }], inputAutoTrim: [{
                type: Input
            }], inputAttributes: [{
                type: Input
            }], inputValidator: [{
                type: Input
            }], returnInputValueOnDeny: [{
                type: Input
            }], validationMessage: [{
                type: Input
            }], progressSteps: [{
                type: Input
            }], currentProgressStep: [{
                type: Input
            }], progressStepsDistance: [{
                type: Input
            }], scrollbarPadding: [{
                type: Input
            }], swalOptions: [{
                type: Input
            }], swalFireOnInit: [{
                type: Input
            }], swalDismissOnDestroy: [{
                type: Input
            }], swalVisible: [{
                type: Input
            }], willOpen: [{
                type: Output
            }], didOpen: [{
                type: Output
            }], didRender: [{
                type: Output
            }], willClose: [{
                type: Output
            }], didClose: [{
                type: Output
            }], didDestroy: [{
                type: Output
            }], confirm: [{
                type: Output
            }], deny: [{
                type: Output
            }], dismiss: [{
                type: Output
            }] } });
//# sourceMappingURL=data:application/json;base64,