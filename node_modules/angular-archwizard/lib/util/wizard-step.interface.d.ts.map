{"version":3,"file":"wizard-step.interface.d.ts","sources":["wizard-step.interface.d.ts"],"names":[],"mappingssourcesContent":["import { EventEmitter } from '@angular/core';\nimport { WizardStepSymbolDirective } from '../directives/wizard-step-symbol.directive';\nimport { WizardStepTitleDirective } from '../directives/wizard-step-title.directive';\nimport { MovingDirection } from './moving-direction.enum';\nimport { NavigationSymbol } from './navigation-symbol.interface';\n/**\n * Basic functionality every type of wizard step needs to provide\n *\n * @author Marc Arndt\n */\nexport declare abstract class WizardStep {\n    /**\n     * A step title property, which contains the visible header title of the step.\n     * This title is then shown inside the navigation bar.\n     * Compared to `stepTitle` this property can contain any html content and not only plain text\n     */\n    stepTitleTemplate: WizardStepTitleDirective;\n    /**\n     * A step symbol property that, if defined, overrides `navigationSymbol`.\n     * Allows to display arbitrary content as a step symbol instead of plain text.\n     */\n    stepSymbolTemplate: WizardStepSymbolDirective;\n    /**\n     * A step id, unique to the step\n     */\n    stepId: string;\n    /**\n     * A step title property, which contains the visible header title of the step.\n     * This title is only shown inside the navigation bar, if `stepTitleTemplate` is not defined or null.\n     */\n    stepTitle: string;\n    /**\n     * A symbol property, which contains an optional symbol for the step inside the navigation bar.\n     * Takes effect when `stepSymbolTemplate` is not defined or null.\n     */\n    navigationSymbol: NavigationSymbol;\n    /**\n     * A boolean describing if the wizard step is currently selected\n     */\n    selected: boolean;\n    /**\n     * A boolean describing if the wizard step has been completed\n     */\n    completed: boolean;\n    /**\n     * A boolean describing if the wizard step is shown as completed when the wizard is presented to the user\n     *\n     * Users will typically use `CompletedStepDirective` to set this flag\n     */\n    initiallyCompleted: boolean;\n    /**\n     * A boolean describing if the wizard step is being edited after being competed\n     *\n     * This flag can only be true when `selected` is true.\n     */\n    editing: boolean;\n    /**\n     * A boolean describing, if the wizard step should be selected by default, i.e. after the wizard has been initialized as the initial step\n     */\n    defaultSelected: boolean;\n    /**\n     * A boolean describing if the wizard step is an optional step\n     */\n    optional: boolean;\n    /**\n     * A function or boolean deciding, if this step can be entered\n     */\n    canEnter: ((direction: MovingDirection) => boolean) | ((direction: MovingDirection) => Promise<boolean>) | boolean;\n    /**\n     * A function or boolean deciding, if this step can be exited\n     */\n    canExit: ((direction: MovingDirection) => boolean) | ((direction: MovingDirection) => Promise<boolean>) | boolean;\n    /**\n     * This [[EventEmitter]] is called when the step is entered.\n     * The bound method should be used to do initialization work.\n     */\n    stepEnter: EventEmitter<MovingDirection>;\n    /**\n     * This [[EventEmitter]] is called when the step is exited.\n     * The bound method can be used to do cleanup work.\n     */\n    stepExit: EventEmitter<MovingDirection>;\n    /**\n     * Returns true if this wizard step should be visible to the user.\n     * If the step should be visible to the user false is returned, otherwise true\n     */\n    get hidden(): boolean;\n    /**\n     * This method returns true, if this wizard step can be transitioned with a given direction.\n     * Transitioned in this case means either entered or exited, depending on the given `condition` parameter.\n     *\n     * @param condition A condition variable, deciding if the step can be transitioned\n     * @param direction The direction in which this step should be transitioned\n     * @returns A [[Promise]] containing `true`, if this step can transitioned in the given direction\n     * @throws An `Error` is thrown if `condition` is neither a function nor a boolean\n     */\n    private static canTransitionStep;\n    /**\n     * A function called when the step is entered\n     *\n     * @param direction The direction in which the step is entered\n     */\n    enter(direction: MovingDirection): void;\n    /**\n     * A function called when the step is exited\n     *\n     * @param direction The direction in which the step is exited\n     */\n    exit(direction: MovingDirection): void;\n    /**\n     * This method returns true, if this wizard step can be entered from the given direction.\n     * Because this method depends on the value `canEnter`, it will throw an error, if `canEnter` is neither a boolean\n     * nor a function.\n     *\n     * @param direction The direction in which this step should be entered\n     * @returns A [[Promise]] containing `true`, if the step can be entered in the given direction, false otherwise\n     * @throws An `Error` is thrown if `anEnter` is neither a function nor a boolean\n     */\n    canEnterStep(direction: MovingDirection): Promise<boolean>;\n    /**\n     * This method returns true, if this wizard step can be exited into given direction.\n     * Because this method depends on the value `canExit`, it will throw an error, if `canExit` is neither a boolean\n     * nor a function.\n     *\n     * @param direction The direction in which this step should be left\n     * @returns A [[Promise]] containing `true`, if the step can be exited in the given direction, false otherwise\n     * @throws An `Error` is thrown if `canExit` is neither a function nor a boolean\n     */\n    canExitStep(direction: MovingDirection): Promise<boolean>;\n}\n"]}