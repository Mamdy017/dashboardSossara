{"version":3,"file":"wizard.component.d.ts","sources":["wizard.component.d.ts"],"names":[],"mappingssourcesContent":["import { AfterContentInit, QueryList, EventEmitter } from '@angular/core';\nimport { NavigationMode } from '../navigation/navigation-mode.interface';\nimport { WizardStep } from '../util/wizard-step.interface';\nimport { MovingDirection } from '../util/moving-direction.enum';\n/**\n * The `aw-wizard` component defines the root component of a wizard.\n * Through the setting of input parameters for the `aw-wizard` component it's possible to change the location and size\n * of its navigation bar.\n *\n * ### Syntax\n * ```html\n * <aw-wizard [navBarLocation]=\"location of navigation bar\" [navBarLayout]=\"layout of navigation bar\">\n *     ...\n * </aw-wizard>\n * ```\n *\n * ### Example\n *\n * Without completion step:\n *\n * ```html\n * <aw-wizard navBarLocation=\"top\" navBarLayout=\"small\">\n *     <aw-wizard-step>...</aw-wizard-step>\n *     <aw-wizard-step>...</aw-wizard-step>\n * </aw-wizard>\n * ```\n *\n * With completion step:\n *\n * ```html\n * <aw-wizard navBarLocation=\"top\" navBarLayout=\"small\">\n *     <aw-wizard-step>...</aw-wizard-step>\n *     <aw-wizard-step>...</aw-wizard-step>\n *     <aw-wizard-completion-step>...</aw-wizard-completion-step>\n * </aw-wizard>\n * ```\n *\n * @author Marc Arndt\n */\nexport declare class WizardComponent implements AfterContentInit {\n    /**\n     * A QueryList containing all [[WizardStep]]s inside this wizard\n     */\n    wizardStepsQueryList: QueryList<WizardStep>;\n    /**\n     * The location of the navigation bar inside the wizard.\n     * This location can be either top, bottom, left or right\n     */\n    navBarLocation: string;\n    /**\n     * The layout of the navigation bar inside the wizard.\n     * The layout can be either small, large-filled, large-empty or large-symbols\n     */\n    navBarLayout: string;\n    /**\n     * The direction in which the steps inside the navigation bar should be shown.\n     * The direction can be either `left-to-right` or `right-to-left`\n     */\n    navBarDirection: string;\n    /**\n     * The initially selected step, represented by its index\n     * Beware: This initial default is only used if no wizard step has been enhanced with the `selected` directive\n     */\n    get defaultStepIndex(): number;\n    set defaultStepIndex(defaultStepIndex: number);\n    private _defaultStepIndex;\n    /**\n     * True, if the navigation bar shouldn't be used for navigating\n     */\n    disableNavigationBar: boolean;\n    /**\n     * The navigation mode used to navigate inside the wizard\n     *\n     * For outside access, use the [[navigation]] getter.\n     */\n    private _navigation;\n    /**\n     * An array representation of all wizard steps belonging to this model\n     *\n     * For outside access, use the [[wizardSteps]] getter.\n     */\n    private _wizardSteps;\n    /**\n     * The index of the currently visible and selected step inside the wizardSteps QueryList.\n     * If this wizard contains no steps, currentStepIndex is -1\n     *\n     * Note: Do not modify this field directly.  Instead, use navigation methods:\n     * [[goToStep]], [[goToPreviousStep]], [[goToNextStep]].\n     */\n    currentStepIndex: number;\n    /**\n     * Constructor\n     */\n    constructor();\n    /**\n     * Returns true if this wizard uses a horizontal orientation.\n     * The wizard uses a horizontal orientation, iff the navigation bar is shown at the top or bottom of this wizard\n     *\n     * @returns True if this wizard uses a horizontal orientation\n     */\n    get horizontalOrientation(): boolean;\n    /**\n     * Returns true if this wizard uses a vertical orientation.\n     * The wizard uses a vertical orientation, iff the navigation bar is shown at the left or right of this wizard\n     *\n     * @returns True if this wizard uses a vertical orientation\n     */\n    get verticalOrientation(): boolean;\n    /**\n     * Initialization work\n     */\n    ngAfterContentInit(): void;\n    /**\n     * The WizardStep object belonging to the currently visible and selected step.\n     * The currentStep is always the currently selected wizard step.\n     * The currentStep can be either completed, if it was visited earlier,\n     * or not completed, if it is visited for the first time or its state is currently out of date.\n     *\n     * If this wizard contains no steps, currentStep is null\n     */\n    get currentStep(): WizardStep;\n    /**\n     * The completeness of the wizard.\n     * If the wizard has been completed, i.e. all steps are either completed or optional, this value is true, otherwise it is false\n     */\n    get completed(): boolean;\n    /**\n     * An array representation of all wizard steps belonging to this model\n     */\n    get wizardSteps(): WizardStep[];\n    /**\n     * Updates the wizard steps to the new array\n     *\n     * @param wizardSteps The updated wizard steps\n     */\n    private updateWizardSteps;\n    /**\n     * The navigation mode used to navigate inside the wizard\n     */\n    get navigation(): NavigationMode;\n    /**\n     * Updates the navigation mode for this wizard component\n     *\n     * @param navigation The updated navigation mode\n     */\n    set navigation(navigation: NavigationMode);\n    /**\n     * Checks if a given index `stepIndex` is inside the range of possible wizard steps inside this wizard\n     *\n     * @param stepIndex The to be checked index of a step inside this wizard\n     * @returns True if the given `stepIndex` is contained inside this wizard, false otherwise\n     */\n    hasStep(stepIndex: number): boolean;\n    /**\n     * Checks if this wizard has a previous step, compared to the current step\n     *\n     * @returns True if this wizard has a previous step before the current step\n     */\n    hasPreviousStep(): boolean;\n    /**\n     * Checks if this wizard has a next step, compared to the current step\n     *\n     * @returns True if this wizard has a next step after the current step\n     */\n    hasNextStep(): boolean;\n    /**\n     * Checks if this wizard is currently inside its last step\n     *\n     * @returns True if the wizard is currently inside its last step\n     */\n    isLastStep(): boolean;\n    /**\n     * Finds the [[WizardStep]] at the given index `stepIndex`.\n     * If no [[WizardStep]] exists at the given index an Error is thrown\n     *\n     * @param stepIndex The given index\n     * @returns The found [[WizardStep]] at the given index `stepIndex`\n     * @throws An `Error` is thrown, if the given index `stepIndex` doesn't exist\n     */\n    getStepAtIndex(stepIndex: number): WizardStep;\n    /**\n     * Finds the index of the step with the given `stepId`.\n     * If no step with the given `stepId` exists, `-1` is returned\n     *\n     * @param stepId The given step id\n     * @returns The found index of a step with the given step id, or `-1` if no step with the given id is included in the wizard\n     */\n    getIndexOfStepWithId(stepId: string): number;\n    /**\n     * Finds the index of the given [[WizardStep]] `step`.\n     * If the given [[WizardStep]] is not contained inside this wizard, `-1` is returned\n     *\n     * @param step The given [[WizardStep]]\n     * @returns The found index of `step` or `-1` if the step is not included in the wizard\n     */\n    getIndexOfStep(step: WizardStep): number;\n    /**\n     * Calculates the correct [[MovingDirection]] value for a given `destinationStep` compared to the `currentStepIndex`.\n     *\n     * @param destinationStep The given destination step\n     * @returns The calculated [[MovingDirection]]\n     */\n    getMovingDirection(destinationStep: number): MovingDirection;\n    /**\n     * Checks, whether a wizard step, as defined by the given destination index, can be transitioned to.\n     *\n     * This method controls navigation by [[goToStep]], [[goToPreviousStep]], and [[goToNextStep]] directives.\n     * Navigation by navigation bar is governed by [[isNavigable]].\n     *\n     * @param destinationIndex The index of the destination step\n     * @returns A [[Promise]] containing `true`, if the destination step can be transitioned to and false otherwise\n     */\n    canGoToStep(destinationIndex: number): Promise<boolean>;\n    /**\n     * Tries to transition to the wizard step, as denoted by the given destination index.\n     *\n     * Note: You do not have to call [[canGoToStep]] before calling [[goToStep]].\n     * The [[canGoToStep]] method will be called automatically.\n     *\n     * @param destinationIndex The index of the destination wizard step, which should be entered\n     * @param preFinalize An event emitter, to be called before the step has been transitioned\n     * @param postFinalize An event emitter, to be called after the step has been transitioned\n     */\n    goToStep(destinationIndex: number, preFinalize?: EventEmitter<void>, postFinalize?: EventEmitter<void>): void;\n    /**\n     * Tries to transition the wizard to the previous step\n     *\n     * @param preFinalize An event emitter, to be called before the step has been transitioned\n     * @param postFinalize An event emitter, to be called after the step has been transitioned\n     */\n    goToPreviousStep(preFinalize?: EventEmitter<void>, postFinalize?: EventEmitter<void>): void;\n    /**\n     * Tries to transition the wizard to the next step\n     *\n     * @param preFinalize An event emitter, to be called before the step has been transitioned\n     * @param postFinalize An event emitter, to be called after the step has been transitioned\n     */\n    goToNextStep(preFinalize?: EventEmitter<void>, postFinalize?: EventEmitter<void>): void;\n    /**\n     * Checks, whether the wizard step, located at the given index, can be navigated to using the navigation bar.\n     *\n     * @param destinationIndex The index of the destination step\n     * @returns True if the step can be navigated to, false otherwise\n     */\n    isNavigable(destinationIndex: number): boolean;\n    /**\n     * Resets the state of this wizard.\n     */\n    reset(): void;\n}\n"]}