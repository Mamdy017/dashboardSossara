import { Directive, Inject, forwardRef, Input } from '@angular/core';
import { style, animate } from '@angular/animations';
import { NgxMasonryComponent } from './ngx-masonry.component';
import * as i0 from "@angular/core";
import * as i1 from "@angular/animations";
import * as i2 from "./ngx-masonry.component";
export class NgxMasonryDirective {
    constructor(element, builder, parent, renderer) {
        this.element = element;
        this.builder = builder;
        this.parent = parent;
        this.renderer = renderer;
        this.prepend = false;
        this.animations = {
            show: [
                style({ opacity: 0 }),
                animate('400ms ease-in', style({ opacity: 1 })),
            ],
            hide: [
                style({ opacity: '*' }),
                animate('400ms ease-in', style({ opacity: 0 })),
            ]
        };
    }
    ngOnInit() {
        if (this.parent.options.animations !== undefined) {
            this.animations = this.parent.options.animations;
        }
        this.renderer.setStyle(this.element.nativeElement, 'position', 'fixed');
        this.renderer.setStyle(this.element.nativeElement, 'right', '-150vw');
        this.parent.addPendingItem(this);
    }
    ngAfterViewInit() {
        const images = Array.from(this.element.nativeElement.getElementsByTagName('img'));
        this.images = new Set(images);
        if (images.length === 0) {
            setTimeout(() => {
                this.parent.add(this);
            });
        }
        else {
            for (const imageRef of images) {
                // skip image render check if image has `masonryLazy` attribute
                if (imageRef.hasAttribute('masonryLazy')) {
                    this.imageLoaded(imageRef);
                }
                else {
                    this.renderer.listen(imageRef, 'load', _ => {
                        this.imageLoaded(imageRef);
                    });
                    this.renderer.listen(imageRef, 'error', _ => {
                        this.imageLoaded(imageRef);
                    });
                }
            }
        }
    }
    ngOnDestroy() {
        if (this.images && this.images.size === 0 && this.element.nativeElement.parentNode) {
            this.playAnimation(false);
            this.parent.remove(this.element.nativeElement);
        }
    }
    imageLoaded(image) {
        this.images.delete(image);
        if (this.images.size === 0) {
            this.parent.add(this);
        }
    }
    playAnimation(show) {
        const metadata = show ? this.animations.show : this.animations.hide;
        if (metadata) {
            const player = this.builder.build(metadata).create(this.element.nativeElement);
            player.play();
        }
    }
}
NgxMasonryDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "14.2.7", ngImport: i0, type: NgxMasonryDirective, deps: [{ token: i0.ElementRef }, { token: i1.AnimationBuilder }, { token: forwardRef(() => NgxMasonryComponent) }, { token: i0.Renderer2 }], target: i0.ɵɵFactoryTarget.Directive });
NgxMasonryDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "14.0.0", version: "14.2.7", type: NgxMasonryDirective, selector: "[ngxMasonryItem], ngxMasonryItem", inputs: { prepend: "prepend" }, ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "14.2.7", ngImport: i0, type: NgxMasonryDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: '[ngxMasonryItem], ngxMasonryItem'
                }]
        }], ctorParameters: function () { return [{ type: i0.ElementRef }, { type: i1.AnimationBuilder }, { type: i2.NgxMasonryComponent, decorators: [{
                    type: Inject,
                    args: [forwardRef(() => NgxMasonryComponent)]
                }] }, { type: i0.Renderer2 }]; }, propDecorators: { prepend: [{
                type: Input
            }] } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibmd4LW1hc29ucnkuZGlyZWN0aXZlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vcHJvamVjdHMvbmd4LW1hc29ucnkvc3JjL2xpYi9uZ3gtbWFzb25yeS5kaXJlY3RpdmUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLFNBQVMsRUFBRSxNQUFNLEVBQWMsVUFBVSxFQUErQyxLQUFLLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDOUgsT0FBTyxFQUFFLEtBQUssRUFBRSxPQUFPLEVBQW9CLE1BQU0scUJBQXFCLENBQUM7QUFFdkUsT0FBTyxFQUFFLG1CQUFtQixFQUFFLE1BQU0seUJBQXlCLENBQUM7Ozs7QUFNOUQsTUFBTSxPQUFPLG1CQUFtQjtJQWU5QixZQUNTLE9BQW1CLEVBQ2xCLE9BQXlCLEVBQ3NCLE1BQTJCLEVBQzFFLFFBQW1CO1FBSHBCLFlBQU8sR0FBUCxPQUFPLENBQVk7UUFDbEIsWUFBTyxHQUFQLE9BQU8sQ0FBa0I7UUFDc0IsV0FBTSxHQUFOLE1BQU0sQ0FBcUI7UUFDMUUsYUFBUSxHQUFSLFFBQVEsQ0FBVztRQWxCcEIsWUFBTyxHQUFHLEtBQUssQ0FBQztRQUdqQixlQUFVLEdBQXlCO1lBQ3pDLElBQUksRUFBRTtnQkFDSixLQUFLLENBQUMsRUFBQyxPQUFPLEVBQUUsQ0FBQyxFQUFDLENBQUM7Z0JBQ25CLE9BQU8sQ0FBQyxlQUFlLEVBQUUsS0FBSyxDQUFDLEVBQUMsT0FBTyxFQUFFLENBQUMsRUFBQyxDQUFDLENBQUM7YUFDOUM7WUFDRCxJQUFJLEVBQUU7Z0JBQ0osS0FBSyxDQUFDLEVBQUMsT0FBTyxFQUFFLEdBQUcsRUFBQyxDQUFDO2dCQUNyQixPQUFPLENBQUMsZUFBZSxFQUFFLEtBQUssQ0FBQyxFQUFDLE9BQU8sRUFBRSxDQUFDLEVBQUMsQ0FBQyxDQUFDO2FBQzlDO1NBQ0YsQ0FBQztJQU9DLENBQUM7SUFFSixRQUFRO1FBQ04sSUFBSSxJQUFJLENBQUMsTUFBTSxDQUFDLE9BQU8sQ0FBQyxVQUFVLEtBQUssU0FBUyxFQUFFO1lBQ2hELElBQUksQ0FBQyxVQUFVLEdBQUcsSUFBSSxDQUFDLE1BQU0sQ0FBQyxPQUFPLENBQUMsVUFBVSxDQUFDO1NBQ2xEO1FBQ0QsSUFBSSxDQUFDLFFBQVEsQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxhQUFhLEVBQUUsVUFBVSxFQUFFLE9BQU8sQ0FBQyxDQUFDO1FBQ3hFLElBQUksQ0FBQyxRQUFRLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsYUFBYSxFQUFFLE9BQU8sRUFBRSxRQUFRLENBQUMsQ0FBQztRQUN0RSxJQUFJLENBQUMsTUFBTSxDQUFDLGNBQWMsQ0FBQyxJQUFJLENBQUMsQ0FBQztJQUNuQyxDQUFDO0lBRUQsZUFBZTtRQUNiLE1BQU0sTUFBTSxHQUF1QixLQUFLLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsYUFBYSxDQUFDLG9CQUFvQixDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUM7UUFDdEcsSUFBSSxDQUFDLE1BQU0sR0FBRyxJQUFJLEdBQUcsQ0FBQyxNQUFNLENBQUMsQ0FBQztRQUM5QixJQUFJLE1BQU0sQ0FBQyxNQUFNLEtBQUssQ0FBQyxFQUFFO1lBQ3ZCLFVBQVUsQ0FBQyxHQUFHLEVBQUU7Z0JBQ2QsSUFBSSxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLENBQUM7WUFDeEIsQ0FBQyxDQUFDLENBQUM7U0FDSjthQUFNO1lBQ0wsS0FBSyxNQUFNLFFBQVEsSUFBSSxNQUFNLEVBQUU7Z0JBQzdCLCtEQUErRDtnQkFDL0QsSUFBSSxRQUFRLENBQUMsWUFBWSxDQUFDLGFBQWEsQ0FBQyxFQUFFO29CQUN0QyxJQUFJLENBQUMsV0FBVyxDQUFDLFFBQVEsQ0FBQyxDQUFDO2lCQUM5QjtxQkFBTTtvQkFDTCxJQUFJLENBQUMsUUFBUSxDQUFDLE1BQU0sQ0FBQyxRQUFRLEVBQUUsTUFBTSxFQUFFLENBQUMsQ0FBQyxFQUFFO3dCQUN6QyxJQUFJLENBQUMsV0FBVyxDQUFDLFFBQVEsQ0FBQyxDQUFDO29CQUM3QixDQUFDLENBQUMsQ0FBQztvQkFDSCxJQUFJLENBQUMsUUFBUSxDQUFDLE1BQU0sQ0FBQyxRQUFRLEVBQUUsT0FBTyxFQUFFLENBQUMsQ0FBQyxFQUFFO3dCQUMxQyxJQUFJLENBQUMsV0FBVyxDQUFDLFFBQVEsQ0FBQyxDQUFDO29CQUM3QixDQUFDLENBQUMsQ0FBQztpQkFDSjthQUNGO1NBQ0Y7SUFDSCxDQUFDO0lBRUQsV0FBVztRQUNULElBQUksSUFBSSxDQUFDLE1BQU0sSUFBSSxJQUFJLENBQUMsTUFBTSxDQUFDLElBQUksS0FBSyxDQUFDLElBQUksSUFBSSxDQUFDLE9BQU8sQ0FBQyxhQUFhLENBQUMsVUFBVSxFQUFFO1lBQ2xGLElBQUksQ0FBQyxhQUFhLENBQUMsS0FBSyxDQUFDLENBQUM7WUFDMUIsSUFBSSxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxhQUFhLENBQUMsQ0FBQztTQUNoRDtJQUNILENBQUM7SUFFTyxXQUFXLENBQUMsS0FBd0I7UUFDMUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDLENBQUM7UUFDMUIsSUFBSSxJQUFJLENBQUMsTUFBTSxDQUFDLElBQUksS0FBSyxDQUFDLEVBQUU7WUFDMUIsSUFBSSxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLENBQUM7U0FDdkI7SUFDSCxDQUFDO0lBRU0sYUFBYSxDQUFDLElBQWE7UUFDaEMsTUFBTSxRQUFRLEdBQUcsSUFBSSxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsVUFBVSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLFVBQVUsQ0FBQyxJQUFJLENBQUM7UUFDcEUsSUFBSSxRQUFRLEVBQUU7WUFDWixNQUFNLE1BQU0sR0FBRyxJQUFJLENBQUMsT0FBTyxDQUFDLEtBQUssQ0FBQyxRQUFRLENBQUMsQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxhQUFhLENBQUMsQ0FBQztZQUMvRSxNQUFNLENBQUMsSUFBSSxFQUFFLENBQUM7U0FDZjtJQUNILENBQUM7O2dIQTNFVSxtQkFBbUIsNEVBa0JwQixVQUFVLENBQUMsR0FBRyxFQUFFLENBQUMsbUJBQW1CLENBQUM7b0dBbEJwQyxtQkFBbUI7MkZBQW5CLG1CQUFtQjtrQkFIL0IsU0FBUzttQkFBQztvQkFDVCxRQUFRLEVBQUUsa0NBQWtDO2lCQUM3Qzs7MEJBbUJJLE1BQU07MkJBQUMsVUFBVSxDQUFDLEdBQUcsRUFBRSxDQUFDLG1CQUFtQixDQUFDO29FQWpCdEMsT0FBTztzQkFBZixLQUFLIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgRGlyZWN0aXZlLCBJbmplY3QsIEVsZW1lbnRSZWYsIGZvcndhcmRSZWYsIE9uRGVzdHJveSwgQWZ0ZXJWaWV3SW5pdCwgUmVuZGVyZXIyLCBPbkluaXQsIElucHV0IH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBzdHlsZSwgYW5pbWF0ZSwgQW5pbWF0aW9uQnVpbGRlciB9IGZyb20gJ0Bhbmd1bGFyL2FuaW1hdGlvbnMnO1xuXG5pbXBvcnQgeyBOZ3hNYXNvbnJ5Q29tcG9uZW50IH0gZnJvbSAnLi9uZ3gtbWFzb25yeS5jb21wb25lbnQnO1xuaW1wb3J0IHsgTmd4TWFzb25yeUFuaW1hdGlvbnMgfSBmcm9tICcuL25neC1tYXNvbnJ5LW9wdGlvbnMnO1xuXG5ARGlyZWN0aXZlKHtcbiAgc2VsZWN0b3I6ICdbbmd4TWFzb25yeUl0ZW1dLCBuZ3hNYXNvbnJ5SXRlbSdcbn0pXG5leHBvcnQgY2xhc3MgTmd4TWFzb25yeURpcmVjdGl2ZSBpbXBsZW1lbnRzIE9uSW5pdCwgT25EZXN0cm95LCBBZnRlclZpZXdJbml0IHtcbiAgQElucHV0KCkgcHJlcGVuZCA9IGZhbHNlO1xuXG4gIHB1YmxpYyBpbWFnZXM6IFNldDxIVE1MSW1hZ2VFbGVtZW50PjtcbiAgcHJpdmF0ZSBhbmltYXRpb25zOiBOZ3hNYXNvbnJ5QW5pbWF0aW9ucyA9IHtcbiAgICBzaG93OiBbXG4gICAgICBzdHlsZSh7b3BhY2l0eTogMH0pLFxuICAgICAgYW5pbWF0ZSgnNDAwbXMgZWFzZS1pbicsIHN0eWxlKHtvcGFjaXR5OiAxfSkpLFxuICAgIF0sXG4gICAgaGlkZTogW1xuICAgICAgc3R5bGUoe29wYWNpdHk6ICcqJ30pLFxuICAgICAgYW5pbWF0ZSgnNDAwbXMgZWFzZS1pbicsIHN0eWxlKHtvcGFjaXR5OiAwfSkpLFxuICAgIF1cbiAgfTtcblxuICBjb25zdHJ1Y3RvcihcbiAgICBwdWJsaWMgZWxlbWVudDogRWxlbWVudFJlZixcbiAgICBwcml2YXRlIGJ1aWxkZXI6IEFuaW1hdGlvbkJ1aWxkZXIsXG4gICAgQEluamVjdChmb3J3YXJkUmVmKCgpID0+IE5neE1hc29ucnlDb21wb25lbnQpKSBwcml2YXRlIHBhcmVudDogTmd4TWFzb25yeUNvbXBvbmVudCxcbiAgICBwcml2YXRlIHJlbmRlcmVyOiBSZW5kZXJlcjIsXG4gICkge31cblxuICBuZ09uSW5pdCgpIHtcbiAgICBpZiAodGhpcy5wYXJlbnQub3B0aW9ucy5hbmltYXRpb25zICE9PSB1bmRlZmluZWQpIHtcbiAgICAgIHRoaXMuYW5pbWF0aW9ucyA9IHRoaXMucGFyZW50Lm9wdGlvbnMuYW5pbWF0aW9ucztcbiAgICB9XG4gICAgdGhpcy5yZW5kZXJlci5zZXRTdHlsZSh0aGlzLmVsZW1lbnQubmF0aXZlRWxlbWVudCwgJ3Bvc2l0aW9uJywgJ2ZpeGVkJyk7XG4gICAgdGhpcy5yZW5kZXJlci5zZXRTdHlsZSh0aGlzLmVsZW1lbnQubmF0aXZlRWxlbWVudCwgJ3JpZ2h0JywgJy0xNTB2dycpO1xuICAgIHRoaXMucGFyZW50LmFkZFBlbmRpbmdJdGVtKHRoaXMpO1xuICB9XG5cbiAgbmdBZnRlclZpZXdJbml0KCkge1xuICAgIGNvbnN0IGltYWdlczogSFRNTEltYWdlRWxlbWVudFtdID0gQXJyYXkuZnJvbSh0aGlzLmVsZW1lbnQubmF0aXZlRWxlbWVudC5nZXRFbGVtZW50c0J5VGFnTmFtZSgnaW1nJykpO1xuICAgIHRoaXMuaW1hZ2VzID0gbmV3IFNldChpbWFnZXMpO1xuICAgIGlmIChpbWFnZXMubGVuZ3RoID09PSAwKSB7XG4gICAgICBzZXRUaW1lb3V0KCgpID0+IHtcbiAgICAgICAgdGhpcy5wYXJlbnQuYWRkKHRoaXMpO1xuICAgICAgfSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGZvciAoY29uc3QgaW1hZ2VSZWYgb2YgaW1hZ2VzKSB7XG4gICAgICAgIC8vIHNraXAgaW1hZ2UgcmVuZGVyIGNoZWNrIGlmIGltYWdlIGhhcyBgbWFzb25yeUxhenlgIGF0dHJpYnV0ZVxuICAgICAgICBpZiAoaW1hZ2VSZWYuaGFzQXR0cmlidXRlKCdtYXNvbnJ5TGF6eScpKSB7XG4gICAgICAgICAgICB0aGlzLmltYWdlTG9hZGVkKGltYWdlUmVmKTtcbiAgICAgICAgfSBlbHNlIHsgXG4gICAgICAgICAgdGhpcy5yZW5kZXJlci5saXN0ZW4oaW1hZ2VSZWYsICdsb2FkJywgXyA9PiB7XG4gICAgICAgICAgICB0aGlzLmltYWdlTG9hZGVkKGltYWdlUmVmKTtcbiAgICAgICAgICB9KTtcbiAgICAgICAgICB0aGlzLnJlbmRlcmVyLmxpc3RlbihpbWFnZVJlZiwgJ2Vycm9yJywgXyA9PiB7XG4gICAgICAgICAgICB0aGlzLmltYWdlTG9hZGVkKGltYWdlUmVmKTtcbiAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIG5nT25EZXN0cm95KCkge1xuICAgIGlmICh0aGlzLmltYWdlcyAmJiB0aGlzLmltYWdlcy5zaXplID09PSAwICYmIHRoaXMuZWxlbWVudC5uYXRpdmVFbGVtZW50LnBhcmVudE5vZGUpIHtcbiAgICAgIHRoaXMucGxheUFuaW1hdGlvbihmYWxzZSk7XG4gICAgICB0aGlzLnBhcmVudC5yZW1vdmUodGhpcy5lbGVtZW50Lm5hdGl2ZUVsZW1lbnQpO1xuICAgIH1cbiAgfVxuXG4gIHByaXZhdGUgaW1hZ2VMb2FkZWQoaW1hZ2U/OiBIVE1MSW1hZ2VFbGVtZW50KSB7XG4gICAgdGhpcy5pbWFnZXMuZGVsZXRlKGltYWdlKTtcbiAgICBpZiAodGhpcy5pbWFnZXMuc2l6ZSA9PT0gMCkge1xuICAgICAgdGhpcy5wYXJlbnQuYWRkKHRoaXMpO1xuICAgIH1cbiAgfVxuXG4gIHB1YmxpYyBwbGF5QW5pbWF0aW9uKHNob3c6IGJvb2xlYW4pIHtcbiAgICBjb25zdCBtZXRhZGF0YSA9IHNob3cgPyB0aGlzLmFuaW1hdGlvbnMuc2hvdyA6IHRoaXMuYW5pbWF0aW9ucy5oaWRlO1xuICAgIGlmIChtZXRhZGF0YSkge1xuICAgICAgY29uc3QgcGxheWVyID0gdGhpcy5idWlsZGVyLmJ1aWxkKG1ldGFkYXRhKS5jcmVhdGUodGhpcy5lbGVtZW50Lm5hdGl2ZUVsZW1lbnQpO1xuICAgICAgcGxheWVyLnBsYXkoKTtcbiAgICB9XG4gIH1cbn1cbiJdfQ==