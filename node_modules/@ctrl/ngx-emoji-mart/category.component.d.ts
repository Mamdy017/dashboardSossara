import { Emoji, EmojiService } from '@ctrl/ngx-emoji-mart/ngx-emoji';
import { AfterViewInit, ChangeDetectorRef, ElementRef, OnChanges, OnInit, SimpleChanges } from '@angular/core';
import { Observable } from 'rxjs';
import { EmojiFrequentlyService } from './emoji-frequently.service';
import * as i0 from "@angular/core";
export declare class CategoryComponent implements OnChanges, OnInit, AfterViewInit {
    ref: ChangeDetectorRef;
    private emojiService;
    private frequently;
    emojis: any[] | null;
    hasStickyPosition: boolean;
    name: string;
    perLine: number;
    totalFrequentLines: number;
    recent: string[];
    custom: any[];
    i18n: any;
    id: any;
    hideObsolete: boolean;
    notFoundEmoji?: string;
    virtualize: boolean;
    virtualizeOffset: number;
    emojiIsNative?: Emoji['isNative'];
    emojiSkin: Emoji['skin'];
    emojiSize: Emoji['size'];
    emojiSet: Emoji['set'];
    emojiSheetSize: Emoji['sheetSize'];
    emojiForceSize: Emoji['forceSize'];
    emojiTooltip: Emoji['tooltip'];
    emojiBackgroundImageFn?: Emoji['backgroundImageFn'];
    emojiImageUrlFn?: Emoji['imageUrlFn'];
    emojiUseButton?: boolean;
    emojiOver: Emoji['emojiOver'];
    emojiLeave: Emoji['emojiLeave'];
    emojiClick: Emoji['emojiClick'];
    container: ElementRef;
    label: ElementRef;
    containerStyles: any;
    emojisToDisplay: any[];
    private filteredEmojisSubject;
    filteredEmojis$: Observable<any[] | null | undefined>;
    labelStyles: any;
    labelSpanStyles: any;
    margin: number;
    minMargin: number;
    maxMargin: number;
    top: number;
    rows: number;
    constructor(ref: ChangeDetectorRef, emojiService: EmojiService, frequently: EmojiFrequentlyService);
    ngOnInit(): void;
    ngOnChanges(changes: SimpleChanges): void;
    ngAfterViewInit(): void;
    get noEmojiToDisplay(): boolean;
    memoizeSize(): void;
    handleScroll(scrollTop: number): boolean;
    updateRecentEmojis(): void;
    updateDisplay(display: 'none' | 'block'): void;
    trackById(index: number, item: any): any;
    private filterEmojis;
    static ɵfac: i0.ɵɵFactoryDeclaration<CategoryComponent, never>;
    static ɵcmp: i0.ɵɵComponentDeclaration<CategoryComponent, "emoji-category", never, { "emojis": "emojis"; "hasStickyPosition": "hasStickyPosition"; "name": "name"; "perLine": "perLine"; "totalFrequentLines": "totalFrequentLines"; "recent": "recent"; "custom": "custom"; "i18n": "i18n"; "id": "id"; "hideObsolete": "hideObsolete"; "notFoundEmoji": "notFoundEmoji"; "virtualize": "virtualize"; "virtualizeOffset": "virtualizeOffset"; "emojiIsNative": "emojiIsNative"; "emojiSkin": "emojiSkin"; "emojiSize": "emojiSize"; "emojiSet": "emojiSet"; "emojiSheetSize": "emojiSheetSize"; "emojiForceSize": "emojiForceSize"; "emojiTooltip": "emojiTooltip"; "emojiBackgroundImageFn": "emojiBackgroundImageFn"; "emojiImageUrlFn": "emojiImageUrlFn"; "emojiUseButton": "emojiUseButton"; }, { "emojiOver": "emojiOver"; "emojiLeave": "emojiLeave"; "emojiClick": "emojiClick"; }, never, never, false>;
}
