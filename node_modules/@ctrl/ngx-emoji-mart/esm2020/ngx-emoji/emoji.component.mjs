import { ChangeDetectionStrategy, Component, EventEmitter, Input, Output, } from '@angular/core';
import { DEFAULT_BACKGROUNDFN } from './emoji.service';
import * as i0 from "@angular/core";
import * as i1 from "./emoji.service";
import * as i2 from "@angular/common";
export class EmojiComponent {
    constructor(emojiService) {
        this.emojiService = emojiService;
        this.skin = 1;
        this.set = 'apple';
        this.sheetSize = 64;
        /** Renders the native unicode emoji */
        this.isNative = false;
        this.forceSize = false;
        this.tooltip = false;
        this.size = 24;
        this.emoji = '';
        this.hideObsolete = false;
        this.emojiOver = new EventEmitter();
        this.emojiLeave = new EventEmitter();
        this.emojiClick = new EventEmitter();
        this.title = undefined;
        this.label = '';
        this.custom = false;
        this.isVisible = true;
        // TODO: replace 4.0.3 w/ dynamic get verison from emoji-datasource in package.json
        this.backgroundImageFn = DEFAULT_BACKGROUNDFN;
    }
    ngOnChanges() {
        if (!this.emoji) {
            return (this.isVisible = false);
        }
        const data = this.getData();
        if (!data) {
            return (this.isVisible = false);
        }
        // const children = this.children;
        this.unified = data.native || null;
        if (data.custom) {
            this.custom = data.custom;
        }
        if (!data.unified && !data.custom) {
            return (this.isVisible = false);
        }
        if (this.tooltip) {
            this.title = data.shortNames[0];
        }
        if (data.obsoletedBy && this.hideObsolete) {
            return (this.isVisible = false);
        }
        this.label = [data.native].concat(data.shortNames).filter(Boolean).join(', ');
        if (this.isNative && data.unified && data.native) {
            // hide older emoji before the split into gendered emoji
            this.style = { fontSize: `${this.size}px` };
            if (this.forceSize) {
                this.style.display = 'inline-block';
                this.style.width = `${this.size}px`;
                this.style.height = `${this.size}px`;
                this.style['word-break'] = 'keep-all';
            }
        }
        else if (data.custom) {
            this.style = {
                width: `${this.size}px`,
                height: `${this.size}px`,
                display: 'inline-block',
            };
            if (data.spriteUrl && this.sheetRows && this.sheetColumns) {
                this.style = {
                    ...this.style,
                    backgroundImage: `url(${data.spriteUrl})`,
                    backgroundSize: `${100 * this.sheetColumns}% ${100 * this.sheetRows}%`,
                    backgroundPosition: this.emojiService.getSpritePosition(data.sheet, this.sheetColumns),
                };
            }
            else {
                this.style = {
                    ...this.style,
                    backgroundImage: `url(${data.imageUrl})`,
                    backgroundSize: 'contain',
                };
            }
        }
        else {
            if (data.hidden.length && data.hidden.includes(this.set)) {
                if (this.fallback) {
                    this.style = { fontSize: `${this.size}px` };
                    this.unified = this.fallback(data, this);
                }
                else {
                    return (this.isVisible = false);
                }
            }
            else {
                this.style = this.emojiService.emojiSpriteStyles(data.sheet, this.set, this.size, this.sheetSize, this.sheetRows, this.backgroundImageFn, this.sheetColumns, this.imageUrlFn?.(this.getData()));
            }
        }
        return (this.isVisible = true);
    }
    getData() {
        return this.emojiService.getData(this.emoji, this.skin, this.set);
    }
    getSanitizedData() {
        return this.emojiService.getSanitizedData(this.emoji, this.skin, this.set);
    }
    handleClick($event) {
        const emoji = this.getSanitizedData();
        this.emojiClick.emit({ emoji, $event });
    }
    handleOver($event) {
        const emoji = this.getSanitizedData();
        this.emojiOver.emit({ emoji, $event });
    }
    handleLeave($event) {
        const emoji = this.getSanitizedData();
        this.emojiLeave.emit({ emoji, $event });
    }
}
EmojiComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "14.2.9", ngImport: i0, type: EmojiComponent, deps: [{ token: i1.EmojiService }], target: i0.ɵɵFactoryTarget.Component });
EmojiComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "14.2.9", type: EmojiComponent, selector: "ngx-emoji", inputs: { skin: "skin", set: "set", sheetSize: "sheetSize", isNative: "isNative", forceSize: "forceSize", tooltip: "tooltip", size: "size", emoji: "emoji", fallback: "fallback", hideObsolete: "hideObsolete", sheetRows: "sheetRows", sheetColumns: "sheetColumns", useButton: "useButton", backgroundImageFn: "backgroundImageFn", imageUrlFn: "imageUrlFn" }, outputs: { emojiOver: "emojiOver", emojiLeave: "emojiLeave", emojiClick: "emojiClick" }, usesOnChanges: true, ngImport: i0, template: `
    <button
      *ngIf="useButton && isVisible"
      type="button"
      (click)="handleClick($event)"
      (mouseenter)="handleOver($event)"
      (mouseleave)="handleLeave($event)"
      [attr.title]="title"
      [attr.aria-label]="label"
      class="emoji-mart-emoji"
      [class.emoji-mart-emoji-native]="isNative"
      [class.emoji-mart-emoji-custom]="custom"
    >
      <span [ngStyle]="style">
        <ng-template [ngIf]="isNative">{{ unified }}</ng-template>
        <ng-content></ng-content>
      </span>
    </button>

    <span
      *ngIf="!useButton && isVisible"
      (click)="handleClick($event)"
      (mouseenter)="handleOver($event)"
      (mouseleave)="handleLeave($event)"
      [attr.title]="title"
      [attr.aria-label]="label"
      class="emoji-mart-emoji"
      [class.emoji-mart-emoji-native]="isNative"
      [class.emoji-mart-emoji-custom]="custom"
    >
      <span [ngStyle]="style">
        <ng-template [ngIf]="isNative">{{ unified }}</ng-template>
        <ng-content></ng-content>
      </span>
    </span>
  `, isInline: true, dependencies: [{ kind: "directive", type: i2.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { kind: "directive", type: i2.NgStyle, selector: "[ngStyle]", inputs: ["ngStyle"] }], changeDetection: i0.ChangeDetectionStrategy.OnPush });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "14.2.9", ngImport: i0, type: EmojiComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'ngx-emoji',
                    template: `
    <button
      *ngIf="useButton && isVisible"
      type="button"
      (click)="handleClick($event)"
      (mouseenter)="handleOver($event)"
      (mouseleave)="handleLeave($event)"
      [attr.title]="title"
      [attr.aria-label]="label"
      class="emoji-mart-emoji"
      [class.emoji-mart-emoji-native]="isNative"
      [class.emoji-mart-emoji-custom]="custom"
    >
      <span [ngStyle]="style">
        <ng-template [ngIf]="isNative">{{ unified }}</ng-template>
        <ng-content></ng-content>
      </span>
    </button>

    <span
      *ngIf="!useButton && isVisible"
      (click)="handleClick($event)"
      (mouseenter)="handleOver($event)"
      (mouseleave)="handleLeave($event)"
      [attr.title]="title"
      [attr.aria-label]="label"
      class="emoji-mart-emoji"
      [class.emoji-mart-emoji-native]="isNative"
      [class.emoji-mart-emoji-custom]="custom"
    >
      <span [ngStyle]="style">
        <ng-template [ngIf]="isNative">{{ unified }}</ng-template>
        <ng-content></ng-content>
      </span>
    </span>
  `,
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    preserveWhitespaces: false,
                }]
        }], ctorParameters: function () { return [{ type: i1.EmojiService }]; }, propDecorators: { skin: [{
                type: Input
            }], set: [{
                type: Input
            }], sheetSize: [{
                type: Input
            }], isNative: [{
                type: Input
            }], forceSize: [{
                type: Input
            }], tooltip: [{
                type: Input
            }], size: [{
                type: Input
            }], emoji: [{
                type: Input
            }], fallback: [{
                type: Input
            }], hideObsolete: [{
                type: Input
            }], sheetRows: [{
                type: Input
            }], sheetColumns: [{
                type: Input
            }], useButton: [{
                type: Input
            }], emojiOver: [{
                type: Output
            }], emojiLeave: [{
                type: Output
            }], emojiClick: [{
                type: Output
            }], backgroundImageFn: [{
                type: Input
            }], imageUrlFn: [{
                type: Input
            }] } });
//# sourceMappingURL=data:application/json;base64,