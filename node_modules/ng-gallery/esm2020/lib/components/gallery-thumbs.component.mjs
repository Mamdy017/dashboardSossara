import { Component, Input, Output, ViewChild, HostBinding, EventEmitter, ChangeDetectionStrategy } from '@angular/core';
import { BehaviorSubject } from 'rxjs';
import { map, tap } from 'rxjs/operators';
import { ThumbnailsPosition, ThumbnailsMode, ThumbnailsView } from '../models/constants';
import * as i0 from "@angular/core";
import * as i1 from "@angular/common";
import * as i2 from "./gallery-thumb.component";
import * as i3 from "../directives/tap-click";
export class GalleryThumbsComponent {
    constructor(_el, _zone) {
        this._el = _el;
        this._zone = _zone;
        /** Sliding worker */
        this._slidingWorker$ = new BehaviorSubject({ value: 0, instant: true });
        /** Current slider position in free sliding mode */
        this._freeModeCurrentOffset = 0;
        /** Thumbnails view enum */
        this.thumbnailsView = ThumbnailsView;
        /** Stream that emits when the active item should change */
        this.action = new EventEmitter();
        /** Stream that emits when thumb is clicked */
        this.thumbClick = new EventEmitter();
        /** Stream that emits when an error occurs */
        this.error = new EventEmitter();
        // Activate sliding worker
        this.sliderState$ = this._slidingWorker$.pipe(map((state) => ({
            style: this.getSliderStyles(state),
            instant: state.instant
        })));
    }
    get slider() {
        return this.sliderEl.nativeElement;
    }
    ngOnChanges(changes) {
        // Refresh the slider
        if (changes.state) {
            this.updateSlider({ value: 0, instant: changes.state.firstChange });
        }
        else {
            this.updateSlider({ value: 0, instant: true });
        }
        // Enable/Disable gestures on changes
        if (changes.config && changes.config.currentValue?.gestures !== changes.config.previousValue?.gestures) {
            if (this.config.gestures) {
                this.activateGestures();
            }
            else {
                this.deactivateGestures();
            }
        }
        this._freeModeCurrentOffset = 0;
    }
    ngOnInit() {
        this._zone.runOutsideAngular(() => {
            // Set styles manually avoid triggering change detection on dragging
            this._sliderStateSub$ = this.sliderState$.pipe(tap((state) => {
                this.slider.style.transform = state.style.transform;
                this.slider.style.height = state.style.height;
                this.slider.style.width = state.style.width;
                this.slider.classList.toggle('g-no-transition', state.instant);
            })).subscribe();
        });
    }
    ngOnDestroy() {
        this._hammer?.destroy();
        this._sliderStateSub$?.unsubscribe();
        this._slidingWorker$.complete();
    }
    activateGestures() {
        if (!this.config.disableThumb && typeof Hammer !== 'undefined') {
            let direction;
            let touchAction = 'compute';
            switch (this.config.thumbPosition) {
                case ThumbnailsPosition.Right:
                case ThumbnailsPosition.Left:
                    direction = Hammer.DIRECTION_VERTICAL;
                    if (this.config.reserveGesturesAction) {
                        touchAction = 'pan-y';
                    }
                    break;
                case ThumbnailsPosition.Top:
                case ThumbnailsPosition.Bottom:
                    direction = Hammer.DIRECTION_HORIZONTAL;
                    if (this.config.reserveGesturesAction) {
                        touchAction = 'pan-x';
                    }
                    break;
            }
            // Activate gestures
            this._hammer = new Hammer(this._el.nativeElement);
            this._hammer.get('pan').set({ direction });
            this._zone.runOutsideAngular(() => {
                // Move the slider
                switch (this.config.thumbMode) {
                    case ThumbnailsMode.Strict:
                        this._hammer.on('pan', (e) => this.strictMode(e));
                        break;
                    case ThumbnailsMode.Free:
                        this._hammer.on('pan', (e) => this.freeMode(e));
                }
            });
        }
    }
    deactivateGestures() {
        this._hammer?.destroy();
    }
    /**
     * Sliding strict mode
     */
    strictMode(e) {
        switch (this.config.thumbPosition) {
            case ThumbnailsPosition.Right:
            case ThumbnailsPosition.Left:
                if (e.isFinal) {
                    this.updateSlider({ value: 0, instant: false });
                    this.verticalPan(e);
                }
                else {
                    this.updateSlider({ value: e.deltaY, instant: true });
                }
                break;
            case ThumbnailsPosition.Top:
            case ThumbnailsPosition.Bottom:
                if (e.isFinal) {
                    this.updateSlider({ value: 0, instant: false });
                    this.horizontalPan(e);
                }
                else {
                    this.updateSlider({ value: e.deltaX, instant: true });
                }
        }
    }
    /**
     * Sliding free mode
     */
    freeMode(e) {
        switch (this.config.thumbPosition) {
            case ThumbnailsPosition.Right:
            case ThumbnailsPosition.Left:
                this.updateSlider({ value: this._freeModeCurrentOffset + e.deltaY, instant: true });
                if (e.isFinal) {
                    if (this.minFreeScrollExceeded(e.deltaY, this.config.thumbWidth, this.config.thumbHeight)) {
                        this._freeModeCurrentOffset = -(this.state.items.length - 1 - this.state.currIndex) * this.config.thumbHeight;
                    }
                    else if (this.maxFreeScrollExceeded(e.deltaY, this.config.thumbHeight, this.config.thumbWidth)) {
                        this._freeModeCurrentOffset = this.state.currIndex * this.config.thumbHeight;
                    }
                    else {
                        this._freeModeCurrentOffset += e.deltaY;
                    }
                    this.updateSlider({ value: this._freeModeCurrentOffset, instant: false });
                }
                break;
            case ThumbnailsPosition.Top:
            case ThumbnailsPosition.Bottom:
                this.updateSlider({ value: this._freeModeCurrentOffset + e.deltaX, instant: true });
                if (e.isFinal) {
                    if (this.minFreeScrollExceeded(e.deltaX, this.config.thumbHeight, this.config.thumbWidth)) {
                        this._freeModeCurrentOffset = -(this.state.items.length - 1 - this.state.currIndex) * this.config.thumbWidth;
                    }
                    else if (this.maxFreeScrollExceeded(e.deltaX, this.config.thumbWidth, this.config.thumbHeight)) {
                        this._freeModeCurrentOffset = this.state.currIndex * this.config.thumbWidth;
                    }
                    else {
                        this._freeModeCurrentOffset += e.deltaX;
                    }
                    this.updateSlider({ value: this._freeModeCurrentOffset, instant: false });
                }
        }
    }
    /**
     * Check if the minimum free scroll is exceeded (used in Bottom, Left directions)
     */
    minFreeScrollExceeded(delta, width, height) {
        return -(this._freeModeCurrentOffset + delta - width / 2) > (this.state.items.length - this.state.currIndex) * height;
    }
    /**
     * Check if the maximum free scroll is exceeded (used in Top, Right directions)
     */
    maxFreeScrollExceeded(delta, width, height) {
        return this._freeModeCurrentOffset + delta > (this.state.currIndex * width) + (height / 2);
    }
    /**
     * Convert sliding state to styles
     */
    getSliderStyles(state) {
        const currIndex = this.state.currIndex;
        const itemsLength = this.state.items.length;
        const { thumbWidth, thumbHeight } = this.config;
        let value;
        switch (this.config.thumbPosition) {
            case ThumbnailsPosition.Top:
            case ThumbnailsPosition.Bottom:
                this.width = '100%';
                this.height = this.config.thumbHeight + 'px';
                switch (this.config.thumbView) {
                    case 'contain':
                        const containerWidth = this._el.nativeElement.clientWidth;
                        const minHorizontalShift = itemsLength * thumbWidth - containerWidth;
                        // If slider size is larger than thumbnails size
                        if (containerWidth > (itemsLength * thumbWidth)) {
                            this.thumbnailsLessThanSlider = true;
                        }
                        else {
                            // If slider size is smaller than thumbnails size
                            this.thumbnailsLessThanSlider = false;
                            if ((currIndex * thumbWidth + thumbWidth / 2) > containerWidth / 2) {
                                value = -(Math.min((currIndex * thumbWidth + thumbWidth / 2) - (containerWidth / 2), minHorizontalShift));
                            }
                            else {
                                value = 0;
                            }
                        }
                        break;
                    default:
                        value = -(currIndex * thumbWidth) - (thumbWidth / 2 - state.value);
                }
                return {
                    transform: `translate3d(${value}px, 0, 0)`,
                    width: itemsLength * thumbWidth + 'px',
                    height: '100%'
                };
            case ThumbnailsPosition.Left:
            case ThumbnailsPosition.Right:
                this.width = this.config.thumbWidth + 'px';
                this.height = '100%';
                switch (this.config.thumbView) {
                    case 'contain':
                        const containerHeight = this._el.nativeElement.clientHeight;
                        const minVerticalShift = itemsLength * thumbHeight - containerHeight;
                        // If slider size is larger than thumbnails size
                        if (containerHeight > (itemsLength * thumbHeight)) {
                            this.thumbnailsLessThanSlider = true;
                        }
                        else {
                            // If slider size is smaller than thumbnails size
                            this.thumbnailsLessThanSlider = false;
                            if ((currIndex * thumbHeight + thumbHeight / 2) > containerHeight / 2) {
                                value = -(Math.min((currIndex * thumbHeight + thumbHeight / 2) - (containerHeight / 2), minVerticalShift));
                            }
                            else {
                                value = 0;
                            }
                        }
                        break;
                    default:
                        value = -(currIndex * thumbHeight) - (thumbHeight / 2 - state.value);
                }
                return {
                    transform: `translate3d(0, ${value}px, 0)`,
                    width: '100%',
                    height: itemsLength * thumbHeight + 'px'
                };
        }
    }
    verticalPan(e) {
        if (!(e.direction & Hammer.DIRECTION_VERTICAL && e.offsetDirection & Hammer.DIRECTION_VERTICAL)) {
            return;
        }
        if (e.velocityY > 0.3) {
            this.prev();
        }
        else if (e.velocityY < -0.3) {
            this.next();
        }
        else {
            if (e.deltaY / 2 <= -this.config.thumbHeight * this.state.items.length / this.config.panSensitivity) {
                this.next();
            }
            else if (e.deltaY / 2 >= this.config.thumbHeight * this.state.items.length / this.config.panSensitivity) {
                this.prev();
            }
            else {
                this.action.emit(this.state.currIndex);
            }
        }
    }
    horizontalPan(e) {
        if (!(e.direction & Hammer.DIRECTION_HORIZONTAL && e.offsetDirection & Hammer.DIRECTION_HORIZONTAL)) {
            return;
        }
        if (e.velocityX > 0.3) {
            this.prev();
        }
        else if (e.velocityX < -0.3) {
            this.next();
        }
        else {
            if (e.deltaX / 2 <= -this.config.thumbWidth * this.state.items.length / this.config.panSensitivity) {
                this.next();
            }
            else if (e.deltaX / 2 >= this.config.thumbWidth * this.state.items.length / this.config.panSensitivity) {
                this.prev();
            }
            else {
                this.action.emit(this.state.currIndex);
            }
        }
    }
    next() {
        this.action.emit('next');
    }
    prev() {
        this.action.emit('prev');
    }
    updateSlider(state) {
        const newState = { ...this._slidingWorker$.value, ...state };
        this._slidingWorker$.next(newState);
    }
}
GalleryThumbsComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "14.2.4", ngImport: i0, type: GalleryThumbsComponent, deps: [{ token: i0.ElementRef }, { token: i0.NgZone }], target: i0.ɵɵFactoryTarget.Component });
GalleryThumbsComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "14.2.4", type: GalleryThumbsComponent, selector: "gallery-thumbs", inputs: { state: "state", config: "config" }, outputs: { action: "action", thumbClick: "thumbClick", error: "error" }, host: { properties: { "style.height": "this.height", "style.width": "this.width" } }, viewQueries: [{ propertyName: "sliderEl", first: true, predicate: ["slider"], descendants: true, static: true }], usesOnChanges: true, ngImport: i0, template: `
    <div class="g-thumbs-container">
      <div #slider
           class="g-slider"
           [class.g-contain]="config.thumbView === thumbnailsView.Contain"
           [class.g-contain-small-content]="thumbnailsLessThanSlider">

        <gallery-thumb *ngFor="let item of state.items;let i = index"
                       [type]="item.type"
                       [config]="config"
                       [data]="item.data"
                       [currIndex]="state.currIndex"
                       [index]="i"
                       [tapClickDisabled]="config.disableThumb"
                       (tapClick)="thumbClick.emit(i)"
                       (error)="error.emit({itemIndex: i, error: $event})"></gallery-thumb>
      </div>
    </div>
  `, isInline: true, dependencies: [{ kind: "directive", type: i1.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }, { kind: "component", type: i2.GalleryThumbComponent, selector: "gallery-thumb", inputs: ["config", "index", "currIndex", "type", "data"], outputs: ["error"] }, { kind: "directive", type: i3.TapClick, selector: "[tapClick]", inputs: ["tapClickDisabled"], outputs: ["tapClick"] }], changeDetection: i0.ChangeDetectionStrategy.OnPush });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "14.2.4", ngImport: i0, type: GalleryThumbsComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'gallery-thumbs',
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    template: `
    <div class="g-thumbs-container">
      <div #slider
           class="g-slider"
           [class.g-contain]="config.thumbView === thumbnailsView.Contain"
           [class.g-contain-small-content]="thumbnailsLessThanSlider">

        <gallery-thumb *ngFor="let item of state.items;let i = index"
                       [type]="item.type"
                       [config]="config"
                       [data]="item.data"
                       [currIndex]="state.currIndex"
                       [index]="i"
                       [tapClickDisabled]="config.disableThumb"
                       (tapClick)="thumbClick.emit(i)"
                       (error)="error.emit({itemIndex: i, error: $event})"></gallery-thumb>
      </div>
    </div>
  `
                }]
        }], ctorParameters: function () { return [{ type: i0.ElementRef }, { type: i0.NgZone }]; }, propDecorators: { state: [{
                type: Input
            }], config: [{
                type: Input
            }], action: [{
                type: Output
            }], thumbClick: [{
                type: Output
            }], error: [{
                type: Output
            }], height: [{
                type: HostBinding,
                args: ['style.height']
            }], width: [{
                type: HostBinding,
                args: ['style.width']
            }], sliderEl: [{
                type: ViewChild,
                args: ['slider', { static: true }]
            }] } });
//# sourceMappingURL=data:application/json;base64,