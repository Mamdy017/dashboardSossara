import { Component, Input, ViewChild, ChangeDetectionStrategy } from '@angular/core';
import * as i0 from "@angular/core";
import * as i1 from "@angular/platform-browser";
export class GalleryIframeComponent {
    constructor(_sanitizer) {
        this._sanitizer = _sanitizer;
    }
    set src(src) {
        this.videoSrc = src;
        this.iframeSrc = this._sanitizer.bypassSecurityTrustResourceUrl(src);
    }
    set pauseVideo(shouldPause) {
        if (this.iframe.nativeElement) {
            if (shouldPause) {
                const iframe = this.iframe.nativeElement;
                iframe.src = null;
                if (!this.autoplay && this.videoSrc) {
                    this.iframeSrc = this._sanitizer.bypassSecurityTrustResourceUrl(this.videoSrc);
                }
            }
        }
    }
}
GalleryIframeComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "14.2.4", ngImport: i0, type: GalleryIframeComponent, deps: [{ token: i1.DomSanitizer }], target: i0.ɵɵFactoryTarget.Component });
GalleryIframeComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "14.2.4", type: GalleryIframeComponent, selector: "gallery-iframe", inputs: { src: "src", pauseVideo: ["pause", "pauseVideo"], autoplay: "autoplay" }, viewQueries: [{ propertyName: "iframe", first: true, predicate: ["iframe"], descendants: true, static: true }], ngImport: i0, template: `
    <iframe #iframe
            frameborder="0"
            allowfullscreen
            [attr.allow]="autoplay ? 'autoplay' : ''"
            [src]="iframeSrc">
    </iframe>
  `, isInline: true, changeDetection: i0.ChangeDetectionStrategy.OnPush });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "14.2.4", ngImport: i0, type: GalleryIframeComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'gallery-iframe',
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    template: `
    <iframe #iframe
            frameborder="0"
            allowfullscreen
            [attr.allow]="autoplay ? 'autoplay' : ''"
            [src]="iframeSrc">
    </iframe>
  `
                }]
        }], ctorParameters: function () { return [{ type: i1.DomSanitizer }]; }, propDecorators: { src: [{
                type: Input,
                args: ['src']
            }], pauseVideo: [{
                type: Input,
                args: ['pause']
            }], autoplay: [{
                type: Input
            }], iframe: [{
                type: ViewChild,
                args: ['iframe', { static: true }]
            }] } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ2FsbGVyeS1pZnJhbWUuY29tcG9uZW50LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vLi4vcHJvamVjdHMvbmctZ2FsbGVyeS9zcmMvbGliL2NvbXBvbmVudHMvdGVtcGxhdGVzL2dhbGxlcnktaWZyYW1lLmNvbXBvbmVudC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsU0FBUyxFQUFFLEtBQUssRUFBRSxTQUFTLEVBQWMsdUJBQXVCLEVBQUUsTUFBTSxlQUFlLENBQUM7OztBQWVqRyxNQUFNLE9BQU8sc0JBQXNCO0lBMkJqQyxZQUFvQixVQUF3QjtRQUF4QixlQUFVLEdBQVYsVUFBVSxDQUFjO0lBQzVDLENBQUM7SUF2QkQsSUFBa0IsR0FBRyxDQUFDLEdBQVc7UUFDL0IsSUFBSSxDQUFDLFFBQVEsR0FBRyxHQUFHLENBQUM7UUFDcEIsSUFBSSxDQUFDLFNBQVMsR0FBRyxJQUFJLENBQUMsVUFBVSxDQUFDLDhCQUE4QixDQUFDLEdBQUcsQ0FBQyxDQUFDO0lBQ3ZFLENBQUM7SUFFRCxJQUFvQixVQUFVLENBQUMsV0FBb0I7UUFDakQsSUFBSSxJQUFJLENBQUMsTUFBTSxDQUFDLGFBQWEsRUFBRTtZQUM3QixJQUFJLFdBQVcsRUFBRTtnQkFDZixNQUFNLE1BQU0sR0FBc0IsSUFBSSxDQUFDLE1BQU0sQ0FBQyxhQUFhLENBQUM7Z0JBQzVELE1BQU0sQ0FBQyxHQUFHLEdBQUcsSUFBSSxDQUFDO2dCQUVsQixJQUFJLENBQUMsSUFBSSxDQUFDLFFBQVEsSUFBSSxJQUFJLENBQUMsUUFBUSxFQUFFO29CQUNuQyxJQUFJLENBQUMsU0FBUyxHQUFHLElBQUksQ0FBQyxVQUFVLENBQUMsOEJBQThCLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxDQUFDO2lCQUNoRjthQUNGO1NBQ0Y7SUFDSCxDQUFDOzttSEFyQlUsc0JBQXNCO3VHQUF0QixzQkFBc0IseVBBVHZCOzs7Ozs7O0dBT1Q7MkZBRVUsc0JBQXNCO2tCQVpsQyxTQUFTO21CQUFDO29CQUNULFFBQVEsRUFBRSxnQkFBZ0I7b0JBQzFCLGVBQWUsRUFBRSx1QkFBdUIsQ0FBQyxNQUFNO29CQUMvQyxRQUFRLEVBQUU7Ozs7Ozs7R0FPVDtpQkFDRjttR0FNbUIsR0FBRztzQkFBcEIsS0FBSzt1QkFBQyxLQUFLO2dCQUtRLFVBQVU7c0JBQTdCLEtBQUs7dUJBQUMsT0FBTztnQkFhTCxRQUFRO3NCQUFoQixLQUFLO2dCQUVpQyxNQUFNO3NCQUE1QyxTQUFTO3VCQUFDLFFBQVEsRUFBRSxFQUFFLE1BQU0sRUFBRSxJQUFJLEVBQUUiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBDb21wb25lbnQsIElucHV0LCBWaWV3Q2hpbGQsIEVsZW1lbnRSZWYsIENoYW5nZURldGVjdGlvblN0cmF0ZWd5IH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XHJcbmltcG9ydCB7IERvbVNhbml0aXplciwgU2FmZVJlc291cmNlVXJsIH0gZnJvbSAnQGFuZ3VsYXIvcGxhdGZvcm0tYnJvd3Nlcic7XHJcblxyXG5AQ29tcG9uZW50KHtcclxuICBzZWxlY3RvcjogJ2dhbGxlcnktaWZyYW1lJyxcclxuICBjaGFuZ2VEZXRlY3Rpb246IENoYW5nZURldGVjdGlvblN0cmF0ZWd5Lk9uUHVzaCxcclxuICB0ZW1wbGF0ZTogYFxyXG4gICAgPGlmcmFtZSAjaWZyYW1lXHJcbiAgICAgICAgICAgIGZyYW1lYm9yZGVyPVwiMFwiXHJcbiAgICAgICAgICAgIGFsbG93ZnVsbHNjcmVlblxyXG4gICAgICAgICAgICBbYXR0ci5hbGxvd109XCJhdXRvcGxheSA/ICdhdXRvcGxheScgOiAnJ1wiXHJcbiAgICAgICAgICAgIFtzcmNdPVwiaWZyYW1lU3JjXCI+XHJcbiAgICA8L2lmcmFtZT5cclxuICBgXHJcbn0pXHJcbmV4cG9ydCBjbGFzcyBHYWxsZXJ5SWZyYW1lQ29tcG9uZW50IHtcclxuXHJcbiAgaWZyYW1lU3JjOiBTYWZlUmVzb3VyY2VVcmw7XHJcbiAgdmlkZW9TcmM6IHN0cmluZztcclxuXHJcbiAgQElucHV0KCdzcmMnKSBzZXQgc3JjKHNyYzogc3RyaW5nKSB7XHJcbiAgICB0aGlzLnZpZGVvU3JjID0gc3JjO1xyXG4gICAgdGhpcy5pZnJhbWVTcmMgPSB0aGlzLl9zYW5pdGl6ZXIuYnlwYXNzU2VjdXJpdHlUcnVzdFJlc291cmNlVXJsKHNyYyk7XHJcbiAgfVxyXG5cclxuICBASW5wdXQoJ3BhdXNlJykgc2V0IHBhdXNlVmlkZW8oc2hvdWxkUGF1c2U6IGJvb2xlYW4pIHtcclxuICAgIGlmICh0aGlzLmlmcmFtZS5uYXRpdmVFbGVtZW50KSB7XHJcbiAgICAgIGlmIChzaG91bGRQYXVzZSkge1xyXG4gICAgICAgIGNvbnN0IGlmcmFtZTogSFRNTElGcmFtZUVsZW1lbnQgPSB0aGlzLmlmcmFtZS5uYXRpdmVFbGVtZW50O1xyXG4gICAgICAgIGlmcmFtZS5zcmMgPSBudWxsO1xyXG5cclxuICAgICAgICBpZiAoIXRoaXMuYXV0b3BsYXkgJiYgdGhpcy52aWRlb1NyYykge1xyXG4gICAgICAgICAgdGhpcy5pZnJhbWVTcmMgPSB0aGlzLl9zYW5pdGl6ZXIuYnlwYXNzU2VjdXJpdHlUcnVzdFJlc291cmNlVXJsKHRoaXMudmlkZW9TcmMpO1xyXG4gICAgICAgIH1cclxuICAgICAgfVxyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgQElucHV0KCkgYXV0b3BsYXk6IGJvb2xlYW47XHJcblxyXG4gIEBWaWV3Q2hpbGQoJ2lmcmFtZScsIHsgc3RhdGljOiB0cnVlIH0pIGlmcmFtZTogRWxlbWVudFJlZjtcclxuXHJcbiAgY29uc3RydWN0b3IocHJpdmF0ZSBfc2FuaXRpemVyOiBEb21TYW5pdGl6ZXIpIHtcclxuICB9XHJcbn1cclxuIl19