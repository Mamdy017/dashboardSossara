import { Component, Input, Output, HostBinding, EventEmitter, ChangeDetectionStrategy } from '@angular/core';
import { animate, style, transition, trigger } from '@angular/animations';
import { BehaviorSubject } from 'rxjs';
import * as i0 from "@angular/core";
import * as i1 from "@angular/platform-browser";
import * as i2 from "@angular/common";
import * as i3 from "../../directives/lazy-image";
export class GalleryImageComponent {
    constructor(_sanitizer) {
        this._sanitizer = _sanitizer;
        /** Stream that emits the state */
        this._state = new BehaviorSubject('loading');
        this.state = this._state.asObservable();
        /** Progress value */
        this.progress = 0;
        /** Stream that emits when an error occurs */
        this.error = new EventEmitter();
    }
    get imageLoadSuccess() {
        return !!this.imageUrl;
    }
    get imageLoadFailed() {
        return !!this.loadError;
    }
    ngOnInit() {
        if (this.loadingIcon) {
            this.loaderTemplate = this._sanitizer.bypassSecurityTrustHtml(this.loadingIcon);
        }
        if (this.loadingError) {
            this.errorTemplate = this._sanitizer.bypassSecurityTrustHtml(this.loadingError);
        }
    }
    ngOnDestroy() {
        this._state.complete();
    }
    onProgress({ loaded, total }) {
        this.progress = loaded * 100 / total;
    }
    onLoaded(blobUrl) {
        this.imageUrl = this._sanitizer.bypassSecurityTrustUrl(blobUrl);
        this._state.next('success');
    }
    onError(err) {
        this.loadError = err;
        this._state.next('failed');
        this.error.emit(err);
    }
}
GalleryImageComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "14.2.4", ngImport: i0, type: GalleryImageComponent, deps: [{ token: i1.DomSanitizer }], target: i0.ɵɵFactoryTarget.Component });
GalleryImageComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "14.2.4", type: GalleryImageComponent, selector: "gallery-image", inputs: { isThumbnail: "isThumbnail", alt: "alt", src: "src", loadingIcon: "loadingIcon", loadingError: "loadingError" }, outputs: { error: "error" }, host: { properties: { "class.g-image-loaded": "this.imageLoadSuccess", "class.g-image-error": "this.imageLoadFailed" } }, ngImport: i0, template: `
    <ng-container [lazyImage]="src"
                  (progress)="onProgress($event)"
                  (loaded)="onLoaded($event)"
                  (error)="onError($event)"
                  [ngSwitch]="state | async">

      <img *ngSwitchCase="'success'"
           @fadeIn
           [src]="imageUrl"
           [attr.alt]="alt"
           class="g-image-item"/>

      <div *ngSwitchCase="'failed'"
           class="g-image-error-message">
        <div *ngIf="errorTemplate; else defaultError"
             [innerHTML]="errorTemplate"></div>
        <ng-template #defaultError>
          <ng-container *ngIf="isThumbnail; else isLarge">
            <h4>⚠</h4>
          </ng-container>
          <ng-template #isLarge>
            <h2>⚠</h2>
            <p>Unable to load the image!</p>
          </ng-template>
        </ng-template>
      </div>

      <ng-container *ngSwitchCase="'loading'">
        <div *ngIf="loaderTemplate; else defaultLoader"
             class="g-loading"
             [innerHTML]="loaderTemplate">
        </div>
        <ng-template #defaultLoader>
          <div *ngIf="isThumbnail" class="g-thumb-loading"></div>
        </ng-template>
      </ng-container>
    </ng-container>
  `, isInline: true, dependencies: [{ kind: "directive", type: i2.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { kind: "directive", type: i2.NgSwitch, selector: "[ngSwitch]", inputs: ["ngSwitch"] }, { kind: "directive", type: i2.NgSwitchCase, selector: "[ngSwitchCase]", inputs: ["ngSwitchCase"] }, { kind: "directive", type: i3.LazyImage, selector: "[lazyImage]", inputs: ["lazyImage"], outputs: ["loaded", "error"] }, { kind: "pipe", type: i2.AsyncPipe, name: "async" }], animations: [
        trigger('fadeIn', [
            transition(':enter', [
                style({ opacity: 0 }),
                animate('300ms ease-in', style({ opacity: 1 }))
            ])
        ])
    ], changeDetection: i0.ChangeDetectionStrategy.OnPush });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "14.2.4", ngImport: i0, type: GalleryImageComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'gallery-image',
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    animations: [
                        trigger('fadeIn', [
                            transition(':enter', [
                                style({ opacity: 0 }),
                                animate('300ms ease-in', style({ opacity: 1 }))
                            ])
                        ])
                    ],
                    template: `
    <ng-container [lazyImage]="src"
                  (progress)="onProgress($event)"
                  (loaded)="onLoaded($event)"
                  (error)="onError($event)"
                  [ngSwitch]="state | async">

      <img *ngSwitchCase="'success'"
           @fadeIn
           [src]="imageUrl"
           [attr.alt]="alt"
           class="g-image-item"/>

      <div *ngSwitchCase="'failed'"
           class="g-image-error-message">
        <div *ngIf="errorTemplate; else defaultError"
             [innerHTML]="errorTemplate"></div>
        <ng-template #defaultError>
          <ng-container *ngIf="isThumbnail; else isLarge">
            <h4>⚠</h4>
          </ng-container>
          <ng-template #isLarge>
            <h2>⚠</h2>
            <p>Unable to load the image!</p>
          </ng-template>
        </ng-template>
      </div>

      <ng-container *ngSwitchCase="'loading'">
        <div *ngIf="loaderTemplate; else defaultLoader"
             class="g-loading"
             [innerHTML]="loaderTemplate">
        </div>
        <ng-template #defaultLoader>
          <div *ngIf="isThumbnail" class="g-thumb-loading"></div>
        </ng-template>
      </ng-container>
    </ng-container>
  `
                }]
        }], ctorParameters: function () { return [{ type: i1.DomSanitizer }]; }, propDecorators: { isThumbnail: [{
                type: Input
            }], alt: [{
                type: Input
            }], src: [{
                type: Input
            }], loadingIcon: [{
                type: Input
            }], loadingError: [{
                type: Input
            }], error: [{
                type: Output
            }], imageLoadSuccess: [{
                type: HostBinding,
                args: ['class.g-image-loaded']
            }], imageLoadFailed: [{
                type: HostBinding,
                args: ['class.g-image-error']
            }] } });
//# sourceMappingURL=data:application/json;base64,