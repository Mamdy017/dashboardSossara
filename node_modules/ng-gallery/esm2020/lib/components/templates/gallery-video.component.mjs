import { Component, Input, Output, EventEmitter, ViewChild, ChangeDetectionStrategy } from '@angular/core';
import * as i0 from "@angular/core";
import * as i1 from "@angular/common";
export class GalleryVideoComponent {
    constructor() {
        /** Stream that emits when an error occurs */
        this.error = new EventEmitter();
    }
    set pauseVideo(shouldPause) {
        if (this.video.nativeElement) {
            const video = this.video.nativeElement;
            if (shouldPause && !video.paused) {
                video.pause();
            }
        }
    }
    set playVideo(shouldPlay) {
        if (this.video.nativeElement) {
            const video = this.video.nativeElement;
            if (shouldPlay) {
                video.play();
            }
        }
    }
    ngOnInit() {
        if (this.src instanceof Array) {
            // If video has multiple sources
            this.videoSources = [...this.src];
        }
        else {
            this.videoSources = [{ url: this.src }];
        }
        this.controls = typeof this.controlsEnabled === 'boolean' ? this.controlsEnabled : true;
    }
}
GalleryVideoComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "14.2.4", ngImport: i0, type: GalleryVideoComponent, deps: [], target: i0.ɵɵFactoryTarget.Component });
GalleryVideoComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "14.2.4", type: GalleryVideoComponent, selector: "gallery-video", inputs: { src: "src", poster: "poster", controlsEnabled: ["controls", "controlsEnabled"], pauseVideo: ["pause", "pauseVideo"], playVideo: ["play", "playVideo"] }, outputs: { error: "error" }, viewQueries: [{ propertyName: "video", first: true, predicate: ["video"], descendants: true, static: true }], ngImport: i0, template: `
    <video #video [controls]="controls" [poster]="poster" (error)="error.emit($event)">
      <source *ngFor="let src of videoSources" [src]="src?.url" [type]="src?.type"/>
    </video>
  `, isInline: true, dependencies: [{ kind: "directive", type: i1.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }], changeDetection: i0.ChangeDetectionStrategy.OnPush });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "14.2.4", ngImport: i0, type: GalleryVideoComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'gallery-video',
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    template: `
    <video #video [controls]="controls" [poster]="poster" (error)="error.emit($event)">
      <source *ngFor="let src of videoSources" [src]="src?.url" [type]="src?.type"/>
    </video>
  `
                }]
        }], propDecorators: { src: [{
                type: Input
            }], poster: [{
                type: Input
            }], controlsEnabled: [{
                type: Input,
                args: ['controls']
            }], pauseVideo: [{
                type: Input,
                args: ['pause']
            }], playVideo: [{
                type: Input,
                args: ['play']
            }], error: [{
                type: Output
            }], video: [{
                type: ViewChild,
                args: ['video', { static: true }]
            }] } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ2FsbGVyeS12aWRlby5jb21wb25lbnQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi8uLi9wcm9qZWN0cy9uZy1nYWxsZXJ5L3NyYy9saWIvY29tcG9uZW50cy90ZW1wbGF0ZXMvZ2FsbGVyeS12aWRlby5jb21wb25lbnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLFNBQVMsRUFBRSxLQUFLLEVBQUUsTUFBTSxFQUFFLFlBQVksRUFBVSxTQUFTLEVBQWMsdUJBQXVCLEVBQUUsTUFBTSxlQUFlLENBQUM7OztBQVcvSCxNQUFNLE9BQU8scUJBQXFCO0lBVGxDO1FBb0NFLDZDQUE2QztRQUNuQyxVQUFLLEdBQUcsSUFBSSxZQUFZLEVBQVMsQ0FBQztLQWE3QztJQWhDQyxJQUFvQixVQUFVLENBQUMsV0FBb0I7UUFDakQsSUFBSSxJQUFJLENBQUMsS0FBSyxDQUFDLGFBQWEsRUFBRTtZQUM1QixNQUFNLEtBQUssR0FBcUIsSUFBSSxDQUFDLEtBQUssQ0FBQyxhQUFhLENBQUM7WUFDekQsSUFBSSxXQUFXLElBQUksQ0FBQyxLQUFLLENBQUMsTUFBTSxFQUFFO2dCQUNoQyxLQUFLLENBQUMsS0FBSyxFQUFFLENBQUM7YUFDZjtTQUNGO0lBQ0gsQ0FBQztJQUVELElBQW1CLFNBQVMsQ0FBQyxVQUFtQjtRQUM5QyxJQUFJLElBQUksQ0FBQyxLQUFLLENBQUMsYUFBYSxFQUFFO1lBQzVCLE1BQU0sS0FBSyxHQUFxQixJQUFJLENBQUMsS0FBSyxDQUFDLGFBQWEsQ0FBQztZQUN6RCxJQUFJLFVBQVUsRUFBRTtnQkFDZCxLQUFLLENBQUMsSUFBSSxFQUFFLENBQUM7YUFDZDtTQUNGO0lBQ0gsQ0FBQztJQU9ELFFBQVE7UUFDTixJQUFJLElBQUksQ0FBQyxHQUFHLFlBQVksS0FBSyxFQUFFO1lBQzdCLGdDQUFnQztZQUNoQyxJQUFJLENBQUMsWUFBWSxHQUFHLENBQUMsR0FBRyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUM7U0FDbkM7YUFBTTtZQUNMLElBQUksQ0FBQyxZQUFZLEdBQUcsQ0FBQyxFQUFFLEdBQUcsRUFBRSxJQUFJLENBQUMsR0FBRyxFQUFFLENBQUMsQ0FBQztTQUN6QztRQUNELElBQUksQ0FBQyxRQUFRLEdBQUcsT0FBTyxJQUFJLENBQUMsZUFBZSxLQUFLLFNBQVMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLGVBQWUsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDO0lBQzFGLENBQUM7O2tIQXhDVSxxQkFBcUI7c0dBQXJCLHFCQUFxQixtV0FOdEI7Ozs7R0FJVDsyRkFFVSxxQkFBcUI7a0JBVGpDLFNBQVM7bUJBQUM7b0JBQ1QsUUFBUSxFQUFFLGVBQWU7b0JBQ3pCLGVBQWUsRUFBRSx1QkFBdUIsQ0FBQyxNQUFNO29CQUMvQyxRQUFRLEVBQUU7Ozs7R0FJVDtpQkFDRjs4QkFNVSxHQUFHO3NCQUFYLEtBQUs7Z0JBQ0csTUFBTTtzQkFBZCxLQUFLO2dCQUNhLGVBQWU7c0JBQWpDLEtBQUs7dUJBQUMsVUFBVTtnQkFFRyxVQUFVO3NCQUE3QixLQUFLO3VCQUFDLE9BQU87Z0JBU0ssU0FBUztzQkFBM0IsS0FBSzt1QkFBQyxNQUFNO2dCQVVILEtBQUs7c0JBQWQsTUFBTTtnQkFFK0IsS0FBSztzQkFBMUMsU0FBUzt1QkFBQyxPQUFPLEVBQUUsRUFBRSxNQUFNLEVBQUUsSUFBSSxFQUFFIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQ29tcG9uZW50LCBJbnB1dCwgT3V0cHV0LCBFdmVudEVtaXR0ZXIsIE9uSW5pdCwgVmlld0NoaWxkLCBFbGVtZW50UmVmLCBDaGFuZ2VEZXRlY3Rpb25TdHJhdGVneSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xyXG5cclxuQENvbXBvbmVudCh7XHJcbiAgc2VsZWN0b3I6ICdnYWxsZXJ5LXZpZGVvJyxcclxuICBjaGFuZ2VEZXRlY3Rpb246IENoYW5nZURldGVjdGlvblN0cmF0ZWd5Lk9uUHVzaCxcclxuICB0ZW1wbGF0ZTogYFxyXG4gICAgPHZpZGVvICN2aWRlbyBbY29udHJvbHNdPVwiY29udHJvbHNcIiBbcG9zdGVyXT1cInBvc3RlclwiIChlcnJvcik9XCJlcnJvci5lbWl0KCRldmVudClcIj5cclxuICAgICAgPHNvdXJjZSAqbmdGb3I9XCJsZXQgc3JjIG9mIHZpZGVvU291cmNlc1wiIFtzcmNdPVwic3JjPy51cmxcIiBbdHlwZV09XCJzcmM/LnR5cGVcIi8+XHJcbiAgICA8L3ZpZGVvPlxyXG4gIGBcclxufSlcclxuZXhwb3J0IGNsYXNzIEdhbGxlcnlWaWRlb0NvbXBvbmVudCBpbXBsZW1lbnRzIE9uSW5pdCB7XHJcblxyXG4gIHZpZGVvU291cmNlczogeyB1cmw6IHN0cmluZywgdHlwZT86IHN0cmluZyB9W107XHJcbiAgY29udHJvbHM6IGJvb2xlYW47XHJcblxyXG4gIEBJbnB1dCgpIHNyYzogc3RyaW5nIHwgeyB1cmw6IHN0cmluZywgdHlwZT86IHN0cmluZyB9W107XHJcbiAgQElucHV0KCkgcG9zdGVyOiBzdHJpbmc7XHJcbiAgQElucHV0KCdjb250cm9scycpIGNvbnRyb2xzRW5hYmxlZDogYm9vbGVhbjtcclxuXHJcbiAgQElucHV0KCdwYXVzZScpIHNldCBwYXVzZVZpZGVvKHNob3VsZFBhdXNlOiBib29sZWFuKSB7XHJcbiAgICBpZiAodGhpcy52aWRlby5uYXRpdmVFbGVtZW50KSB7XHJcbiAgICAgIGNvbnN0IHZpZGVvOiBIVE1MVmlkZW9FbGVtZW50ID0gdGhpcy52aWRlby5uYXRpdmVFbGVtZW50O1xyXG4gICAgICBpZiAoc2hvdWxkUGF1c2UgJiYgIXZpZGVvLnBhdXNlZCkge1xyXG4gICAgICAgIHZpZGVvLnBhdXNlKCk7XHJcbiAgICAgIH1cclxuICAgIH1cclxuICB9XHJcblxyXG4gIEBJbnB1dCgncGxheScpIHNldCBwbGF5VmlkZW8oc2hvdWxkUGxheTogYm9vbGVhbikge1xyXG4gICAgaWYgKHRoaXMudmlkZW8ubmF0aXZlRWxlbWVudCkge1xyXG4gICAgICBjb25zdCB2aWRlbzogSFRNTFZpZGVvRWxlbWVudCA9IHRoaXMudmlkZW8ubmF0aXZlRWxlbWVudDtcclxuICAgICAgaWYgKHNob3VsZFBsYXkpIHtcclxuICAgICAgICB2aWRlby5wbGF5KCk7XHJcbiAgICAgIH1cclxuICAgIH1cclxuICB9XHJcblxyXG4gIC8qKiBTdHJlYW0gdGhhdCBlbWl0cyB3aGVuIGFuIGVycm9yIG9jY3VycyAqL1xyXG4gIEBPdXRwdXQoKSBlcnJvciA9IG5ldyBFdmVudEVtaXR0ZXI8RXJyb3I+KCk7XHJcblxyXG4gIEBWaWV3Q2hpbGQoJ3ZpZGVvJywgeyBzdGF0aWM6IHRydWUgfSkgdmlkZW86IEVsZW1lbnRSZWY7XHJcblxyXG4gIG5nT25Jbml0KCkge1xyXG4gICAgaWYgKHRoaXMuc3JjIGluc3RhbmNlb2YgQXJyYXkpIHtcclxuICAgICAgLy8gSWYgdmlkZW8gaGFzIG11bHRpcGxlIHNvdXJjZXNcclxuICAgICAgdGhpcy52aWRlb1NvdXJjZXMgPSBbLi4udGhpcy5zcmNdO1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgdGhpcy52aWRlb1NvdXJjZXMgPSBbeyB1cmw6IHRoaXMuc3JjIH1dO1xyXG4gICAgfVxyXG4gICAgdGhpcy5jb250cm9scyA9IHR5cGVvZiB0aGlzLmNvbnRyb2xzRW5hYmxlZCA9PT0gJ2Jvb2xlYW4nID8gdGhpcy5jb250cm9sc0VuYWJsZWQgOiB0cnVlO1xyXG4gIH1cclxufVxyXG4iXX0=