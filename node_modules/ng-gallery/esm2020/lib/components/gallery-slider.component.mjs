import { Component, Input, Output, ViewChild, Inject, EventEmitter, ChangeDetectionStrategy, PLATFORM_ID } from '@angular/core';
import { isPlatformBrowser } from '@angular/common';
import { BehaviorSubject, fromEvent } from 'rxjs';
import { map, tap, debounceTime } from 'rxjs/operators';
import { SlidingDirection } from '../models/constants';
import * as i0 from "@angular/core";
import * as i1 from "@angular/common";
import * as i2 from "./gallery-item.component";
import * as i3 from "../directives/tap-click";
export class GallerySliderComponent {
    constructor(_el, _zone, _platform) {
        this._el = _el;
        this._zone = _zone;
        this._platform = _platform;
        /** Sliding worker */
        this._slidingWorker$ = new BehaviorSubject({ value: 0, instant: true });
        /** Stream that emits when the active item should change */
        this.action = new EventEmitter();
        /** Stream that emits when item is clicked */
        this.itemClick = new EventEmitter();
        /** Stream that emits when an error occurs */
        this.error = new EventEmitter();
        // Activate sliding worker
        this.sliderState$ = this._slidingWorker$.pipe(map((state) => ({
            style: this.getSliderStyles(state),
            instant: state.instant
        })));
    }
    get container() {
        return this.containerEl.nativeElement;
    }
    get slider() {
        return this.sliderEl.nativeElement;
    }
    /** Item zoom */
    get zoom() {
        return { transform: `perspective(50px) translate3d(0, 0, ${-this.config.zoomOut}px)` };
    }
    ngOnChanges(changes) {
        // Refresh the slider
        if (changes.state) {
            this.updateSlider({ value: 0, instant: changes.state.firstChange });
        }
        // Enable/Disable gestures on changes
        if (changes.config && changes.config.currentValue?.gestures !== changes.config.previousValue?.gestures) {
            if (this.config.gestures) {
                this.activateGestures();
            }
            else {
                this.deactivateGestures();
            }
        }
    }
    ngOnInit() {
        this._zone.runOutsideAngular(() => {
            // Set styles manually avoid triggering change detection on dragging
            this._sliderStateSub$ = this.sliderState$.pipe(tap((state) => {
                this.slider.style.transform = state.style.transform;
                this.slider.style.height = state.style.height;
                this.slider.style.width = state.style.width;
                this.slider.classList.toggle('g-no-transition', state.instant);
                this.container.style.transform = this.zoom.transform;
            })).subscribe();
        });
        // Rearrange slider on window resize
        if (isPlatformBrowser(this._platform)) {
            this._resizeSub$ = fromEvent(window, 'resize').pipe(debounceTime(200), tap(() => this.updateSlider({ value: 0, instant: true }))).subscribe();
        }
    }
    ngOnDestroy() {
        this.deactivateGestures();
        this._resizeSub$?.unsubscribe();
        this._sliderStateSub$?.unsubscribe();
        this._slidingWorker$.complete();
    }
    activateGestures() {
        if (typeof Hammer !== 'undefined') {
            let direction;
            let touchAction = 'compute';
            if (this.config.slidingDirection === SlidingDirection.Horizontal) {
                direction = Hammer.DIRECTION_HORIZONTAL;
                if (this.config.reserveGesturesAction) {
                    touchAction = 'pan-x';
                }
            }
            else {
                direction = Hammer.DIRECTION_VERTICAL;
                if (this.config.reserveGesturesAction) {
                    touchAction = 'pan-y';
                }
            }
            // Activate gestures
            this._hammer = new Hammer(this._el.nativeElement, { touchAction });
            this._hammer.get('pan').set({ direction });
            this._zone.runOutsideAngular(() => {
                this._hammer.on('pan', (e) => {
                    switch (this.config.slidingDirection) {
                        case SlidingDirection.Horizontal:
                            if (e.isFinal) {
                                this.updateSlider({ value: 0, instant: false });
                                this.horizontalPan(e);
                            }
                            else {
                                this.updateSlider({ value: e.deltaX, instant: true });
                            }
                            break;
                        case SlidingDirection.Vertical:
                            if (e.isFinal) {
                                this.updateSlider({ value: 0, instant: false });
                                this.verticalPan(e);
                            }
                            else {
                                this.updateSlider({ value: e.deltaY, instant: true });
                            }
                    }
                });
            });
        }
    }
    deactivateGestures() {
        this._hammer?.destroy();
    }
    /**
     * Convert sliding state to styles
     */
    getSliderStyles(state) {
        switch (this.config.slidingDirection) {
            case SlidingDirection.Horizontal:
                return {
                    transform: `translate3d(${-(this.state.currIndex * this._el.nativeElement.offsetWidth) + state.value}px, 0, 0)`,
                    width: `calc(100% * ${this.state.items.length})`,
                    height: '100%'
                };
            case SlidingDirection.Vertical:
                return {
                    transform: `translate3d(0, ${-(this.state.currIndex * this._el.nativeElement.offsetHeight) + state.value}px, 0)`,
                    width: '100%',
                    height: `calc(100% * ${this.state.items.length})`,
                };
        }
    }
    verticalPan(e) {
        if (!(e.direction & Hammer.DIRECTION_UP && e.offsetDirection & Hammer.DIRECTION_VERTICAL)) {
            return;
        }
        if (e.velocityY > 0.3) {
            this.prev();
        }
        else if (e.velocityY < -0.3) {
            this.next();
        }
        else {
            if (e.deltaY / 2 <= -this._el.nativeElement.offsetHeight * this.state.items.length / this.config.panSensitivity) {
                this.next();
            }
            else if (e.deltaY / 2 >= this._el.nativeElement.offsetHeight * this.state.items.length / this.config.panSensitivity) {
                this.prev();
            }
            else {
                this.action.emit(this.state.currIndex);
            }
        }
    }
    horizontalPan(e) {
        if (!(e.direction & Hammer.DIRECTION_HORIZONTAL && e.offsetDirection & Hammer.DIRECTION_HORIZONTAL)) {
            return;
        }
        if (e.velocityX > 0.3) {
            this.prev();
        }
        else if (e.velocityX < -0.3) {
            this.next();
        }
        else {
            if (e.deltaX / 2 <= -this._el.nativeElement.offsetWidth * this.state.items.length / this.config.panSensitivity) {
                this.next();
            }
            else if (e.deltaX / 2 >= this._el.nativeElement.offsetWidth * this.state.items.length / this.config.panSensitivity) {
                this.prev();
            }
            else {
                this.action.emit(this.state.currIndex);
            }
        }
    }
    next() {
        this.action.emit('next');
    }
    prev() {
        this.action.emit('prev');
    }
    updateSlider(state) {
        const newState = { ...this._slidingWorker$.value, ...state };
        this._slidingWorker$.next(newState);
    }
}
GallerySliderComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "14.2.4", ngImport: i0, type: GallerySliderComponent, deps: [{ token: i0.ElementRef }, { token: i0.NgZone }, { token: PLATFORM_ID }], target: i0.ɵɵFactoryTarget.Component });
GallerySliderComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "14.2.4", type: GallerySliderComponent, selector: "gallery-slider", inputs: { state: "state", config: "config" }, outputs: { action: "action", itemClick: "itemClick", error: "error" }, viewQueries: [{ propertyName: "containerEl", first: true, predicate: ["container"], descendants: true, static: true }, { propertyName: "sliderEl", first: true, predicate: ["slider"], descendants: true, static: true }], usesOnChanges: true, ngImport: i0, template: `
    <div #container class="g-items-container">
      <div #slider class="g-slider">
        <gallery-item *ngFor="let item of state.items; let i = index"
                      [type]="item.type"
                      [config]="config"
                      [data]="item.data"
                      [currIndex]="state.currIndex"
                      [index]="i"
                      (tapClick)="itemClick.emit(i)"
                      (error)="error.emit({itemIndex: i, error: $event})">
        </gallery-item>
      </div>
    </div>
    <ng-content></ng-content>
  `, isInline: true, dependencies: [{ kind: "directive", type: i1.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }, { kind: "component", type: i2.GalleryItemComponent, selector: "gallery-item", inputs: ["config", "index", "currIndex", "type", "data"], outputs: ["error"] }, { kind: "directive", type: i3.TapClick, selector: "[tapClick]", inputs: ["tapClickDisabled"], outputs: ["tapClick"] }], changeDetection: i0.ChangeDetectionStrategy.OnPush });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "14.2.4", ngImport: i0, type: GallerySliderComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'gallery-slider',
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    template: `
    <div #container class="g-items-container">
      <div #slider class="g-slider">
        <gallery-item *ngFor="let item of state.items; let i = index"
                      [type]="item.type"
                      [config]="config"
                      [data]="item.data"
                      [currIndex]="state.currIndex"
                      [index]="i"
                      (tapClick)="itemClick.emit(i)"
                      (error)="error.emit({itemIndex: i, error: $event})">
        </gallery-item>
      </div>
    </div>
    <ng-content></ng-content>
  `
                }]
        }], ctorParameters: function () { return [{ type: i0.ElementRef }, { type: i0.NgZone }, { type: Object, decorators: [{
                    type: Inject,
                    args: [PLATFORM_ID]
                }] }]; }, propDecorators: { state: [{
                type: Input
            }], config: [{
                type: Input
            }], action: [{
                type: Output
            }], itemClick: [{
                type: Output
            }], error: [{
                type: Output
            }], containerEl: [{
                type: ViewChild,
                args: ['container', { static: true }]
            }], sliderEl: [{
                type: ViewChild,
                args: ['slider', { static: true }]
            }] } });
//# sourceMappingURL=data:application/json;base64,