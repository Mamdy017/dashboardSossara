import { Component, Input, Output, HostBinding, ChangeDetectionStrategy, EventEmitter } from '@angular/core';
import * as i0 from "@angular/core";
import * as i1 from "@angular/common";
import * as i2 from "./gallery-nav.component";
import * as i3 from "./gallery-dots.component";
import * as i4 from "./gallery-slider.component";
import * as i5 from "./gallery-counter.component";
import * as i6 from "./gallery-thumbs.component";
export class GalleryCoreComponent {
    constructor() {
        this.action = new EventEmitter();
        this.itemClick = new EventEmitter();
        this.thumbClick = new EventEmitter();
        this.error = new EventEmitter();
    }
    /** Set thumbnails position */
    get thumbPosition() {
        return this.config.thumbPosition;
    }
    /** Set sliding direction */
    get slidingDirection() {
        return this.config.slidingDirection;
    }
    /** Disable thumbnails clicks */
    get disableThumb() {
        return this.config.disableThumb;
    }
    /** Set gallery image size */
    get imageSize() {
        return this.config.imageSize;
    }
    /** Set gallery dots position */
    get dotsPosition() {
        return this.config.dotsPosition;
    }
    /** Set gallery counter position */
    get counterPosition() {
        return this.config.counterPosition;
    }
}
GalleryCoreComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "14.2.4", ngImport: i0, type: GalleryCoreComponent, deps: [], target: i0.ɵɵFactoryTarget.Component });
GalleryCoreComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "14.2.4", type: GalleryCoreComponent, selector: "gallery-core", inputs: { state: "state", config: "config" }, outputs: { action: "action", itemClick: "itemClick", thumbClick: "thumbClick", error: "error" }, host: { properties: { "attr.thumbPosition": "this.thumbPosition", "attr.slidingDirection": "this.slidingDirection", "attr.disableThumb": "this.disableThumb", "attr.imageSize": "this.imageSize", "attr.dotsPosition": "this.dotsPosition", "attr.counterPosition": "this.counterPosition" } }, ngImport: i0, template: `
    <gallery-thumbs *ngIf="config.thumb"
                    [state]="state"
                    [config]="config"
                    (action)="action.emit($event)"
                    (thumbClick)="thumbClick.emit($event)">
    </gallery-thumbs>
    <div class="g-box">
      <gallery-slider [state]="state"
                      [config]="config"
                      (action)="action.emit($event)"
                      (itemClick)="itemClick.emit($event)"
                      (error)="error.emit($event)">

        <gallery-nav *ngIf="config.nav && state.items.length > 1"
                     [state]="state"
                     [config]="config"
                     (action)="action.emit($event)">
        </gallery-nav>

      </gallery-slider>

      <gallery-dots *ngIf="config.dots"
                    [state]="state"
                    [config]="config"
                    (action)="action.emit($event)">
      </gallery-dots>

      <gallery-counter *ngIf="config.counter"
                       [state]="state">
      </gallery-counter>
    </div>
  `, isInline: true, dependencies: [{ kind: "directive", type: i1.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { kind: "component", type: i2.GalleryNavComponent, selector: "gallery-nav", inputs: ["state", "config"], outputs: ["action"] }, { kind: "component", type: i3.GalleryDotsComponent, selector: "gallery-dots", inputs: ["state", "config"], outputs: ["action"] }, { kind: "component", type: i4.GallerySliderComponent, selector: "gallery-slider", inputs: ["state", "config"], outputs: ["action", "itemClick", "error"] }, { kind: "component", type: i5.GalleryCounterComponent, selector: "gallery-counter", inputs: ["state"] }, { kind: "component", type: i6.GalleryThumbsComponent, selector: "gallery-thumbs", inputs: ["state", "config"], outputs: ["action", "thumbClick", "error"] }], changeDetection: i0.ChangeDetectionStrategy.OnPush });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "14.2.4", ngImport: i0, type: GalleryCoreComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'gallery-core',
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    template: `
    <gallery-thumbs *ngIf="config.thumb"
                    [state]="state"
                    [config]="config"
                    (action)="action.emit($event)"
                    (thumbClick)="thumbClick.emit($event)">
    </gallery-thumbs>
    <div class="g-box">
      <gallery-slider [state]="state"
                      [config]="config"
                      (action)="action.emit($event)"
                      (itemClick)="itemClick.emit($event)"
                      (error)="error.emit($event)">

        <gallery-nav *ngIf="config.nav && state.items.length > 1"
                     [state]="state"
                     [config]="config"
                     (action)="action.emit($event)">
        </gallery-nav>

      </gallery-slider>

      <gallery-dots *ngIf="config.dots"
                    [state]="state"
                    [config]="config"
                    (action)="action.emit($event)">
      </gallery-dots>

      <gallery-counter *ngIf="config.counter"
                       [state]="state">
      </gallery-counter>
    </div>
  `
                }]
        }], propDecorators: { state: [{
                type: Input
            }], config: [{
                type: Input
            }], action: [{
                type: Output
            }], itemClick: [{
                type: Output
            }], thumbClick: [{
                type: Output
            }], error: [{
                type: Output
            }], thumbPosition: [{
                type: HostBinding,
                args: ['attr.thumbPosition']
            }], slidingDirection: [{
                type: HostBinding,
                args: ['attr.slidingDirection']
            }], disableThumb: [{
                type: HostBinding,
                args: ['attr.disableThumb']
            }], imageSize: [{
                type: HostBinding,
                args: ['attr.imageSize']
            }], dotsPosition: [{
                type: HostBinding,
                args: ['attr.dotsPosition']
            }], counterPosition: [{
                type: HostBinding,
                args: ['attr.counterPosition']
            }] } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ2FsbGVyeS1jb3JlLmNvbXBvbmVudC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uL3Byb2plY3RzL25nLWdhbGxlcnkvc3JjL2xpYi9jb21wb25lbnRzL2dhbGxlcnktY29yZS5jb21wb25lbnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLFNBQVMsRUFBRSxLQUFLLEVBQUUsTUFBTSxFQUFFLFdBQVcsRUFBRSx1QkFBdUIsRUFBRSxZQUFZLEVBQUUsTUFBTSxlQUFlLENBQUM7Ozs7Ozs7O0FBeUM3RyxNQUFNLE9BQU8sb0JBQW9CO0lBckNqQztRQXlDWSxXQUFNLEdBQUcsSUFBSSxZQUFZLEVBQW1CLENBQUM7UUFDN0MsY0FBUyxHQUFHLElBQUksWUFBWSxFQUFVLENBQUM7UUFDdkMsZUFBVSxHQUFHLElBQUksWUFBWSxFQUFVLENBQUM7UUFDeEMsVUFBSyxHQUFHLElBQUksWUFBWSxFQUFnQixDQUFDO0tBZ0NwRDtJQTlCQyw4QkFBOEI7SUFDOUIsSUFBdUMsYUFBYTtRQUNsRCxPQUFPLElBQUksQ0FBQyxNQUFNLENBQUMsYUFBYSxDQUFDO0lBQ25DLENBQUM7SUFFRCw0QkFBNEI7SUFDNUIsSUFBMEMsZ0JBQWdCO1FBQ3hELE9BQU8sSUFBSSxDQUFDLE1BQU0sQ0FBQyxnQkFBZ0IsQ0FBQztJQUN0QyxDQUFDO0lBRUQsZ0NBQWdDO0lBQ2hDLElBQXNDLFlBQVk7UUFDaEQsT0FBTyxJQUFJLENBQUMsTUFBTSxDQUFDLFlBQVksQ0FBQztJQUNsQyxDQUFDO0lBRUQsNkJBQTZCO0lBQzdCLElBQW1DLFNBQVM7UUFDMUMsT0FBTyxJQUFJLENBQUMsTUFBTSxDQUFDLFNBQVMsQ0FBQztJQUMvQixDQUFDO0lBRUQsZ0NBQWdDO0lBQ2hDLElBQXNDLFlBQVk7UUFDaEQsT0FBTyxJQUFJLENBQUMsTUFBTSxDQUFDLFlBQVksQ0FBQztJQUNsQyxDQUFDO0lBRUQsbUNBQW1DO0lBQ25DLElBQXlDLGVBQWU7UUFDdEQsT0FBTyxJQUFJLENBQUMsTUFBTSxDQUFDLGVBQWUsQ0FBQztJQUNyQyxDQUFDOztpSEFyQ1Usb0JBQW9CO3FHQUFwQixvQkFBb0IsbWVBbENyQjs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7R0FnQ1Q7MkZBRVUsb0JBQW9CO2tCQXJDaEMsU0FBUzttQkFBQztvQkFDVCxRQUFRLEVBQUUsY0FBYztvQkFDeEIsZUFBZSxFQUFFLHVCQUF1QixDQUFDLE1BQU07b0JBQy9DLFFBQVEsRUFBRTs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7R0FnQ1Q7aUJBQ0Y7OEJBR1UsS0FBSztzQkFBYixLQUFLO2dCQUNHLE1BQU07c0JBQWQsS0FBSztnQkFDSSxNQUFNO3NCQUFmLE1BQU07Z0JBQ0csU0FBUztzQkFBbEIsTUFBTTtnQkFDRyxVQUFVO3NCQUFuQixNQUFNO2dCQUNHLEtBQUs7c0JBQWQsTUFBTTtnQkFHZ0MsYUFBYTtzQkFBbkQsV0FBVzt1QkFBQyxvQkFBb0I7Z0JBS1MsZ0JBQWdCO3NCQUF6RCxXQUFXO3VCQUFDLHVCQUF1QjtnQkFLRSxZQUFZO3NCQUFqRCxXQUFXO3VCQUFDLG1CQUFtQjtnQkFLRyxTQUFTO3NCQUEzQyxXQUFXO3VCQUFDLGdCQUFnQjtnQkFLUyxZQUFZO3NCQUFqRCxXQUFXO3VCQUFDLG1CQUFtQjtnQkFLUyxlQUFlO3NCQUF2RCxXQUFXO3VCQUFDLHNCQUFzQiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IENvbXBvbmVudCwgSW5wdXQsIE91dHB1dCwgSG9zdEJpbmRpbmcsIENoYW5nZURldGVjdGlvblN0cmF0ZWd5LCBFdmVudEVtaXR0ZXIgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcclxuaW1wb3J0IHsgR2FsbGVyeUVycm9yLCBHYWxsZXJ5U3RhdGUgfSBmcm9tICcuLi9tb2RlbHMvZ2FsbGVyeS5tb2RlbCc7XHJcbmltcG9ydCB7IEdhbGxlcnlDb25maWcgfSBmcm9tICcuLi9tb2RlbHMvY29uZmlnLm1vZGVsJztcclxuXHJcbkBDb21wb25lbnQoe1xyXG4gIHNlbGVjdG9yOiAnZ2FsbGVyeS1jb3JlJyxcclxuICBjaGFuZ2VEZXRlY3Rpb246IENoYW5nZURldGVjdGlvblN0cmF0ZWd5Lk9uUHVzaCxcclxuICB0ZW1wbGF0ZTogYFxyXG4gICAgPGdhbGxlcnktdGh1bWJzICpuZ0lmPVwiY29uZmlnLnRodW1iXCJcclxuICAgICAgICAgICAgICAgICAgICBbc3RhdGVdPVwic3RhdGVcIlxyXG4gICAgICAgICAgICAgICAgICAgIFtjb25maWddPVwiY29uZmlnXCJcclxuICAgICAgICAgICAgICAgICAgICAoYWN0aW9uKT1cImFjdGlvbi5lbWl0KCRldmVudClcIlxyXG4gICAgICAgICAgICAgICAgICAgICh0aHVtYkNsaWNrKT1cInRodW1iQ2xpY2suZW1pdCgkZXZlbnQpXCI+XHJcbiAgICA8L2dhbGxlcnktdGh1bWJzPlxyXG4gICAgPGRpdiBjbGFzcz1cImctYm94XCI+XHJcbiAgICAgIDxnYWxsZXJ5LXNsaWRlciBbc3RhdGVdPVwic3RhdGVcIlxyXG4gICAgICAgICAgICAgICAgICAgICAgW2NvbmZpZ109XCJjb25maWdcIlxyXG4gICAgICAgICAgICAgICAgICAgICAgKGFjdGlvbik9XCJhY3Rpb24uZW1pdCgkZXZlbnQpXCJcclxuICAgICAgICAgICAgICAgICAgICAgIChpdGVtQ2xpY2spPVwiaXRlbUNsaWNrLmVtaXQoJGV2ZW50KVwiXHJcbiAgICAgICAgICAgICAgICAgICAgICAoZXJyb3IpPVwiZXJyb3IuZW1pdCgkZXZlbnQpXCI+XHJcblxyXG4gICAgICAgIDxnYWxsZXJ5LW5hdiAqbmdJZj1cImNvbmZpZy5uYXYgJiYgc3RhdGUuaXRlbXMubGVuZ3RoID4gMVwiXHJcbiAgICAgICAgICAgICAgICAgICAgIFtzdGF0ZV09XCJzdGF0ZVwiXHJcbiAgICAgICAgICAgICAgICAgICAgIFtjb25maWddPVwiY29uZmlnXCJcclxuICAgICAgICAgICAgICAgICAgICAgKGFjdGlvbik9XCJhY3Rpb24uZW1pdCgkZXZlbnQpXCI+XHJcbiAgICAgICAgPC9nYWxsZXJ5LW5hdj5cclxuXHJcbiAgICAgIDwvZ2FsbGVyeS1zbGlkZXI+XHJcblxyXG4gICAgICA8Z2FsbGVyeS1kb3RzICpuZ0lmPVwiY29uZmlnLmRvdHNcIlxyXG4gICAgICAgICAgICAgICAgICAgIFtzdGF0ZV09XCJzdGF0ZVwiXHJcbiAgICAgICAgICAgICAgICAgICAgW2NvbmZpZ109XCJjb25maWdcIlxyXG4gICAgICAgICAgICAgICAgICAgIChhY3Rpb24pPVwiYWN0aW9uLmVtaXQoJGV2ZW50KVwiPlxyXG4gICAgICA8L2dhbGxlcnktZG90cz5cclxuXHJcbiAgICAgIDxnYWxsZXJ5LWNvdW50ZXIgKm5nSWY9XCJjb25maWcuY291bnRlclwiXHJcbiAgICAgICAgICAgICAgICAgICAgICAgW3N0YXRlXT1cInN0YXRlXCI+XHJcbiAgICAgIDwvZ2FsbGVyeS1jb3VudGVyPlxyXG4gICAgPC9kaXY+XHJcbiAgYFxyXG59KVxyXG5leHBvcnQgY2xhc3MgR2FsbGVyeUNvcmVDb21wb25lbnQge1xyXG5cclxuICBASW5wdXQoKSBzdGF0ZTogR2FsbGVyeVN0YXRlO1xyXG4gIEBJbnB1dCgpIGNvbmZpZzogR2FsbGVyeUNvbmZpZztcclxuICBAT3V0cHV0KCkgYWN0aW9uID0gbmV3IEV2ZW50RW1pdHRlcjxzdHJpbmcgfCBudW1iZXI+KCk7XHJcbiAgQE91dHB1dCgpIGl0ZW1DbGljayA9IG5ldyBFdmVudEVtaXR0ZXI8bnVtYmVyPigpO1xyXG4gIEBPdXRwdXQoKSB0aHVtYkNsaWNrID0gbmV3IEV2ZW50RW1pdHRlcjxudW1iZXI+KCk7XHJcbiAgQE91dHB1dCgpIGVycm9yID0gbmV3IEV2ZW50RW1pdHRlcjxHYWxsZXJ5RXJyb3I+KCk7XHJcblxyXG4gIC8qKiBTZXQgdGh1bWJuYWlscyBwb3NpdGlvbiAqL1xyXG4gIEBIb3N0QmluZGluZygnYXR0ci50aHVtYlBvc2l0aW9uJykgZ2V0IHRodW1iUG9zaXRpb24oKTogJ3RvcCcgfCAnbGVmdCcgfCAncmlnaHQnIHwgJ2JvdHRvbScge1xyXG4gICAgcmV0dXJuIHRoaXMuY29uZmlnLnRodW1iUG9zaXRpb247XHJcbiAgfVxyXG5cclxuICAvKiogU2V0IHNsaWRpbmcgZGlyZWN0aW9uICovXHJcbiAgQEhvc3RCaW5kaW5nKCdhdHRyLnNsaWRpbmdEaXJlY3Rpb24nKSBnZXQgc2xpZGluZ0RpcmVjdGlvbigpOiAnaG9yaXpvbnRhbCcgfCAndmVydGljYWwnIHtcclxuICAgIHJldHVybiB0aGlzLmNvbmZpZy5zbGlkaW5nRGlyZWN0aW9uO1xyXG4gIH1cclxuXHJcbiAgLyoqIERpc2FibGUgdGh1bWJuYWlscyBjbGlja3MgKi9cclxuICBASG9zdEJpbmRpbmcoJ2F0dHIuZGlzYWJsZVRodW1iJykgZ2V0IGRpc2FibGVUaHVtYigpOiBib29sZWFuIHtcclxuICAgIHJldHVybiB0aGlzLmNvbmZpZy5kaXNhYmxlVGh1bWI7XHJcbiAgfVxyXG5cclxuICAvKiogU2V0IGdhbGxlcnkgaW1hZ2Ugc2l6ZSAqL1xyXG4gIEBIb3N0QmluZGluZygnYXR0ci5pbWFnZVNpemUnKSBnZXQgaW1hZ2VTaXplKCk6ICdjb3ZlcicgfCAnY29udGFpbicge1xyXG4gICAgcmV0dXJuIHRoaXMuY29uZmlnLmltYWdlU2l6ZTtcclxuICB9XHJcblxyXG4gIC8qKiBTZXQgZ2FsbGVyeSBkb3RzIHBvc2l0aW9uICovXHJcbiAgQEhvc3RCaW5kaW5nKCdhdHRyLmRvdHNQb3NpdGlvbicpIGdldCBkb3RzUG9zaXRpb24oKTogJ3RvcCcgfCAnYm90dG9tJyB7XHJcbiAgICByZXR1cm4gdGhpcy5jb25maWcuZG90c1Bvc2l0aW9uO1xyXG4gIH1cclxuXHJcbiAgLyoqIFNldCBnYWxsZXJ5IGNvdW50ZXIgcG9zaXRpb24gKi9cclxuICBASG9zdEJpbmRpbmcoJ2F0dHIuY291bnRlclBvc2l0aW9uJykgZ2V0IGNvdW50ZXJQb3NpdGlvbigpOiAndG9wJyB8ICdib3R0b20nIHtcclxuICAgIHJldHVybiB0aGlzLmNvbmZpZy5jb3VudGVyUG9zaXRpb247XHJcbiAgfVxyXG5cclxufVxyXG4iXX0=