import { OnDestroy, OnInit, OnChanges, SimpleChanges, NgZone, ElementRef, EventEmitter } from '@angular/core';
import { Observable } from 'rxjs';
import { GalleryState, GalleryError } from '../models/gallery.model';
import { GalleryConfig } from '../models/config.model';
import { SliderState } from '../models/slider.model';
import * as i0 from "@angular/core";
export declare class GallerySliderComponent implements OnInit, OnChanges, OnDestroy {
    private _el;
    private _zone;
    private _platform;
    /** Sliding worker */
    private readonly _slidingWorker$;
    /** HammerJS instance */
    private _hammer;
    /** Subscription reference to window resize stream */
    private _resizeSub$;
    /** Subscription reference to slider state stream */
    private _sliderStateSub$;
    /** Stream that emits sliding state */
    sliderState$: Observable<SliderState>;
    /** Gallery state */
    state: GalleryState;
    /** Gallery config */
    config: GalleryConfig;
    /** Stream that emits when the active item should change */
    action: EventEmitter<string | number>;
    /** Stream that emits when item is clicked */
    itemClick: EventEmitter<number>;
    /** Stream that emits when an error occurs */
    error: EventEmitter<GalleryError>;
    containerEl: ElementRef;
    sliderEl: ElementRef;
    get container(): HTMLElement;
    get slider(): HTMLElement;
    /** Item zoom */
    get zoom(): {
        transform: string;
    };
    constructor(_el: ElementRef, _zone: NgZone, _platform: Object);
    ngOnChanges(changes: SimpleChanges): void;
    ngOnInit(): void;
    ngOnDestroy(): void;
    private activateGestures;
    private deactivateGestures;
    /**
     * Convert sliding state to styles
     */
    private getSliderStyles;
    private verticalPan;
    private horizontalPan;
    private next;
    private prev;
    private updateSlider;
    static ɵfac: i0.ɵɵFactoryDeclaration<GallerySliderComponent, never>;
    static ɵcmp: i0.ɵɵComponentDeclaration<GallerySliderComponent, "gallery-slider", never, { "state": "state"; "config": "config"; }, { "action": "action"; "itemClick": "itemClick"; "error": "error"; }, never, ["*"], false>;
}
