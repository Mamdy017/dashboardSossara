import { OnDestroy, OnInit, OnChanges, SimpleChanges, NgZone, ElementRef, EventEmitter } from '@angular/core';
import { Observable } from 'rxjs';
import { GalleryConfig } from '../models/config.model';
import { GalleryState, GalleryError } from '../models/gallery.model';
import { ThumbnailsView } from '../models/constants';
import { SliderState } from '../models/slider.model';
import * as i0 from "@angular/core";
export declare class GalleryThumbsComponent implements OnInit, OnChanges, OnDestroy {
    private _el;
    private _zone;
    /** Sliding worker */
    private readonly _slidingWorker$;
    /** HammerJS instance */
    private _hammer;
    /** Current slider position in free sliding mode */
    private _freeModeCurrentOffset;
    /** Subscription reference to slider state stream */
    private _sliderStateSub$;
    /** Thumbnails view enum */
    thumbnailsView: typeof ThumbnailsView;
    /** Thumbnails size is less than slider size (for contain thumbnails view) */
    thumbnailsLessThanSlider: boolean;
    /** Stream that emits sliding state */
    sliderState$: Observable<SliderState>;
    /** Gallery state */
    state: GalleryState;
    /** Gallery config */
    config: GalleryConfig;
    /** Stream that emits when the active item should change */
    action: EventEmitter<string | number>;
    /** Stream that emits when thumb is clicked */
    thumbClick: EventEmitter<number>;
    /** Stream that emits when an error occurs */
    error: EventEmitter<GalleryError>;
    /** Host height */
    height: string;
    /** Host width */
    width: string;
    sliderEl: ElementRef;
    get slider(): HTMLElement;
    constructor(_el: ElementRef, _zone: NgZone);
    ngOnChanges(changes: SimpleChanges): void;
    ngOnInit(): void;
    ngOnDestroy(): void;
    private activateGestures;
    private deactivateGestures;
    /**
     * Sliding strict mode
     */
    private strictMode;
    /**
     * Sliding free mode
     */
    private freeMode;
    /**
     * Check if the minimum free scroll is exceeded (used in Bottom, Left directions)
     */
    private minFreeScrollExceeded;
    /**
     * Check if the maximum free scroll is exceeded (used in Top, Right directions)
     */
    private maxFreeScrollExceeded;
    /**
     * Convert sliding state to styles
     */
    private getSliderStyles;
    private verticalPan;
    private horizontalPan;
    private next;
    private prev;
    private updateSlider;
    static ɵfac: i0.ɵɵFactoryDeclaration<GalleryThumbsComponent, never>;
    static ɵcmp: i0.ɵɵComponentDeclaration<GalleryThumbsComponent, "gallery-thumbs", never, { "state": "state"; "config": "config"; }, { "action": "action"; "thumbClick": "thumbClick"; "error": "error"; }, never, never, false>;
}
