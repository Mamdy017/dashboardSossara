{"version":3,"file":"angular-count-to.js","sources":["../../src/directives/count-to.directive.ts","../../src/modules/count-to.module.ts","../../src/angular-count-to.ts","../../public_api.ts","../../angular-count-to.ts"],"names":[],"mappings":"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","sourcesContent":["import { Directive, OnChanges, ElementRef, Input, OnInit } from '@angular/core';\nexport class CountToDirective implements OnChanges, OnInit {\n  \n  CountTo: number;\n  \n  from = 0;\n  \n  duration = 4;\n\n  e = this.el.nativeElement;\n  num: number;\n  refreshInterval = 30;\n  steps: number;\n  step = 0;\n  increment: number;\n/**\n * @param {?} el\n */\nconstructor(private el: ElementRef) {\n\n  }\n/**\n * @return {?}\n */\nngOnInit() {\n\n  }\n/**\n * @return {?}\n */\nngOnChanges() {\n    if (this.CountTo) {\n      this.start();\n    }\n  }\n/**\n * @return {?}\n */\ncalculate() {\n    this.duration = this.duration * 1000;\n\n    this.steps = Math.ceil(this.duration / this.refreshInterval);\n    this.increment = ((this.CountTo - this.from) / this.steps);\n    this.num = this.from;\n  }\n/**\n * @return {?}\n */\ntick() {\n    setTimeout(() => {\n      this.num += this.increment;\n      this.step++;\n      if (this.step >= this.steps) {\n        this.num = this.CountTo;\n        this.e.textContent = this.CountTo;\n      } else {\n        this.e.textContent = Math.round(this.num);\n        this.tick();\n      }\n    }, this.refreshInterval);\n  }\n/**\n * @return {?}\n */\nstart() {\n    this.calculate();\n    this.tick();\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: '[CountTo]'\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: ElementRef, },\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'CountTo': [{ type: Input },],\n'from': [{ type: Input },],\n'duration': [{ type: Input },],\n};\n}\n\nfunction CountToDirective_tsickle_Closure_declarations() {\n/** @type {?} */\nCountToDirective.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nCountToDirective.ctorParameters;\n/** @type {?} */\nCountToDirective.propDecorators;\n/** @type {?} */\nCountToDirective.prototype.CountTo;\n/** @type {?} */\nCountToDirective.prototype.from;\n/** @type {?} */\nCountToDirective.prototype.duration;\n/** @type {?} */\nCountToDirective.prototype.e;\n/** @type {?} */\nCountToDirective.prototype.num;\n/** @type {?} */\nCountToDirective.prototype.refreshInterval;\n/** @type {?} */\nCountToDirective.prototype.steps;\n/** @type {?} */\nCountToDirective.prototype.step;\n/** @type {?} */\nCountToDirective.prototype.increment;\n/** @type {?} */\nCountToDirective.prototype.el;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import { CountToDirective } from './../directives/count-to.directive';\nimport { NgModule, ModuleWithProviders } from '@angular/core';\nexport class CountToModule {\n/**\n * Use in AppModule\n * @return {?}\n */\npublic static forRoot(): ModuleWithProviders {\n        return {\n            ngModule: CountToModule,\n            providers: []\n        };\n    }\n/**\n * Use in features modules with lazy loading\n * @return {?}\n */\npublic static forChild(): ModuleWithProviders {\n        return {\n            ngModule: CountToModule,\n            providers: []\n        };\n    }\n\nstatic decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{\n    declarations: [\n        CountToDirective\n        // Pipes.\n        // Directives.\n    ],\n    exports: [\n        CountToDirective\n        // Pipes.\n        // Directives.\n    ]\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction CountToModule_tsickle_Closure_declarations() {\n/** @type {?} */\nCountToModule.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nCountToModule.ctorParameters;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","// Public classes.\nexport { CountToDirective } from './directives/count-to.directive';\nexport { CountToModule } from './modules/count-to.module';\n","/**\n * Angular library starter.\n * Build an Angular library compatible with AoT compilation & Tree shaking.\n * Written by Roberto Simonetti.\n * MIT license.\n * https://github.com/robisim74/angular-count-to\n */\n\n/**\n * Entry point for all public APIs of the package.\n */\nexport {CountToDirective,CountToModule} from './src/angular-count-to';\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport {CountToDirective,CountToModule} from './public_api';\n"]}